
foo_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  0800a000  0800a000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d48  0800a18c  0800a18c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800fed4  0800fed4  00006ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff24  0800ff24  0000702c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff24  0800ff24  00006f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff2c  0800ff2c  0000702c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff2c  0800ff2c  00006f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff30  0800ff30  00006f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800ff34  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000954  2000002c  0800ff60  0000702c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000980  0800ff60  00007980  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000702c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a03  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ae  00000000  00000000  0001aa5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  0001db10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d48  00000000  00000000  0001ec28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226df  00000000  00000000  0001f970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160ce  00000000  00000000  0004204f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf7fc  00000000  00000000  0005811d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127919  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047b4  00000000  00000000  0012795c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0012c110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800a18c <__do_global_dtors_aux>:
 800a18c:	b510      	push	{r4, lr}
 800a18e:	4c05      	ldr	r4, [pc, #20]	@ (800a1a4 <__do_global_dtors_aux+0x18>)
 800a190:	7823      	ldrb	r3, [r4, #0]
 800a192:	b933      	cbnz	r3, 800a1a2 <__do_global_dtors_aux+0x16>
 800a194:	4b04      	ldr	r3, [pc, #16]	@ (800a1a8 <__do_global_dtors_aux+0x1c>)
 800a196:	b113      	cbz	r3, 800a19e <__do_global_dtors_aux+0x12>
 800a198:	4804      	ldr	r0, [pc, #16]	@ (800a1ac <__do_global_dtors_aux+0x20>)
 800a19a:	f3af 8000 	nop.w
 800a19e:	2301      	movs	r3, #1
 800a1a0:	7023      	strb	r3, [r4, #0]
 800a1a2:	bd10      	pop	{r4, pc}
 800a1a4:	2000002c 	.word	0x2000002c
 800a1a8:	00000000 	.word	0x00000000
 800a1ac:	0800febc 	.word	0x0800febc

0800a1b0 <frame_dummy>:
 800a1b0:	b508      	push	{r3, lr}
 800a1b2:	4b03      	ldr	r3, [pc, #12]	@ (800a1c0 <frame_dummy+0x10>)
 800a1b4:	b11b      	cbz	r3, 800a1be <frame_dummy+0xe>
 800a1b6:	4903      	ldr	r1, [pc, #12]	@ (800a1c4 <frame_dummy+0x14>)
 800a1b8:	4803      	ldr	r0, [pc, #12]	@ (800a1c8 <frame_dummy+0x18>)
 800a1ba:	f3af 8000 	nop.w
 800a1be:	bd08      	pop	{r3, pc}
 800a1c0:	00000000 	.word	0x00000000
 800a1c4:	20000030 	.word	0x20000030
 800a1c8:	0800febc 	.word	0x0800febc

0800a1cc <__aeabi_drsub>:
 800a1cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800a1d0:	e002      	b.n	800a1d8 <__adddf3>
 800a1d2:	bf00      	nop

0800a1d4 <__aeabi_dsub>:
 800a1d4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800a1d8 <__adddf3>:
 800a1d8:	b530      	push	{r4, r5, lr}
 800a1da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800a1de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800a1e2:	ea94 0f05 	teq	r4, r5
 800a1e6:	bf08      	it	eq
 800a1e8:	ea90 0f02 	teqeq	r0, r2
 800a1ec:	bf1f      	itttt	ne
 800a1ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 800a1f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 800a1f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800a1fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800a1fe:	f000 80e2 	beq.w	800a3c6 <__adddf3+0x1ee>
 800a202:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800a206:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800a20a:	bfb8      	it	lt
 800a20c:	426d      	neglt	r5, r5
 800a20e:	dd0c      	ble.n	800a22a <__adddf3+0x52>
 800a210:	442c      	add	r4, r5
 800a212:	ea80 0202 	eor.w	r2, r0, r2
 800a216:	ea81 0303 	eor.w	r3, r1, r3
 800a21a:	ea82 0000 	eor.w	r0, r2, r0
 800a21e:	ea83 0101 	eor.w	r1, r3, r1
 800a222:	ea80 0202 	eor.w	r2, r0, r2
 800a226:	ea81 0303 	eor.w	r3, r1, r3
 800a22a:	2d36      	cmp	r5, #54	@ 0x36
 800a22c:	bf88      	it	hi
 800a22e:	bd30      	pophi	{r4, r5, pc}
 800a230:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800a234:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800a238:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800a23c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800a240:	d002      	beq.n	800a248 <__adddf3+0x70>
 800a242:	4240      	negs	r0, r0
 800a244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800a248:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800a24c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800a250:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800a254:	d002      	beq.n	800a25c <__adddf3+0x84>
 800a256:	4252      	negs	r2, r2
 800a258:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800a25c:	ea94 0f05 	teq	r4, r5
 800a260:	f000 80a7 	beq.w	800a3b2 <__adddf3+0x1da>
 800a264:	f1a4 0401 	sub.w	r4, r4, #1
 800a268:	f1d5 0e20 	rsbs	lr, r5, #32
 800a26c:	db0d      	blt.n	800a28a <__adddf3+0xb2>
 800a26e:	fa02 fc0e 	lsl.w	ip, r2, lr
 800a272:	fa22 f205 	lsr.w	r2, r2, r5
 800a276:	1880      	adds	r0, r0, r2
 800a278:	f141 0100 	adc.w	r1, r1, #0
 800a27c:	fa03 f20e 	lsl.w	r2, r3, lr
 800a280:	1880      	adds	r0, r0, r2
 800a282:	fa43 f305 	asr.w	r3, r3, r5
 800a286:	4159      	adcs	r1, r3
 800a288:	e00e      	b.n	800a2a8 <__adddf3+0xd0>
 800a28a:	f1a5 0520 	sub.w	r5, r5, #32
 800a28e:	f10e 0e20 	add.w	lr, lr, #32
 800a292:	2a01      	cmp	r2, #1
 800a294:	fa03 fc0e 	lsl.w	ip, r3, lr
 800a298:	bf28      	it	cs
 800a29a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800a29e:	fa43 f305 	asr.w	r3, r3, r5
 800a2a2:	18c0      	adds	r0, r0, r3
 800a2a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800a2a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800a2ac:	d507      	bpl.n	800a2be <__adddf3+0xe6>
 800a2ae:	f04f 0e00 	mov.w	lr, #0
 800a2b2:	f1dc 0c00 	rsbs	ip, ip, #0
 800a2b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 800a2ba:	eb6e 0101 	sbc.w	r1, lr, r1
 800a2be:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800a2c2:	d31b      	bcc.n	800a2fc <__adddf3+0x124>
 800a2c4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800a2c8:	d30c      	bcc.n	800a2e4 <__adddf3+0x10c>
 800a2ca:	0849      	lsrs	r1, r1, #1
 800a2cc:	ea5f 0030 	movs.w	r0, r0, rrx
 800a2d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800a2d4:	f104 0401 	add.w	r4, r4, #1
 800a2d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800a2dc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800a2e0:	f080 809a 	bcs.w	800a418 <__adddf3+0x240>
 800a2e4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800a2e8:	bf08      	it	eq
 800a2ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800a2ee:	f150 0000 	adcs.w	r0, r0, #0
 800a2f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800a2f6:	ea41 0105 	orr.w	r1, r1, r5
 800a2fa:	bd30      	pop	{r4, r5, pc}
 800a2fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800a300:	4140      	adcs	r0, r0
 800a302:	eb41 0101 	adc.w	r1, r1, r1
 800a306:	3c01      	subs	r4, #1
 800a308:	bf28      	it	cs
 800a30a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800a30e:	d2e9      	bcs.n	800a2e4 <__adddf3+0x10c>
 800a310:	f091 0f00 	teq	r1, #0
 800a314:	bf04      	itt	eq
 800a316:	4601      	moveq	r1, r0
 800a318:	2000      	moveq	r0, #0
 800a31a:	fab1 f381 	clz	r3, r1
 800a31e:	bf08      	it	eq
 800a320:	3320      	addeq	r3, #32
 800a322:	f1a3 030b 	sub.w	r3, r3, #11
 800a326:	f1b3 0220 	subs.w	r2, r3, #32
 800a32a:	da0c      	bge.n	800a346 <__adddf3+0x16e>
 800a32c:	320c      	adds	r2, #12
 800a32e:	dd08      	ble.n	800a342 <__adddf3+0x16a>
 800a330:	f102 0c14 	add.w	ip, r2, #20
 800a334:	f1c2 020c 	rsb	r2, r2, #12
 800a338:	fa01 f00c 	lsl.w	r0, r1, ip
 800a33c:	fa21 f102 	lsr.w	r1, r1, r2
 800a340:	e00c      	b.n	800a35c <__adddf3+0x184>
 800a342:	f102 0214 	add.w	r2, r2, #20
 800a346:	bfd8      	it	le
 800a348:	f1c2 0c20 	rsble	ip, r2, #32
 800a34c:	fa01 f102 	lsl.w	r1, r1, r2
 800a350:	fa20 fc0c 	lsr.w	ip, r0, ip
 800a354:	bfdc      	itt	le
 800a356:	ea41 010c 	orrle.w	r1, r1, ip
 800a35a:	4090      	lslle	r0, r2
 800a35c:	1ae4      	subs	r4, r4, r3
 800a35e:	bfa2      	ittt	ge
 800a360:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800a364:	4329      	orrge	r1, r5
 800a366:	bd30      	popge	{r4, r5, pc}
 800a368:	ea6f 0404 	mvn.w	r4, r4
 800a36c:	3c1f      	subs	r4, #31
 800a36e:	da1c      	bge.n	800a3aa <__adddf3+0x1d2>
 800a370:	340c      	adds	r4, #12
 800a372:	dc0e      	bgt.n	800a392 <__adddf3+0x1ba>
 800a374:	f104 0414 	add.w	r4, r4, #20
 800a378:	f1c4 0220 	rsb	r2, r4, #32
 800a37c:	fa20 f004 	lsr.w	r0, r0, r4
 800a380:	fa01 f302 	lsl.w	r3, r1, r2
 800a384:	ea40 0003 	orr.w	r0, r0, r3
 800a388:	fa21 f304 	lsr.w	r3, r1, r4
 800a38c:	ea45 0103 	orr.w	r1, r5, r3
 800a390:	bd30      	pop	{r4, r5, pc}
 800a392:	f1c4 040c 	rsb	r4, r4, #12
 800a396:	f1c4 0220 	rsb	r2, r4, #32
 800a39a:	fa20 f002 	lsr.w	r0, r0, r2
 800a39e:	fa01 f304 	lsl.w	r3, r1, r4
 800a3a2:	ea40 0003 	orr.w	r0, r0, r3
 800a3a6:	4629      	mov	r1, r5
 800a3a8:	bd30      	pop	{r4, r5, pc}
 800a3aa:	fa21 f004 	lsr.w	r0, r1, r4
 800a3ae:	4629      	mov	r1, r5
 800a3b0:	bd30      	pop	{r4, r5, pc}
 800a3b2:	f094 0f00 	teq	r4, #0
 800a3b6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800a3ba:	bf06      	itte	eq
 800a3bc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800a3c0:	3401      	addeq	r4, #1
 800a3c2:	3d01      	subne	r5, #1
 800a3c4:	e74e      	b.n	800a264 <__adddf3+0x8c>
 800a3c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800a3ca:	bf18      	it	ne
 800a3cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800a3d0:	d029      	beq.n	800a426 <__adddf3+0x24e>
 800a3d2:	ea94 0f05 	teq	r4, r5
 800a3d6:	bf08      	it	eq
 800a3d8:	ea90 0f02 	teqeq	r0, r2
 800a3dc:	d005      	beq.n	800a3ea <__adddf3+0x212>
 800a3de:	ea54 0c00 	orrs.w	ip, r4, r0
 800a3e2:	bf04      	itt	eq
 800a3e4:	4619      	moveq	r1, r3
 800a3e6:	4610      	moveq	r0, r2
 800a3e8:	bd30      	pop	{r4, r5, pc}
 800a3ea:	ea91 0f03 	teq	r1, r3
 800a3ee:	bf1e      	ittt	ne
 800a3f0:	2100      	movne	r1, #0
 800a3f2:	2000      	movne	r0, #0
 800a3f4:	bd30      	popne	{r4, r5, pc}
 800a3f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800a3fa:	d105      	bne.n	800a408 <__adddf3+0x230>
 800a3fc:	0040      	lsls	r0, r0, #1
 800a3fe:	4149      	adcs	r1, r1
 800a400:	bf28      	it	cs
 800a402:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800a406:	bd30      	pop	{r4, r5, pc}
 800a408:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800a40c:	bf3c      	itt	cc
 800a40e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800a412:	bd30      	popcc	{r4, r5, pc}
 800a414:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800a418:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800a41c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a420:	f04f 0000 	mov.w	r0, #0
 800a424:	bd30      	pop	{r4, r5, pc}
 800a426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800a42a:	bf1a      	itte	ne
 800a42c:	4619      	movne	r1, r3
 800a42e:	4610      	movne	r0, r2
 800a430:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800a434:	bf1c      	itt	ne
 800a436:	460b      	movne	r3, r1
 800a438:	4602      	movne	r2, r0
 800a43a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800a43e:	bf06      	itte	eq
 800a440:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800a444:	ea91 0f03 	teqeq	r1, r3
 800a448:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800a44c:	bd30      	pop	{r4, r5, pc}
 800a44e:	bf00      	nop

0800a450 <__aeabi_ui2d>:
 800a450:	f090 0f00 	teq	r0, #0
 800a454:	bf04      	itt	eq
 800a456:	2100      	moveq	r1, #0
 800a458:	4770      	bxeq	lr
 800a45a:	b530      	push	{r4, r5, lr}
 800a45c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800a460:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800a464:	f04f 0500 	mov.w	r5, #0
 800a468:	f04f 0100 	mov.w	r1, #0
 800a46c:	e750      	b.n	800a310 <__adddf3+0x138>
 800a46e:	bf00      	nop

0800a470 <__aeabi_i2d>:
 800a470:	f090 0f00 	teq	r0, #0
 800a474:	bf04      	itt	eq
 800a476:	2100      	moveq	r1, #0
 800a478:	4770      	bxeq	lr
 800a47a:	b530      	push	{r4, r5, lr}
 800a47c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800a480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800a484:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800a488:	bf48      	it	mi
 800a48a:	4240      	negmi	r0, r0
 800a48c:	f04f 0100 	mov.w	r1, #0
 800a490:	e73e      	b.n	800a310 <__adddf3+0x138>
 800a492:	bf00      	nop

0800a494 <__aeabi_f2d>:
 800a494:	0042      	lsls	r2, r0, #1
 800a496:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800a49a:	ea4f 0131 	mov.w	r1, r1, rrx
 800a49e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800a4a2:	bf1f      	itttt	ne
 800a4a4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800a4a8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800a4ac:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800a4b0:	4770      	bxne	lr
 800a4b2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800a4b6:	bf08      	it	eq
 800a4b8:	4770      	bxeq	lr
 800a4ba:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800a4be:	bf04      	itt	eq
 800a4c0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800a4c4:	4770      	bxeq	lr
 800a4c6:	b530      	push	{r4, r5, lr}
 800a4c8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800a4cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800a4d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800a4d4:	e71c      	b.n	800a310 <__adddf3+0x138>
 800a4d6:	bf00      	nop

0800a4d8 <__aeabi_ul2d>:
 800a4d8:	ea50 0201 	orrs.w	r2, r0, r1
 800a4dc:	bf08      	it	eq
 800a4de:	4770      	bxeq	lr
 800a4e0:	b530      	push	{r4, r5, lr}
 800a4e2:	f04f 0500 	mov.w	r5, #0
 800a4e6:	e00a      	b.n	800a4fe <__aeabi_l2d+0x16>

0800a4e8 <__aeabi_l2d>:
 800a4e8:	ea50 0201 	orrs.w	r2, r0, r1
 800a4ec:	bf08      	it	eq
 800a4ee:	4770      	bxeq	lr
 800a4f0:	b530      	push	{r4, r5, lr}
 800a4f2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800a4f6:	d502      	bpl.n	800a4fe <__aeabi_l2d+0x16>
 800a4f8:	4240      	negs	r0, r0
 800a4fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800a4fe:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800a502:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800a506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800a50a:	f43f aed8 	beq.w	800a2be <__adddf3+0xe6>
 800a50e:	f04f 0203 	mov.w	r2, #3
 800a512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800a516:	bf18      	it	ne
 800a518:	3203      	addne	r2, #3
 800a51a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800a51e:	bf18      	it	ne
 800a520:	3203      	addne	r2, #3
 800a522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800a526:	f1c2 0320 	rsb	r3, r2, #32
 800a52a:	fa00 fc03 	lsl.w	ip, r0, r3
 800a52e:	fa20 f002 	lsr.w	r0, r0, r2
 800a532:	fa01 fe03 	lsl.w	lr, r1, r3
 800a536:	ea40 000e 	orr.w	r0, r0, lr
 800a53a:	fa21 f102 	lsr.w	r1, r1, r2
 800a53e:	4414      	add	r4, r2
 800a540:	e6bd      	b.n	800a2be <__adddf3+0xe6>
 800a542:	bf00      	nop

0800a544 <__aeabi_d2uiz>:
 800a544:	004a      	lsls	r2, r1, #1
 800a546:	d211      	bcs.n	800a56c <__aeabi_d2uiz+0x28>
 800a548:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800a54c:	d211      	bcs.n	800a572 <__aeabi_d2uiz+0x2e>
 800a54e:	d50d      	bpl.n	800a56c <__aeabi_d2uiz+0x28>
 800a550:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800a554:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800a558:	d40e      	bmi.n	800a578 <__aeabi_d2uiz+0x34>
 800a55a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800a55e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a562:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800a566:	fa23 f002 	lsr.w	r0, r3, r2
 800a56a:	4770      	bx	lr
 800a56c:	f04f 0000 	mov.w	r0, #0
 800a570:	4770      	bx	lr
 800a572:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800a576:	d102      	bne.n	800a57e <__aeabi_d2uiz+0x3a>
 800a578:	f04f 30ff 	mov.w	r0, #4294967295
 800a57c:	4770      	bx	lr
 800a57e:	f04f 0000 	mov.w	r0, #0
 800a582:	4770      	bx	lr

0800a584 <__aeabi_uldivmod>:
 800a584:	b953      	cbnz	r3, 800a59c <__aeabi_uldivmod+0x18>
 800a586:	b94a      	cbnz	r2, 800a59c <__aeabi_uldivmod+0x18>
 800a588:	2900      	cmp	r1, #0
 800a58a:	bf08      	it	eq
 800a58c:	2800      	cmpeq	r0, #0
 800a58e:	bf1c      	itt	ne
 800a590:	f04f 31ff 	movne.w	r1, #4294967295
 800a594:	f04f 30ff 	movne.w	r0, #4294967295
 800a598:	f000 b96a 	b.w	800a870 <__aeabi_idiv0>
 800a59c:	f1ad 0c08 	sub.w	ip, sp, #8
 800a5a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800a5a4:	f000 f806 	bl	800a5b4 <__udivmoddi4>
 800a5a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a5ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5b0:	b004      	add	sp, #16
 800a5b2:	4770      	bx	lr

0800a5b4 <__udivmoddi4>:
 800a5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b8:	9d08      	ldr	r5, [sp, #32]
 800a5ba:	460c      	mov	r4, r1
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d14e      	bne.n	800a65e <__udivmoddi4+0xaa>
 800a5c0:	4694      	mov	ip, r2
 800a5c2:	458c      	cmp	ip, r1
 800a5c4:	4686      	mov	lr, r0
 800a5c6:	fab2 f282 	clz	r2, r2
 800a5ca:	d962      	bls.n	800a692 <__udivmoddi4+0xde>
 800a5cc:	b14a      	cbz	r2, 800a5e2 <__udivmoddi4+0x2e>
 800a5ce:	f1c2 0320 	rsb	r3, r2, #32
 800a5d2:	4091      	lsls	r1, r2
 800a5d4:	fa20 f303 	lsr.w	r3, r0, r3
 800a5d8:	fa0c fc02 	lsl.w	ip, ip, r2
 800a5dc:	4319      	orrs	r1, r3
 800a5de:	fa00 fe02 	lsl.w	lr, r0, r2
 800a5e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800a5e6:	fa1f f68c 	uxth.w	r6, ip
 800a5ea:	fbb1 f4f7 	udiv	r4, r1, r7
 800a5ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800a5f2:	fb07 1114 	mls	r1, r7, r4, r1
 800a5f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a5fa:	fb04 f106 	mul.w	r1, r4, r6
 800a5fe:	4299      	cmp	r1, r3
 800a600:	d90a      	bls.n	800a618 <__udivmoddi4+0x64>
 800a602:	eb1c 0303 	adds.w	r3, ip, r3
 800a606:	f104 30ff 	add.w	r0, r4, #4294967295
 800a60a:	f080 8112 	bcs.w	800a832 <__udivmoddi4+0x27e>
 800a60e:	4299      	cmp	r1, r3
 800a610:	f240 810f 	bls.w	800a832 <__udivmoddi4+0x27e>
 800a614:	3c02      	subs	r4, #2
 800a616:	4463      	add	r3, ip
 800a618:	1a59      	subs	r1, r3, r1
 800a61a:	fa1f f38e 	uxth.w	r3, lr
 800a61e:	fbb1 f0f7 	udiv	r0, r1, r7
 800a622:	fb07 1110 	mls	r1, r7, r0, r1
 800a626:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a62a:	fb00 f606 	mul.w	r6, r0, r6
 800a62e:	429e      	cmp	r6, r3
 800a630:	d90a      	bls.n	800a648 <__udivmoddi4+0x94>
 800a632:	eb1c 0303 	adds.w	r3, ip, r3
 800a636:	f100 31ff 	add.w	r1, r0, #4294967295
 800a63a:	f080 80fc 	bcs.w	800a836 <__udivmoddi4+0x282>
 800a63e:	429e      	cmp	r6, r3
 800a640:	f240 80f9 	bls.w	800a836 <__udivmoddi4+0x282>
 800a644:	4463      	add	r3, ip
 800a646:	3802      	subs	r0, #2
 800a648:	1b9b      	subs	r3, r3, r6
 800a64a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800a64e:	2100      	movs	r1, #0
 800a650:	b11d      	cbz	r5, 800a65a <__udivmoddi4+0xa6>
 800a652:	40d3      	lsrs	r3, r2
 800a654:	2200      	movs	r2, #0
 800a656:	e9c5 3200 	strd	r3, r2, [r5]
 800a65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a65e:	428b      	cmp	r3, r1
 800a660:	d905      	bls.n	800a66e <__udivmoddi4+0xba>
 800a662:	b10d      	cbz	r5, 800a668 <__udivmoddi4+0xb4>
 800a664:	e9c5 0100 	strd	r0, r1, [r5]
 800a668:	2100      	movs	r1, #0
 800a66a:	4608      	mov	r0, r1
 800a66c:	e7f5      	b.n	800a65a <__udivmoddi4+0xa6>
 800a66e:	fab3 f183 	clz	r1, r3
 800a672:	2900      	cmp	r1, #0
 800a674:	d146      	bne.n	800a704 <__udivmoddi4+0x150>
 800a676:	42a3      	cmp	r3, r4
 800a678:	d302      	bcc.n	800a680 <__udivmoddi4+0xcc>
 800a67a:	4290      	cmp	r0, r2
 800a67c:	f0c0 80f0 	bcc.w	800a860 <__udivmoddi4+0x2ac>
 800a680:	1a86      	subs	r6, r0, r2
 800a682:	eb64 0303 	sbc.w	r3, r4, r3
 800a686:	2001      	movs	r0, #1
 800a688:	2d00      	cmp	r5, #0
 800a68a:	d0e6      	beq.n	800a65a <__udivmoddi4+0xa6>
 800a68c:	e9c5 6300 	strd	r6, r3, [r5]
 800a690:	e7e3      	b.n	800a65a <__udivmoddi4+0xa6>
 800a692:	2a00      	cmp	r2, #0
 800a694:	f040 8090 	bne.w	800a7b8 <__udivmoddi4+0x204>
 800a698:	eba1 040c 	sub.w	r4, r1, ip
 800a69c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800a6a0:	fa1f f78c 	uxth.w	r7, ip
 800a6a4:	2101      	movs	r1, #1
 800a6a6:	fbb4 f6f8 	udiv	r6, r4, r8
 800a6aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800a6ae:	fb08 4416 	mls	r4, r8, r6, r4
 800a6b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a6b6:	fb07 f006 	mul.w	r0, r7, r6
 800a6ba:	4298      	cmp	r0, r3
 800a6bc:	d908      	bls.n	800a6d0 <__udivmoddi4+0x11c>
 800a6be:	eb1c 0303 	adds.w	r3, ip, r3
 800a6c2:	f106 34ff 	add.w	r4, r6, #4294967295
 800a6c6:	d202      	bcs.n	800a6ce <__udivmoddi4+0x11a>
 800a6c8:	4298      	cmp	r0, r3
 800a6ca:	f200 80cd 	bhi.w	800a868 <__udivmoddi4+0x2b4>
 800a6ce:	4626      	mov	r6, r4
 800a6d0:	1a1c      	subs	r4, r3, r0
 800a6d2:	fa1f f38e 	uxth.w	r3, lr
 800a6d6:	fbb4 f0f8 	udiv	r0, r4, r8
 800a6da:	fb08 4410 	mls	r4, r8, r0, r4
 800a6de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a6e2:	fb00 f707 	mul.w	r7, r0, r7
 800a6e6:	429f      	cmp	r7, r3
 800a6e8:	d908      	bls.n	800a6fc <__udivmoddi4+0x148>
 800a6ea:	eb1c 0303 	adds.w	r3, ip, r3
 800a6ee:	f100 34ff 	add.w	r4, r0, #4294967295
 800a6f2:	d202      	bcs.n	800a6fa <__udivmoddi4+0x146>
 800a6f4:	429f      	cmp	r7, r3
 800a6f6:	f200 80b0 	bhi.w	800a85a <__udivmoddi4+0x2a6>
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	1bdb      	subs	r3, r3, r7
 800a6fe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800a702:	e7a5      	b.n	800a650 <__udivmoddi4+0x9c>
 800a704:	f1c1 0620 	rsb	r6, r1, #32
 800a708:	408b      	lsls	r3, r1
 800a70a:	fa22 f706 	lsr.w	r7, r2, r6
 800a70e:	431f      	orrs	r7, r3
 800a710:	fa20 fc06 	lsr.w	ip, r0, r6
 800a714:	fa04 f301 	lsl.w	r3, r4, r1
 800a718:	ea43 030c 	orr.w	r3, r3, ip
 800a71c:	40f4      	lsrs	r4, r6
 800a71e:	fa00 f801 	lsl.w	r8, r0, r1
 800a722:	0c38      	lsrs	r0, r7, #16
 800a724:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800a728:	fbb4 fef0 	udiv	lr, r4, r0
 800a72c:	fa1f fc87 	uxth.w	ip, r7
 800a730:	fb00 441e 	mls	r4, r0, lr, r4
 800a734:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800a738:	fb0e f90c 	mul.w	r9, lr, ip
 800a73c:	45a1      	cmp	r9, r4
 800a73e:	fa02 f201 	lsl.w	r2, r2, r1
 800a742:	d90a      	bls.n	800a75a <__udivmoddi4+0x1a6>
 800a744:	193c      	adds	r4, r7, r4
 800a746:	f10e 3aff 	add.w	sl, lr, #4294967295
 800a74a:	f080 8084 	bcs.w	800a856 <__udivmoddi4+0x2a2>
 800a74e:	45a1      	cmp	r9, r4
 800a750:	f240 8081 	bls.w	800a856 <__udivmoddi4+0x2a2>
 800a754:	f1ae 0e02 	sub.w	lr, lr, #2
 800a758:	443c      	add	r4, r7
 800a75a:	eba4 0409 	sub.w	r4, r4, r9
 800a75e:	fa1f f983 	uxth.w	r9, r3
 800a762:	fbb4 f3f0 	udiv	r3, r4, r0
 800a766:	fb00 4413 	mls	r4, r0, r3, r4
 800a76a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800a76e:	fb03 fc0c 	mul.w	ip, r3, ip
 800a772:	45a4      	cmp	ip, r4
 800a774:	d907      	bls.n	800a786 <__udivmoddi4+0x1d2>
 800a776:	193c      	adds	r4, r7, r4
 800a778:	f103 30ff 	add.w	r0, r3, #4294967295
 800a77c:	d267      	bcs.n	800a84e <__udivmoddi4+0x29a>
 800a77e:	45a4      	cmp	ip, r4
 800a780:	d965      	bls.n	800a84e <__udivmoddi4+0x29a>
 800a782:	3b02      	subs	r3, #2
 800a784:	443c      	add	r4, r7
 800a786:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800a78a:	fba0 9302 	umull	r9, r3, r0, r2
 800a78e:	eba4 040c 	sub.w	r4, r4, ip
 800a792:	429c      	cmp	r4, r3
 800a794:	46ce      	mov	lr, r9
 800a796:	469c      	mov	ip, r3
 800a798:	d351      	bcc.n	800a83e <__udivmoddi4+0x28a>
 800a79a:	d04e      	beq.n	800a83a <__udivmoddi4+0x286>
 800a79c:	b155      	cbz	r5, 800a7b4 <__udivmoddi4+0x200>
 800a79e:	ebb8 030e 	subs.w	r3, r8, lr
 800a7a2:	eb64 040c 	sbc.w	r4, r4, ip
 800a7a6:	fa04 f606 	lsl.w	r6, r4, r6
 800a7aa:	40cb      	lsrs	r3, r1
 800a7ac:	431e      	orrs	r6, r3
 800a7ae:	40cc      	lsrs	r4, r1
 800a7b0:	e9c5 6400 	strd	r6, r4, [r5]
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	e750      	b.n	800a65a <__udivmoddi4+0xa6>
 800a7b8:	f1c2 0320 	rsb	r3, r2, #32
 800a7bc:	fa20 f103 	lsr.w	r1, r0, r3
 800a7c0:	fa0c fc02 	lsl.w	ip, ip, r2
 800a7c4:	fa24 f303 	lsr.w	r3, r4, r3
 800a7c8:	4094      	lsls	r4, r2
 800a7ca:	430c      	orrs	r4, r1
 800a7cc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800a7d0:	fa00 fe02 	lsl.w	lr, r0, r2
 800a7d4:	fa1f f78c 	uxth.w	r7, ip
 800a7d8:	fbb3 f0f8 	udiv	r0, r3, r8
 800a7dc:	fb08 3110 	mls	r1, r8, r0, r3
 800a7e0:	0c23      	lsrs	r3, r4, #16
 800a7e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a7e6:	fb00 f107 	mul.w	r1, r0, r7
 800a7ea:	4299      	cmp	r1, r3
 800a7ec:	d908      	bls.n	800a800 <__udivmoddi4+0x24c>
 800a7ee:	eb1c 0303 	adds.w	r3, ip, r3
 800a7f2:	f100 36ff 	add.w	r6, r0, #4294967295
 800a7f6:	d22c      	bcs.n	800a852 <__udivmoddi4+0x29e>
 800a7f8:	4299      	cmp	r1, r3
 800a7fa:	d92a      	bls.n	800a852 <__udivmoddi4+0x29e>
 800a7fc:	3802      	subs	r0, #2
 800a7fe:	4463      	add	r3, ip
 800a800:	1a5b      	subs	r3, r3, r1
 800a802:	b2a4      	uxth	r4, r4
 800a804:	fbb3 f1f8 	udiv	r1, r3, r8
 800a808:	fb08 3311 	mls	r3, r8, r1, r3
 800a80c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800a810:	fb01 f307 	mul.w	r3, r1, r7
 800a814:	42a3      	cmp	r3, r4
 800a816:	d908      	bls.n	800a82a <__udivmoddi4+0x276>
 800a818:	eb1c 0404 	adds.w	r4, ip, r4
 800a81c:	f101 36ff 	add.w	r6, r1, #4294967295
 800a820:	d213      	bcs.n	800a84a <__udivmoddi4+0x296>
 800a822:	42a3      	cmp	r3, r4
 800a824:	d911      	bls.n	800a84a <__udivmoddi4+0x296>
 800a826:	3902      	subs	r1, #2
 800a828:	4464      	add	r4, ip
 800a82a:	1ae4      	subs	r4, r4, r3
 800a82c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a830:	e739      	b.n	800a6a6 <__udivmoddi4+0xf2>
 800a832:	4604      	mov	r4, r0
 800a834:	e6f0      	b.n	800a618 <__udivmoddi4+0x64>
 800a836:	4608      	mov	r0, r1
 800a838:	e706      	b.n	800a648 <__udivmoddi4+0x94>
 800a83a:	45c8      	cmp	r8, r9
 800a83c:	d2ae      	bcs.n	800a79c <__udivmoddi4+0x1e8>
 800a83e:	ebb9 0e02 	subs.w	lr, r9, r2
 800a842:	eb63 0c07 	sbc.w	ip, r3, r7
 800a846:	3801      	subs	r0, #1
 800a848:	e7a8      	b.n	800a79c <__udivmoddi4+0x1e8>
 800a84a:	4631      	mov	r1, r6
 800a84c:	e7ed      	b.n	800a82a <__udivmoddi4+0x276>
 800a84e:	4603      	mov	r3, r0
 800a850:	e799      	b.n	800a786 <__udivmoddi4+0x1d2>
 800a852:	4630      	mov	r0, r6
 800a854:	e7d4      	b.n	800a800 <__udivmoddi4+0x24c>
 800a856:	46d6      	mov	lr, sl
 800a858:	e77f      	b.n	800a75a <__udivmoddi4+0x1a6>
 800a85a:	4463      	add	r3, ip
 800a85c:	3802      	subs	r0, #2
 800a85e:	e74d      	b.n	800a6fc <__udivmoddi4+0x148>
 800a860:	4606      	mov	r6, r0
 800a862:	4623      	mov	r3, r4
 800a864:	4608      	mov	r0, r1
 800a866:	e70f      	b.n	800a688 <__udivmoddi4+0xd4>
 800a868:	3e02      	subs	r6, #2
 800a86a:	4463      	add	r3, ip
 800a86c:	e730      	b.n	800a6d0 <__udivmoddi4+0x11c>
 800a86e:	bf00      	nop

0800a870 <__aeabi_idiv0>:
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop

0800a874 <get_page_by_address>:
#include <string.h>

static inline u32 get_page_base_address(u32 page) {
	return FLASH_BASE + (PAGESIZE * page);
}
static inline u32 get_page_by_address(u32 address) {
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
	return (address - FLASH_BASE) / PAGESIZE;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 800a882:	0adb      	lsrs	r3, r3, #11
}
 800a884:	4618      	mov	r0, r3
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <flash_erase_page>:

HAL_StatusTypeDef flash_erase_page(u32 base_page, u32 number) {
 800a890:	b580      	push	{r7, lr}
 800a892:	b088      	sub	sp, #32
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
	FLASH_EraseInitTypeDef erase;
	u32 page_err;
	HAL_StatusTypeDef res;

	erase.Banks = FLASH_BANK_1;
 800a89a:	2301      	movs	r3, #1
 800a89c:	613b      	str	r3, [r7, #16]
	erase.NbPages = number;
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	61bb      	str	r3, [r7, #24]
	erase.Page = base_page;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	617b      	str	r3, [r7, #20]
	erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	60fb      	str	r3, [r7, #12]

	HAL_FLASH_Unlock();
 800a8aa:	f001 fb09 	bl	800bec0 <HAL_FLASH_Unlock>
	res = HAL_FLASHEx_Erase(&erase, &page_err);
 800a8ae:	f107 0208 	add.w	r2, r7, #8
 800a8b2:	f107 030c 	add.w	r3, r7, #12
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f001 fbe5 	bl	800c088 <HAL_FLASHEx_Erase>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	77fb      	strb	r3, [r7, #31]
	if (res != HAL_OK) {
 800a8c2:	7ffb      	ldrb	r3, [r7, #31]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d003      	beq.n	800a8d0 <flash_erase_page+0x40>
		HAL_FLASH_Lock();
 800a8c8:	f001 fb1c 	bl	800bf04 <HAL_FLASH_Lock>
		return res;
 800a8cc:	7ffb      	ldrb	r3, [r7, #31]
 800a8ce:	e002      	b.n	800a8d6 <flash_erase_page+0x46>
	}
	HAL_FLASH_Lock();
 800a8d0:	f001 fb18 	bl	800bf04 <HAL_FLASH_Lock>
	return res;
 800a8d4:	7ffb      	ldrb	r3, [r7, #31]
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3720      	adds	r7, #32
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <flash_write_data>:

HAL_StatusTypeDef flash_write_data(u32 base_address, u32 offset, u8 *data, u16 length) {
 800a8de:	b590      	push	{r4, r7, lr}
 800a8e0:	f6ad 0d24 	subw	sp, sp, #2084	@ 0x824
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	f507 6402 	add.w	r4, r7, #2080	@ 0x820
 800a8ea:	f6a4 0414 	subw	r4, r4, #2068	@ 0x814
 800a8ee:	6020      	str	r0, [r4, #0]
 800a8f0:	f507 6002 	add.w	r0, r7, #2080	@ 0x820
 800a8f4:	f6a0 0018 	subw	r0, r0, #2072	@ 0x818
 800a8f8:	6001      	str	r1, [r0, #0]
 800a8fa:	f507 6102 	add.w	r1, r7, #2080	@ 0x820
 800a8fe:	f6a1 011c 	subw	r1, r1, #2076	@ 0x81c
 800a902:	600a      	str	r2, [r1, #0]
 800a904:	461a      	mov	r2, r3
 800a906:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800a90a:	f6a3 031e 	subw	r3, r3, #2078	@ 0x81e
 800a90e:	801a      	strh	r2, [r3, #0]
	u32 i, page_idx;
	HAL_StatusTypeDef res;
	u8 page_data[PAGESIZE];
	u64 *ptr = (u64 *)&page_data[0];
 800a910:	f107 0310 	add.w	r3, r7, #16
 800a914:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
	memset(page_data, 0, PAGESIZE);
 800a918:	f107 0310 	add.w	r3, r7, #16
 800a91c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a920:	2100      	movs	r1, #0
 800a922:	4618      	mov	r0, r3
 800a924:	f005 fa4a 	bl	800fdbc <memset>
	for (i = 0; i < PAGESIZE / 8; i++)
 800a928:	2300      	movs	r3, #0
 800a92a:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 800a92e:	e018      	b.n	800a962 <flash_write_data+0x84>
		ptr[i] = *(volatile u64*) (base_address + (8 * i));
 800a930:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800a934:	00da      	lsls	r2, r3, #3
 800a936:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800a93a:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4413      	add	r3, r2
 800a942:	4618      	mov	r0, r3
 800a944:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800a948:	00db      	lsls	r3, r3, #3
 800a94a:	f8d7 2814 	ldr.w	r2, [r7, #2068]	@ 0x814
 800a94e:	18d1      	adds	r1, r2, r3
 800a950:	e9d0 2300 	ldrd	r2, r3, [r0]
 800a954:	e9c1 2300 	strd	r2, r3, [r1]
	for (i = 0; i < PAGESIZE / 8; i++)
 800a958:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800a95c:	3301      	adds	r3, #1
 800a95e:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 800a962:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800a966:	2bff      	cmp	r3, #255	@ 0xff
 800a968:	d9e2      	bls.n	800a930 <flash_write_data+0x52>
	memcpy(&page_data[offset], data, length);
 800a96a:	f107 0210 	add.w	r2, r7, #16
 800a96e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800a972:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	18d0      	adds	r0, r2, r3
 800a97a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800a97e:	f6a3 031e 	subw	r3, r3, #2078	@ 0x81e
 800a982:	881a      	ldrh	r2, [r3, #0]
 800a984:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800a988:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800a98c:	6819      	ldr	r1, [r3, #0]
 800a98e:	f005 fa41 	bl	800fe14 <memcpy>
	page_idx = get_page_by_address(base_address);
 800a992:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800a996:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 800a99a:	6818      	ldr	r0, [r3, #0]
 800a99c:	f7ff ff6a 	bl	800a874 <get_page_by_address>
 800a9a0:	f8c7 0810 	str.w	r0, [r7, #2064]	@ 0x810
	while (flash_erase_page(page_idx, 1) != HAL_OK);
 800a9a4:	bf00      	nop
 800a9a6:	2101      	movs	r1, #1
 800a9a8:	f8d7 0810 	ldr.w	r0, [r7, #2064]	@ 0x810
 800a9ac:	f7ff ff70 	bl	800a890 <flash_erase_page>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d1f7      	bne.n	800a9a6 <flash_write_data+0xc8>
	HAL_FLASH_Unlock();
 800a9b6:	f001 fa83 	bl	800bec0 <HAL_FLASH_Unlock>
	for (i = 0; i < PAGESIZE / 8; i++) {
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 800a9c0:	e024      	b.n	800aa0c <flash_write_data+0x12e>
		res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, base_address + (8*i), ptr[i]);
 800a9c2:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800a9c6:	00da      	lsls	r2, r3, #3
 800a9c8:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800a9cc:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	18d1      	adds	r1, r2, r3
 800a9d4:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800a9d8:	00db      	lsls	r3, r3, #3
 800a9da:	f8d7 2814 	ldr.w	r2, [r7, #2068]	@ 0x814
 800a9de:	4413      	add	r3, r2
 800a9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	f001 f9ff 	bl	800bde8 <HAL_FLASH_Program>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	f887 381b 	strb.w	r3, [r7, #2075]	@ 0x81b
		if (res != HAL_OK) {
 800a9f0:	f897 381b 	ldrb.w	r3, [r7, #2075]	@ 0x81b
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d004      	beq.n	800aa02 <flash_write_data+0x124>
			HAL_FLASH_Lock();
 800a9f8:	f001 fa84 	bl	800bf04 <HAL_FLASH_Lock>
			return res;
 800a9fc:	f897 381b 	ldrb.w	r3, [r7, #2075]	@ 0x81b
 800aa00:	e00c      	b.n	800aa1c <flash_write_data+0x13e>
	for (i = 0; i < PAGESIZE / 8; i++) {
 800aa02:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800aa06:	3301      	adds	r3, #1
 800aa08:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 800aa0c:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800aa10:	2bff      	cmp	r3, #255	@ 0xff
 800aa12:	d9d6      	bls.n	800a9c2 <flash_write_data+0xe4>
		}
	}
	HAL_FLASH_Lock();
 800aa14:	f001 fa76 	bl	800bf04 <HAL_FLASH_Lock>
	return res;
 800aa18:	f897 381b 	ldrb.w	r3, [r7, #2075]	@ 0x81b
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f607 0724 	addw	r7, r7, #2084	@ 0x824
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd90      	pop	{r4, r7, pc}
	...

0800aa28 <set_pwm_led>:
#define MTYPE_IDX 3

#define FLAG_ADDR 		(FLASH_BASE + (PAGESIZE*64))
#define FLAG_PAGE		(FLAG_ADDR - FLASH_BASE)/PAGESIZE

static void set_pwm_led(struct foo_device *dev) {
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
	float dutycycle = 100 * (float)dev->led_current / (float)dev->max_led_current;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8b3 3029 	ldrh.w	r3, [r3, #41]	@ 0x29
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	ee07 3a90 	vmov	s15, r3
 800aa3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa40:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800aa78 <set_pwm_led+0x50>
 800aa44:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8b3 3027 	ldrh.w	r3, [r3, #39]	@ 0x27
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	ee07 3a90 	vmov	s15, r3
 800aa54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aa58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa5c:	edc7 7a03 	vstr	s15, [r7, #12]
	pwm_set_dutycycle(&dev->led, dutycycle);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	332b      	adds	r3, #43	@ 0x2b
 800aa64:	ed97 0a03 	vldr	s0, [r7, #12]
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f000 fd17 	bl	800b49c <pwm_set_dutycycle>
}
 800aa6e:	bf00      	nop
 800aa70:	3710      	adds	r7, #16
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	42c80000 	.word	0x42c80000

0800aa7c <set_serial_number>:

int set_serial_number(struct foo_device *dev, const u8 *ser_num, u8 len) {
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b08c      	sub	sp, #48	@ 0x30
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	4613      	mov	r3, r2
 800aa88:	71fb      	strb	r3, [r7, #7]
	u8 to_write;
	u8 buf[24];
	to_write = (len > 20) ? 20 : len;
 800aa8a:	79fb      	ldrb	r3, [r7, #7]
 800aa8c:	2b14      	cmp	r3, #20
 800aa8e:	bf28      	it	cs
 800aa90:	2314      	movcs	r3, #20
 800aa92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	memset(dev->serial_number.number, 0, sizeof(dev->serial_number));
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	330f      	adds	r3, #15
 800aa9a:	2218      	movs	r2, #24
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f005 f98c 	bl	800fdbc <memset>
	memcpy(dev->serial_number.number, ser_num, to_write);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	330f      	adds	r3, #15
 800aaa8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800aaac:	68b9      	ldr	r1, [r7, #8]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f005 f9b0 	bl	800fe14 <memcpy>
	dev->serial_number.len = to_write;
 800aab4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f8c3 2023 	str.w	r2, [r3, #35]	@ 0x23
	memcpy(buf, &dev->serial_number.len, 4);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	3323      	adds	r3, #35	@ 0x23
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	617b      	str	r3, [r7, #20]
	memcpy(&buf[4], dev->serial_number.number, 20);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f103 010f 	add.w	r1, r3, #15
 800aacc:	f107 0314 	add.w	r3, r7, #20
 800aad0:	3304      	adds	r3, #4
 800aad2:	2214      	movs	r2, #20
 800aad4:	4618      	mov	r0, r3
 800aad6:	f005 f99d 	bl	800fe14 <memcpy>

	if (flash_write_data(VAR_BASE_ADDRESS, 0, buf, SERIAL_NUMBER_MAX_LENGTH)
 800aada:	f107 0214 	add.w	r2, r7, #20
 800aade:	2318      	movs	r3, #24
 800aae0:	2100      	movs	r1, #0
 800aae2:	4807      	ldr	r0, [pc, #28]	@ (800ab00 <set_serial_number+0x84>)
 800aae4:	f7ff fefb 	bl	800a8de <flash_write_data>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d002      	beq.n	800aaf4 <set_serial_number+0x78>
			!= HAL_OK)
		return -1;
 800aaee:	f04f 33ff 	mov.w	r3, #4294967295
 800aaf2:	e000      	b.n	800aaf6 <set_serial_number+0x7a>
	return 0;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3730      	adds	r7, #48	@ 0x30
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	0803f800 	.word	0x0803f800

0800ab04 <get_serial_number>:

void get_serial_number(struct foo_device *dev) {
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b08a      	sub	sp, #40	@ 0x28
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
	int i;
	u64 bar[3];
	u8 *foo;
	for (i = 0; i < 3; i++)
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab10:	e011      	b.n	800ab36 <get_serial_number+0x32>
		bar[i] = *(volatile u64*) (VAR_BASE_ADDRESS + SERIAL_NUMBER_OFFSET
				+ (8 * i));
 800ab12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab14:	00db      	lsls	r3, r3, #3
 800ab16:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800ab1a:	f503 337e 	add.w	r3, r3, #260096	@ 0x3f800
		bar[i] = *(volatile u64*) (VAR_BASE_ADDRESS + SERIAL_NUMBER_OFFSET
 800ab1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ab24:	00c9      	lsls	r1, r1, #3
 800ab26:	3128      	adds	r1, #40	@ 0x28
 800ab28:	4439      	add	r1, r7
 800ab2a:	3920      	subs	r1, #32
 800ab2c:	e9c1 2300 	strd	r2, r3, [r1]
	for (i = 0; i < 3; i++)
 800ab30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab32:	3301      	adds	r3, #1
 800ab34:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	ddea      	ble.n	800ab12 <get_serial_number+0xe>
	foo = (u8*) bar;
 800ab3c:	f107 0308 	add.w	r3, r7, #8
 800ab40:	623b      	str	r3, [r7, #32]
	memcpy(&dev->serial_number.len, foo, 4);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	3323      	adds	r3, #35	@ 0x23
 800ab46:	6a3a      	ldr	r2, [r7, #32]
 800ab48:	6812      	ldr	r2, [r2, #0]
 800ab4a:	601a      	str	r2, [r3, #0]
	if (dev->serial_number.len > 20) {
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 3023 	ldr.w	r3, [r3, #35]	@ 0x23
 800ab52:	2b14      	cmp	r3, #20
 800ab54:	d916      	bls.n	800ab84 <get_serial_number+0x80>
		memcpy(dev->serial_number.number, (u8*) "ABCDE", 5);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	330f      	adds	r3, #15
 800ab5a:	2205      	movs	r2, #5
 800ab5c:	490f      	ldr	r1, [pc, #60]	@ (800ab9c <get_serial_number+0x98>)
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f005 f958 	bl	800fe14 <memcpy>
		dev->serial_number.len = 5;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f042 0205 	orr.w	r2, r2, #5
 800ab6c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 800ab70:	2200      	movs	r2, #0
 800ab72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800ab76:	2200      	movs	r2, #0
 800ab78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 800ab82:	e008      	b.n	800ab96 <get_serial_number+0x92>
		return;
	} else {
		memcpy(dev->serial_number.number, &foo[4], 20);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f103 000f 	add.w	r0, r3, #15
 800ab8a:	6a3b      	ldr	r3, [r7, #32]
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	2214      	movs	r2, #20
 800ab90:	4619      	mov	r1, r3
 800ab92:	f005 f93f 	bl	800fe14 <memcpy>
	}
}
 800ab96:	3728      	adds	r7, #40	@ 0x28
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	0800fed4 	.word	0x0800fed4

0800aba0 <responses>:

static void responses(struct foo_device *dev, u16 *start_frame, u8 *data,
		u32 len, u16 end) {
 800aba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aba4:	b089      	sub	sp, #36	@ 0x24
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	60f8      	str	r0, [r7, #12]
 800abaa:	60b9      	str	r1, [r7, #8]
 800abac:	607a      	str	r2, [r7, #4]
 800abae:	603b      	str	r3, [r7, #0]
 800abb0:	466b      	mov	r3, sp
 800abb2:	461e      	mov	r6, r3
	u16 size = 4 * sizeof(u16) + sizeof(u32) + len + sizeof(u16);
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	330e      	adds	r3, #14
 800abba:	83fb      	strh	r3, [r7, #30]
	u8 buff[size];
 800abbc:	8bf9      	ldrh	r1, [r7, #30]
 800abbe:	460b      	mov	r3, r1
 800abc0:	3b01      	subs	r3, #1
 800abc2:	61bb      	str	r3, [r7, #24]
 800abc4:	b28b      	uxth	r3, r1
 800abc6:	2200      	movs	r2, #0
 800abc8:	4698      	mov	r8, r3
 800abca:	4691      	mov	r9, r2
 800abcc:	f04f 0200 	mov.w	r2, #0
 800abd0:	f04f 0300 	mov.w	r3, #0
 800abd4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800abd8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800abdc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800abe0:	b28b      	uxth	r3, r1
 800abe2:	2200      	movs	r2, #0
 800abe4:	461c      	mov	r4, r3
 800abe6:	4615      	mov	r5, r2
 800abe8:	f04f 0200 	mov.w	r2, #0
 800abec:	f04f 0300 	mov.w	r3, #0
 800abf0:	00eb      	lsls	r3, r5, #3
 800abf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800abf6:	00e2      	lsls	r2, r4, #3
 800abf8:	460b      	mov	r3, r1
 800abfa:	3307      	adds	r3, #7
 800abfc:	08db      	lsrs	r3, r3, #3
 800abfe:	00db      	lsls	r3, r3, #3
 800ac00:	ebad 0d03 	sub.w	sp, sp, r3
 800ac04:	466b      	mov	r3, sp
 800ac06:	3300      	adds	r3, #0
 800ac08:	617b      	str	r3, [r7, #20]
	memset(buff, 0, size);
 800ac0a:	8bfb      	ldrh	r3, [r7, #30]
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	2100      	movs	r1, #0
 800ac10:	6978      	ldr	r0, [r7, #20]
 800ac12:	f005 f8d3 	bl	800fdbc <memset>
	memcpy(&buff[0], start_frame, 4 * sizeof(u16));
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	2208      	movs	r2, #8
 800ac1a:	68b9      	ldr	r1, [r7, #8]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f005 f8f9 	bl	800fe14 <memcpy>
	memcpy(&buff[8], &len, sizeof(u32));
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	3308      	adds	r3, #8
 800ac26:	683a      	ldr	r2, [r7, #0]
 800ac28:	601a      	str	r2, [r3, #0]
	memcpy(&buff[12], data, len);
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	330c      	adds	r3, #12
 800ac2e:	683a      	ldr	r2, [r7, #0]
 800ac30:	6879      	ldr	r1, [r7, #4]
 800ac32:	4618      	mov	r0, r3
 800ac34:	f005 f8ee 	bl	800fe14 <memcpy>
	memcpy(&buff[size - 2], &end, sizeof(end));
 800ac38:	8bfb      	ldrh	r3, [r7, #30]
 800ac3a:	3b02      	subs	r3, #2
 800ac3c:	697a      	ldr	r2, [r7, #20]
 800ac3e:	4413      	add	r3, r2
 800ac40:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800ac44:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(dev->bus, buff, size, 100);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6818      	ldr	r0, [r3, #0]
 800ac4a:	8bfa      	ldrh	r2, [r7, #30]
 800ac4c:	2364      	movs	r3, #100	@ 0x64
 800ac4e:	6979      	ldr	r1, [r7, #20]
 800ac50:	f003 fd74 	bl	800e73c <HAL_UART_Transmit>
 800ac54:	46b5      	mov	sp, r6
}
 800ac56:	bf00      	nop
 800ac58:	3724      	adds	r7, #36	@ 0x24
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ac60 <handle_request>:

//FAFB 1000 0000 2100 08000000 2122232425262728 FCFD
error_t handle_request(struct foo_device *dev, const u8 *frame) {
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b090      	sub	sp, #64	@ 0x40
 800ac64:	af02      	add	r7, sp, #8
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
	u16 start, pver, err, msgtype;
	u32 length;
	u8 *data_ptr = NULL;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	637b      	str	r3, [r7, #52]	@ 0x34

	memcpy(&start, &frame[0], sizeof(u16));
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	881b      	ldrh	r3, [r3, #0]
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	memcpy(&pver, &frame[2], sizeof(u16));
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	3302      	adds	r3, #2
 800ac7a:	881b      	ldrh	r3, [r3, #0]
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	857b      	strh	r3, [r7, #42]	@ 0x2a
	memcpy(&err, &frame[4], sizeof(u16));
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	3304      	adds	r3, #4
 800ac84:	881b      	ldrh	r3, [r3, #0]
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	853b      	strh	r3, [r7, #40]	@ 0x28
	memcpy(&msgtype, &frame[6], sizeof(u16));
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	3306      	adds	r3, #6
 800ac8e:	881b      	ldrh	r3, [r3, #0]
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	84fb      	strh	r3, [r7, #38]	@ 0x26
	memcpy(&length, &frame[8], sizeof(32));
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	3308      	adds	r3, #8
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	623b      	str	r3, [r7, #32]

	u16 start_frame[4];
	u16 end = 0xFDFC;
 800ac9c:	f64f 53fc 	movw	r3, #65020	@ 0xfdfc
 800aca0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	u32 len;

	start_frame[START_IDX] = 0xFBFA;
 800aca2:	f64f 33fa 	movw	r3, #64506	@ 0xfbfa
 800aca6:	833b      	strh	r3, [r7, #24]
	start_frame[PRVER_IDX] = dev->protocol_version;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	891b      	ldrh	r3, [r3, #8]
 800acac:	b29b      	uxth	r3, r3
 800acae:	837b      	strh	r3, [r7, #26]

	if (pver != dev->protocol_version)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	891b      	ldrh	r3, [r3, #8]
 800acb4:	b29a      	uxth	r2, r3
 800acb6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800acb8:	429a      	cmp	r2, r3
 800acba:	d002      	beq.n	800acc2 <handle_request+0x62>
		start_frame[ERRNO_IDX] = INVALID;
 800acbc:	2301      	movs	r3, #1
 800acbe:	83bb      	strh	r3, [r7, #28]
 800acc0:	e00a      	b.n	800acd8 <handle_request+0x78>
	else if (msgtype == SET_SER_NO && length > 20)
 800acc2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800acc4:	2b21      	cmp	r3, #33	@ 0x21
 800acc6:	d105      	bne.n	800acd4 <handle_request+0x74>
 800acc8:	6a3b      	ldr	r3, [r7, #32]
 800acca:	2b14      	cmp	r3, #20
 800accc:	d902      	bls.n	800acd4 <handle_request+0x74>
		start_frame[ERRNO_IDX] = MSG_LARGE;
 800acce:	2303      	movs	r3, #3
 800acd0:	83bb      	strh	r3, [r7, #28]
 800acd2:	e001      	b.n	800acd8 <handle_request+0x78>
	else
		start_frame[ERRNO_IDX] = OKAY;
 800acd4:	2300      	movs	r3, #0
 800acd6:	83bb      	strh	r3, [r7, #28]

	switch (msgtype) {
 800acd8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800acda:	f24a 0224 	movw	r2, #40996	@ 0xa024
 800acde:	4293      	cmp	r3, r2
 800ace0:	f000 80b4 	beq.w	800ae4c <handle_request+0x1ec>
 800ace4:	f24a 0224 	movw	r2, #40996	@ 0xa024
 800ace8:	4293      	cmp	r3, r2
 800acea:	f300 811d 	bgt.w	800af28 <handle_request+0x2c8>
 800acee:	f640 0209 	movw	r2, #2057	@ 0x809
 800acf2:	4293      	cmp	r3, r2
 800acf4:	f300 8118 	bgt.w	800af28 <handle_request+0x2c8>
 800acf8:	f640 0204 	movw	r2, #2052	@ 0x804
 800acfc:	4293      	cmp	r3, r2
 800acfe:	da0a      	bge.n	800ad16 <handle_request+0xb6>
 800ad00:	2b43      	cmp	r3, #67	@ 0x43
 800ad02:	f000 808d 	beq.w	800ae20 <handle_request+0x1c0>
 800ad06:	2b43      	cmp	r3, #67	@ 0x43
 800ad08:	f300 810e 	bgt.w	800af28 <handle_request+0x2c8>
 800ad0c:	2b21      	cmp	r3, #33	@ 0x21
 800ad0e:	dc5f      	bgt.n	800add0 <handle_request+0x170>
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	da15      	bge.n	800ad40 <handle_request+0xe0>
 800ad14:	e108      	b.n	800af28 <handle_request+0x2c8>
 800ad16:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 800ad1a:	2b05      	cmp	r3, #5
 800ad1c:	f200 8104 	bhi.w	800af28 <handle_request+0x2c8>
 800ad20:	a201      	add	r2, pc, #4	@ (adr r2, 800ad28 <handle_request+0xc8>)
 800ad22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad26:	bf00      	nop
 800ad28:	0800aebd 	.word	0x0800aebd
 800ad2c:	0800aee1 	.word	0x0800aee1
 800ad30:	0800af29 	.word	0x0800af29
 800ad34:	0800af29 	.word	0x0800af29
 800ad38:	0800aef3 	.word	0x0800aef3
 800ad3c:	0800af17 	.word	0x0800af17
 800ad40:	3b02      	subs	r3, #2
 800ad42:	2b1f      	cmp	r3, #31
 800ad44:	f200 80f0 	bhi.w	800af28 <handle_request+0x2c8>
 800ad48:	a201      	add	r2, pc, #4	@ (adr r2, 800ad50 <handle_request+0xf0>)
 800ad4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad4e:	bf00      	nop
 800ad50:	0800ae5f 	.word	0x0800ae5f
 800ad54:	0800af29 	.word	0x0800af29
 800ad58:	0800af29 	.word	0x0800af29
 800ad5c:	0800af29 	.word	0x0800af29
 800ad60:	0800af29 	.word	0x0800af29
 800ad64:	0800af29 	.word	0x0800af29
 800ad68:	0800af29 	.word	0x0800af29
 800ad6c:	0800af29 	.word	0x0800af29
 800ad70:	0800af29 	.word	0x0800af29
 800ad74:	0800af29 	.word	0x0800af29
 800ad78:	0800af29 	.word	0x0800af29
 800ad7c:	0800af29 	.word	0x0800af29
 800ad80:	0800af29 	.word	0x0800af29
 800ad84:	0800af29 	.word	0x0800af29
 800ad88:	0800add7 	.word	0x0800add7
 800ad8c:	0800ade7 	.word	0x0800ade7
 800ad90:	0800af29 	.word	0x0800af29
 800ad94:	0800af29 	.word	0x0800af29
 800ad98:	0800af29 	.word	0x0800af29
 800ad9c:	0800af29 	.word	0x0800af29
 800ada0:	0800af29 	.word	0x0800af29
 800ada4:	0800af29 	.word	0x0800af29
 800ada8:	0800af29 	.word	0x0800af29
 800adac:	0800af29 	.word	0x0800af29
 800adb0:	0800af29 	.word	0x0800af29
 800adb4:	0800af29 	.word	0x0800af29
 800adb8:	0800af29 	.word	0x0800af29
 800adbc:	0800af29 	.word	0x0800af29
 800adc0:	0800af29 	.word	0x0800af29
 800adc4:	0800af29 	.word	0x0800af29
 800adc8:	0800adf7 	.word	0x0800adf7
 800adcc:	0800ae2f 	.word	0x0800ae2f
 800add0:	2b42      	cmp	r3, #66	@ 0x42
 800add2:	d01d      	beq.n	800ae10 <handle_request+0x1b0>
 800add4:	e0a8      	b.n	800af28 <handle_request+0x2c8>
	case GET_HW_VERSION:
		start_frame[MTYPE_IDX] = GET_HW_VERSION;
 800add6:	2310      	movs	r3, #16
 800add8:	83fb      	strh	r3, [r7, #30]
		len = 2;
 800adda:	2302      	movs	r3, #2
 800addc:	633b      	str	r3, [r7, #48]	@ 0x30
		data_ptr = (u8*) &dev->hardware_version;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	3304      	adds	r3, #4
 800ade2:	637b      	str	r3, [r7, #52]	@ 0x34
		break;
 800ade4:	e0aa      	b.n	800af3c <handle_request+0x2dc>
	case GET_FW_VERSION:
		start_frame[MTYPE_IDX] = GET_FW_VERSION;
 800ade6:	2311      	movs	r3, #17
 800ade8:	83fb      	strh	r3, [r7, #30]
		len = 2;
 800adea:	2302      	movs	r3, #2
 800adec:	633b      	str	r3, [r7, #48]	@ 0x30
		data_ptr = (u8*) &dev->firmware_version;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	3306      	adds	r3, #6
 800adf2:	637b      	str	r3, [r7, #52]	@ 0x34
		break;
 800adf4:	e0a2      	b.n	800af3c <handle_request+0x2dc>
	case GET_SER_NO:
		start_frame[MTYPE_IDX] = GET_SER_NO;
 800adf6:	2320      	movs	r3, #32
 800adf8:	83fb      	strh	r3, [r7, #30]
		get_serial_number(dev);
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f7ff fe82 	bl	800ab04 <get_serial_number>
		len = dev->serial_number.len;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 3023 	ldr.w	r3, [r3, #35]	@ 0x23
 800ae06:	633b      	str	r3, [r7, #48]	@ 0x30
		data_ptr = &dev->serial_number.number[0];
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	330f      	adds	r3, #15
 800ae0c:	637b      	str	r3, [r7, #52]	@ 0x34
		break;
 800ae0e:	e095      	b.n	800af3c <handle_request+0x2dc>
	case GET_TRIGGER_BE:
		start_frame[MTYPE_IDX] = GET_TRIGGER_BE;
 800ae10:	2342      	movs	r3, #66	@ 0x42
 800ae12:	83fb      	strh	r3, [r7, #30]
		len = 1;
 800ae14:	2301      	movs	r3, #1
 800ae16:	633b      	str	r3, [r7, #48]	@ 0x30
		data_ptr = &dev->button_trigger;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	330a      	adds	r3, #10
 800ae1c:	637b      	str	r3, [r7, #52]	@ 0x34
		break;
 800ae1e:	e08d      	b.n	800af3c <handle_request+0x2dc>
	case SET_TRIGGER_BE:
		start_frame[MTYPE_IDX] = SET_TRIGGER_BE;
 800ae20:	2343      	movs	r3, #67	@ 0x43
 800ae22:	83fb      	strh	r3, [r7, #30]
		len = 0;
 800ae24:	2300      	movs	r3, #0
 800ae26:	633b      	str	r3, [r7, #48]	@ 0x30
		data_ptr = NULL;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	637b      	str	r3, [r7, #52]	@ 0x34
		break;
 800ae2c:	e086      	b.n	800af3c <handle_request+0x2dc>
	case SET_SER_NO:
		start_frame[MTYPE_IDX] = SET_SER_NO;
 800ae2e:	2321      	movs	r3, #33	@ 0x21
 800ae30:	83fb      	strh	r3, [r7, #30]
		set_serial_number(dev, &frame[12], length);
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	330c      	adds	r3, #12
 800ae36:	6a3a      	ldr	r2, [r7, #32]
 800ae38:	b2d2      	uxtb	r2, r2
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7ff fe1d 	bl	800aa7c <set_serial_number>
		len = 0;
 800ae42:	2300      	movs	r3, #0
 800ae44:	633b      	str	r3, [r7, #48]	@ 0x30
		data_ptr = NULL;
 800ae46:	2300      	movs	r3, #0
 800ae48:	637b      	str	r3, [r7, #52]	@ 0x34
		break;
 800ae4a:	e077      	b.n	800af3c <handle_request+0x2dc>
	case GET_WATTING_TIME_OFF:
		start_frame[MTYPE_IDX] = GET_WATTING_TIME_OFF;
 800ae4c:	f24a 0324 	movw	r3, #40996	@ 0xa024
 800ae50:	83fb      	strh	r3, [r7, #30]
		len = 4;
 800ae52:	2304      	movs	r3, #4
 800ae54:	633b      	str	r3, [r7, #48]	@ 0x30
		data_ptr = (u8*) &dev->watting_time_off;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	330b      	adds	r3, #11
 800ae5a:	637b      	str	r3, [r7, #52]	@ 0x34
		break;
 800ae5c:	e06e      	b.n	800af3c <handle_request+0x2dc>
	case SET_PREP_MODE:
		u64 flag = ON_UPDATE_FIRMWARE;
 800ae5e:	f04f 0212 	mov.w	r2, #18
 800ae62:	f04f 0300 	mov.w	r3, #0
 800ae66:	e9c7 2304 	strd	r2, r3, [r7, #16]
		u8 buf[2];
		memset(buf, 0, sizeof(buf));
 800ae6a:	f107 030c 	add.w	r3, r7, #12
 800ae6e:	2202      	movs	r2, #2
 800ae70:	2100      	movs	r1, #0
 800ae72:	4618      	mov	r0, r3
 800ae74:	f004 ffa2 	bl	800fdbc <memset>
		memcpy(buf, &frame[12], 2);
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	330c      	adds	r3, #12
 800ae7c:	881b      	ldrh	r3, [r3, #0]
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	81bb      	strh	r3, [r7, #12]
		start_frame[MTYPE_IDX] = SET_PREP_MODE;
 800ae82:	2302      	movs	r3, #2
 800ae84:	83fb      	strh	r3, [r7, #30]
		len = 0;
 800ae86:	2300      	movs	r3, #0
 800ae88:	633b      	str	r3, [r7, #48]	@ 0x30
		if (buf[0] == 1 && buf[1] == 5) {
 800ae8a:	7b3b      	ldrb	r3, [r7, #12]
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d154      	bne.n	800af3a <handle_request+0x2da>
 800ae90:	7b7b      	ldrb	r3, [r7, #13]
 800ae92:	2b05      	cmp	r3, #5
 800ae94:	d151      	bne.n	800af3a <handle_request+0x2da>
			flash_write_data(VAR_BASE_ADDRESS, FLAG_OFFSET, (u8*) &flag,
 800ae96:	f107 0210 	add.w	r2, r7, #16
 800ae9a:	2308      	movs	r3, #8
 800ae9c:	2118      	movs	r1, #24
 800ae9e:	482f      	ldr	r0, [pc, #188]	@ (800af5c <handle_request+0x2fc>)
 800aea0:	f7ff fd1d 	bl	800a8de <flash_write_data>
					sizeof(u64));
			responses(dev, start_frame, NULL, len, end);
 800aea4:	f107 0118 	add.w	r1, r7, #24
 800aea8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeae:	2200      	movs	r2, #0
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f7ff fe75 	bl	800aba0 <responses>
			HAL_NVIC_SystemReset();
 800aeb6:	f000 ff08 	bl	800bcca <HAL_NVIC_SystemReset>
		}
		break;
 800aeba:	e03e      	b.n	800af3a <handle_request+0x2da>
	case SET_LED_ELECTRIC_CURRENT:
		len = 0;
 800aebc:	2300      	movs	r3, #0
 800aebe:	633b      	str	r3, [r7, #48]	@ 0x30
		start_frame[MTYPE_IDX] = SET_LED_ELECTRIC_CURRENT;
 800aec0:	f640 0304 	movw	r3, #2052	@ 0x804
 800aec4:	83fb      	strh	r3, [r7, #30]
		memcpy(&dev->led_current, &frame[12], 2);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	3329      	adds	r3, #41	@ 0x29
 800aeca:	683a      	ldr	r2, [r7, #0]
 800aecc:	320c      	adds	r2, #12
 800aece:	8812      	ldrh	r2, [r2, #0]
 800aed0:	b292      	uxth	r2, r2
 800aed2:	801a      	strh	r2, [r3, #0]
		set_pwm_led(dev);
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f7ff fda7 	bl	800aa28 <set_pwm_led>
		data_ptr = NULL;
 800aeda:	2300      	movs	r3, #0
 800aedc:	637b      	str	r3, [r7, #52]	@ 0x34
		break;
 800aede:	e02d      	b.n	800af3c <handle_request+0x2dc>
	case GET_LED_ELECTRIC_CURRENT:
		start_frame[MTYPE_IDX] = GET_LED_ELECTRIC_CURRENT;
 800aee0:	f640 0305 	movw	r3, #2053	@ 0x805
 800aee4:	83fb      	strh	r3, [r7, #30]
		len = 2;
 800aee6:	2302      	movs	r3, #2
 800aee8:	633b      	str	r3, [r7, #48]	@ 0x30
		data_ptr = (u8*) &dev->led_current;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	3329      	adds	r3, #41	@ 0x29
 800aeee:	637b      	str	r3, [r7, #52]	@ 0x34
		break;
 800aef0:	e024      	b.n	800af3c <handle_request+0x2dc>
	case SET_LED_PR_MAX_ELECTRICT_CURRENT:
		len = 0;
 800aef2:	2300      	movs	r3, #0
 800aef4:	633b      	str	r3, [r7, #48]	@ 0x30
		start_frame[MTYPE_IDX] = SET_LED_PR_MAX_ELECTRICT_CURRENT;
 800aef6:	f640 0308 	movw	r3, #2056	@ 0x808
 800aefa:	83fb      	strh	r3, [r7, #30]
		memcpy(&dev->max_led_current, &frame[12], 2);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	3327      	adds	r3, #39	@ 0x27
 800af00:	683a      	ldr	r2, [r7, #0]
 800af02:	320c      	adds	r2, #12
 800af04:	8812      	ldrh	r2, [r2, #0]
 800af06:	b292      	uxth	r2, r2
 800af08:	801a      	strh	r2, [r3, #0]
		set_pwm_led(dev);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f7ff fd8c 	bl	800aa28 <set_pwm_led>
		data_ptr = NULL;
 800af10:	2300      	movs	r3, #0
 800af12:	637b      	str	r3, [r7, #52]	@ 0x34
		break;
 800af14:	e012      	b.n	800af3c <handle_request+0x2dc>
	case GET_LED_PR_MAX_ELECTRICT_CURRENT:
		start_frame[MTYPE_IDX] = GET_LED_PR_MAX_ELECTRICT_CURRENT;
 800af16:	f640 0309 	movw	r3, #2057	@ 0x809
 800af1a:	83fb      	strh	r3, [r7, #30]
		len = 2;
 800af1c:	2302      	movs	r3, #2
 800af1e:	633b      	str	r3, [r7, #48]	@ 0x30
		data_ptr = (u8 *) &dev->max_led_current;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	3327      	adds	r3, #39	@ 0x27
 800af24:	637b      	str	r3, [r7, #52]	@ 0x34
		break;
 800af26:	e009      	b.n	800af3c <handle_request+0x2dc>
	default:
		start_frame[MTYPE_IDX] = msgtype;
 800af28:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800af2a:	83fb      	strh	r3, [r7, #30]
		start_frame[ERRNO_IDX] = MSGTYPE_UKN;
 800af2c:	2302      	movs	r3, #2
 800af2e:	83bb      	strh	r3, [r7, #28]
		len = 0;
 800af30:	2300      	movs	r3, #0
 800af32:	633b      	str	r3, [r7, #48]	@ 0x30
		data_ptr = NULL;
 800af34:	2300      	movs	r3, #0
 800af36:	637b      	str	r3, [r7, #52]	@ 0x34
		break;
 800af38:	e000      	b.n	800af3c <handle_request+0x2dc>
		break;
 800af3a:	bf00      	nop
	}
	responses(dev, start_frame, data_ptr, len, end);
 800af3c:	f107 0118 	add.w	r1, r7, #24
 800af40:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f7ff fe29 	bl	800aba0 <responses>
	return start_frame[ERRNO_IDX];
 800af4e:	8bbb      	ldrh	r3, [r7, #28]
 800af50:	b2db      	uxtb	r3, r3
}
 800af52:	4618      	mov	r0, r3
 800af54:	3738      	adds	r7, #56	@ 0x38
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	0803f800 	.word	0x0803f800

0800af60 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	460b      	mov	r3, r1
 800af6a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1) {
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a05      	ldr	r2, [pc, #20]	@ (800af88 <HAL_UARTEx_RxEventCallback+0x28>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d102      	bne.n	800af7c <HAL_UARTEx_RxEventCallback+0x1c>
		flag = PENDING_RQ;
 800af76:	4b05      	ldr	r3, [pc, #20]	@ (800af8c <HAL_UARTEx_RxEventCallback+0x2c>)
 800af78:	2201      	movs	r2, #1
 800af7a:	701a      	strb	r2, [r3, #0]
	}
}
 800af7c:	bf00      	nop
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr
 800af88:	40013800 	.word	0x40013800
 800af8c:	2000097a 	.word	0x2000097a

0800af90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	SystemInit();
 800af94:	f000 fc76 	bl	800b884 <SystemInit>
	dev.bus = &huart1;
 800af98:	4b3d      	ldr	r3, [pc, #244]	@ (800b090 <main+0x100>)
 800af9a:	4a3e      	ldr	r2, [pc, #248]	@ (800b094 <main+0x104>)
 800af9c:	601a      	str	r2, [r3, #0]
	dev.button_trigger = 1;
 800af9e:	4b3c      	ldr	r3, [pc, #240]	@ (800b090 <main+0x100>)
 800afa0:	2201      	movs	r2, #1
 800afa2:	729a      	strb	r2, [r3, #10]
	dev.firmware_version = FW_VERSION;
 800afa4:	4b3a      	ldr	r3, [pc, #232]	@ (800b090 <main+0x100>)
 800afa6:	2212      	movs	r2, #18
 800afa8:	80da      	strh	r2, [r3, #6]
	dev.hardware_version = HW_VERSION;
 800afaa:	4b39      	ldr	r3, [pc, #228]	@ (800b090 <main+0x100>)
 800afac:	f240 72d2 	movw	r2, #2002	@ 0x7d2
 800afb0:	809a      	strh	r2, [r3, #4]
	dev.protocol_version = PROT_VER;
 800afb2:	4b37      	ldr	r3, [pc, #220]	@ (800b090 <main+0x100>)
 800afb4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800afb8:	811a      	strh	r2, [r3, #8]
	dev.watting_time_off = WAIT_TOFF;
 800afba:	4b35      	ldr	r3, [pc, #212]	@ (800b090 <main+0x100>)
 800afbc:	2200      	movs	r2, #0
 800afbe:	f062 023f 	orn	r2, r2, #63	@ 0x3f
 800afc2:	72da      	strb	r2, [r3, #11]
 800afc4:	2200      	movs	r2, #0
 800afc6:	f042 0227 	orr.w	r2, r2, #39	@ 0x27
 800afca:	731a      	strb	r2, [r3, #12]
 800afcc:	2200      	movs	r2, #0
 800afce:	f042 0209 	orr.w	r2, r2, #9
 800afd2:	735a      	strb	r2, [r3, #13]
 800afd4:	2200      	movs	r2, #0
 800afd6:	739a      	strb	r2, [r3, #14]
	dev.max_led_current = 1000;
 800afd8:	4b2d      	ldr	r3, [pc, #180]	@ (800b090 <main+0x100>)
 800afda:	2200      	movs	r2, #0
 800afdc:	f062 0217 	orn	r2, r2, #23
 800afe0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 800afe4:	2200      	movs	r2, #0
 800afe6:	f042 0203 	orr.w	r2, r2, #3
 800afea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	dev.led_current = 0;
 800afee:	4b28      	ldr	r3, [pc, #160]	@ (800b090 <main+0x100>)
 800aff0:	2200      	movs	r2, #0
 800aff2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 800aff6:	2200      	movs	r2, #0
 800aff8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

	get_serial_number(&dev);
 800affc:	4824      	ldr	r0, [pc, #144]	@ (800b090 <main+0x100>)
 800affe:	f7ff fd81 	bl	800ab04 <get_serial_number>
	memset(frame, 0, sizeof(frame));
 800b002:	f640 020e 	movw	r2, #2062	@ 0x80e
 800b006:	2100      	movs	r1, #0
 800b008:	4823      	ldr	r0, [pc, #140]	@ (800b098 <main+0x108>)
 800b00a:	f004 fed7 	bl	800fdbc <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b00e:	f000 fccc 	bl	800b9aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b012:	f000 f84f 	bl	800b0b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b016:	f000 f947 	bl	800b2a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800b01a:	f000 f915 	bl	800b248 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 800b01e:	f000 f89b 	bl	800b158 <MX_IWDG_Init>
  MX_TIM2_Init();
 800b022:	f000 f8b7 	bl	800b194 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800b026:	2201      	movs	r2, #1
 800b028:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b02c:	481b      	ldr	r0, [pc, #108]	@ (800b09c <main+0x10c>)
 800b02e:	f001 facb 	bl	800c5c8 <HAL_GPIO_WritePin>
	watchdog_set_timeout(&hiwdg, TIMEOUT_16_SEC);
 800b032:	2105      	movs	r1, #5
 800b034:	481a      	ldr	r0, [pc, #104]	@ (800b0a0 <main+0x110>)
 800b036:	f000 fc3b 	bl	800b8b0 <watchdog_set_timeout>
	pwm_init(&dev.led, &htim2, TIM_CHANNEL_1);
 800b03a:	2200      	movs	r2, #0
 800b03c:	4919      	ldr	r1, [pc, #100]	@ (800b0a4 <main+0x114>)
 800b03e:	481a      	ldr	r0, [pc, #104]	@ (800b0a8 <main+0x118>)
 800b040:	f000 f984 	bl	800b34c <pwm_init>
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, frame, sizeof(frame));
 800b044:	f640 020e 	movw	r2, #2062	@ 0x80e
 800b048:	4913      	ldr	r1, [pc, #76]	@ (800b098 <main+0x108>)
 800b04a:	4812      	ldr	r0, [pc, #72]	@ (800b094 <main+0x104>)
 800b04c:	f004 fe66 	bl	800fd1c <HAL_UARTEx_ReceiveToIdle_IT>

	pwm_set_frequency(&dev.led, 2000);
 800b050:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800b0ac <main+0x11c>
 800b054:	4814      	ldr	r0, [pc, #80]	@ (800b0a8 <main+0x118>)
 800b056:	f000 fa73 	bl	800b540 <pwm_set_frequency>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (flag == PENDING_RQ) {
 800b05a:	4b15      	ldr	r3, [pc, #84]	@ (800b0b0 <main+0x120>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d112      	bne.n	800b088 <main+0xf8>
			handle_request(&dev, frame);
 800b062:	490d      	ldr	r1, [pc, #52]	@ (800b098 <main+0x108>)
 800b064:	480a      	ldr	r0, [pc, #40]	@ (800b090 <main+0x100>)
 800b066:	f7ff fdfb 	bl	800ac60 <handle_request>
			flag = NO_RQ;
 800b06a:	4b11      	ldr	r3, [pc, #68]	@ (800b0b0 <main+0x120>)
 800b06c:	2200      	movs	r2, #0
 800b06e:	701a      	strb	r2, [r3, #0]
			memset(frame, 0, sizeof(frame));
 800b070:	f640 020e 	movw	r2, #2062	@ 0x80e
 800b074:	2100      	movs	r1, #0
 800b076:	4808      	ldr	r0, [pc, #32]	@ (800b098 <main+0x108>)
 800b078:	f004 fea0 	bl	800fdbc <memset>
			HAL_UARTEx_ReceiveToIdle_IT(&huart1, frame, sizeof(frame));
 800b07c:	f640 020e 	movw	r2, #2062	@ 0x80e
 800b080:	4905      	ldr	r1, [pc, #20]	@ (800b098 <main+0x108>)
 800b082:	4804      	ldr	r0, [pc, #16]	@ (800b094 <main+0x104>)
 800b084:	f004 fe4a 	bl	800fd1c <HAL_UARTEx_ReceiveToIdle_IT>
		}
		ping_to_watchdog(&hiwdg);
 800b088:	4805      	ldr	r0, [pc, #20]	@ (800b0a0 <main+0x110>)
 800b08a:	f000 fc59 	bl	800b940 <ping_to_watchdog>
		if (flag == PENDING_RQ) {
 800b08e:	e7e4      	b.n	800b05a <main+0xca>
 800b090:	2000012c 	.word	0x2000012c
 800b094:	200000a4 	.word	0x200000a4
 800b098:	2000016c 	.word	0x2000016c
 800b09c:	48000800 	.word	0x48000800
 800b0a0:	20000048 	.word	0x20000048
 800b0a4:	20000058 	.word	0x20000058
 800b0a8:	20000157 	.word	0x20000157
 800b0ac:	44fa0000 	.word	0x44fa0000
 800b0b0:	2000097a 	.word	0x2000097a

0800b0b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b096      	sub	sp, #88	@ 0x58
 800b0b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b0ba:	f107 0314 	add.w	r3, r7, #20
 800b0be:	2244      	movs	r2, #68	@ 0x44
 800b0c0:	2100      	movs	r1, #0
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f004 fe7a 	bl	800fdbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b0c8:	463b      	mov	r3, r7
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	601a      	str	r2, [r3, #0]
 800b0ce:	605a      	str	r2, [r3, #4]
 800b0d0:	609a      	str	r2, [r3, #8]
 800b0d2:	60da      	str	r2, [r3, #12]
 800b0d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800b0d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b0da:	f001 fafd 	bl	800c6d8 <HAL_PWREx_ControlVoltageScaling>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d001      	beq.n	800b0e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800b0e4:	f000 f92c 	bl	800b340 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800b0e8:	2309      	movs	r3, #9
 800b0ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b0ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800b0f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b0f6:	2302      	movs	r3, #2
 800b0f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800b0fe:	2301      	movs	r3, #1
 800b100:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800b102:	2314      	movs	r3, #20
 800b104:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800b106:	2307      	movs	r3, #7
 800b108:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800b10a:	2302      	movs	r3, #2
 800b10c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800b10e:	2302      	movs	r3, #2
 800b110:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b112:	f107 0314 	add.w	r3, r7, #20
 800b116:	4618      	mov	r0, r3
 800b118:	f001 fb34 	bl	800c784 <HAL_RCC_OscConfig>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d001      	beq.n	800b126 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800b122:	f000 f90d 	bl	800b340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b126:	230f      	movs	r3, #15
 800b128:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b12a:	2303      	movs	r3, #3
 800b12c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b12e:	2300      	movs	r3, #0
 800b130:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b132:	2300      	movs	r3, #0
 800b134:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b136:	2300      	movs	r3, #0
 800b138:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800b13a:	463b      	mov	r3, r7
 800b13c:	2104      	movs	r1, #4
 800b13e:	4618      	mov	r0, r3
 800b140:	f001 ff34 	bl	800cfac <HAL_RCC_ClockConfig>
 800b144:	4603      	mov	r3, r0
 800b146:	2b00      	cmp	r3, #0
 800b148:	d001      	beq.n	800b14e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800b14a:	f000 f8f9 	bl	800b340 <Error_Handler>
  }
}
 800b14e:	bf00      	nop
 800b150:	3758      	adds	r7, #88	@ 0x58
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
	...

0800b158 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800b15c:	4b0b      	ldr	r3, [pc, #44]	@ (800b18c <MX_IWDG_Init+0x34>)
 800b15e:	4a0c      	ldr	r2, [pc, #48]	@ (800b190 <MX_IWDG_Init+0x38>)
 800b160:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800b162:	4b0a      	ldr	r3, [pc, #40]	@ (800b18c <MX_IWDG_Init+0x34>)
 800b164:	2206      	movs	r2, #6
 800b166:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800b168:	4b08      	ldr	r3, [pc, #32]	@ (800b18c <MX_IWDG_Init+0x34>)
 800b16a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800b16e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 800b170:	4b06      	ldr	r3, [pc, #24]	@ (800b18c <MX_IWDG_Init+0x34>)
 800b172:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800b176:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800b178:	4804      	ldr	r0, [pc, #16]	@ (800b18c <MX_IWDG_Init+0x34>)
 800b17a:	f001 fa3d 	bl	800c5f8 <HAL_IWDG_Init>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d001      	beq.n	800b188 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800b184:	f000 f8dc 	bl	800b340 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800b188:	bf00      	nop
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	20000048 	.word	0x20000048
 800b190:	40003000 	.word	0x40003000

0800b194 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b08a      	sub	sp, #40	@ 0x28
 800b198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b19a:	f107 031c 	add.w	r3, r7, #28
 800b19e:	2200      	movs	r2, #0
 800b1a0:	601a      	str	r2, [r3, #0]
 800b1a2:	605a      	str	r2, [r3, #4]
 800b1a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b1a6:	463b      	mov	r3, r7
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	601a      	str	r2, [r3, #0]
 800b1ac:	605a      	str	r2, [r3, #4]
 800b1ae:	609a      	str	r2, [r3, #8]
 800b1b0:	60da      	str	r2, [r3, #12]
 800b1b2:	611a      	str	r2, [r3, #16]
 800b1b4:	615a      	str	r2, [r3, #20]
 800b1b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b1b8:	4b22      	ldr	r3, [pc, #136]	@ (800b244 <MX_TIM2_Init+0xb0>)
 800b1ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800b1be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800b1c0:	4b20      	ldr	r3, [pc, #128]	@ (800b244 <MX_TIM2_Init+0xb0>)
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b1c6:	4b1f      	ldr	r3, [pc, #124]	@ (800b244 <MX_TIM2_Init+0xb0>)
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800b1cc:	4b1d      	ldr	r3, [pc, #116]	@ (800b244 <MX_TIM2_Init+0xb0>)
 800b1ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800b1d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b1d4:	4b1b      	ldr	r3, [pc, #108]	@ (800b244 <MX_TIM2_Init+0xb0>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b1da:	4b1a      	ldr	r3, [pc, #104]	@ (800b244 <MX_TIM2_Init+0xb0>)
 800b1dc:	2200      	movs	r2, #0
 800b1de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800b1e0:	4818      	ldr	r0, [pc, #96]	@ (800b244 <MX_TIM2_Init+0xb0>)
 800b1e2:	f002 fc11 	bl	800da08 <HAL_TIM_PWM_Init>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d001      	beq.n	800b1f0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800b1ec:	f000 f8a8 	bl	800b340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b1f8:	f107 031c 	add.w	r3, r7, #28
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	4811      	ldr	r0, [pc, #68]	@ (800b244 <MX_TIM2_Init+0xb0>)
 800b200:	f003 f9e8 	bl	800e5d4 <HAL_TIMEx_MasterConfigSynchronization>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d001      	beq.n	800b20e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800b20a:	f000 f899 	bl	800b340 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b20e:	2360      	movs	r3, #96	@ 0x60
 800b210:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800b212:	2300      	movs	r3, #0
 800b214:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b216:	2300      	movs	r3, #0
 800b218:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b21a:	2300      	movs	r3, #0
 800b21c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b21e:	463b      	mov	r3, r7
 800b220:	2200      	movs	r2, #0
 800b222:	4619      	mov	r1, r3
 800b224:	4807      	ldr	r0, [pc, #28]	@ (800b244 <MX_TIM2_Init+0xb0>)
 800b226:	f002 fdad 	bl	800dd84 <HAL_TIM_PWM_ConfigChannel>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d001      	beq.n	800b234 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800b230:	f000 f886 	bl	800b340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800b234:	4803      	ldr	r0, [pc, #12]	@ (800b244 <MX_TIM2_Init+0xb0>)
 800b236:	f000 fa57 	bl	800b6e8 <HAL_TIM_MspPostInit>

}
 800b23a:	bf00      	nop
 800b23c:	3728      	adds	r7, #40	@ 0x28
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	20000058 	.word	0x20000058

0800b248 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b24c:	4b14      	ldr	r3, [pc, #80]	@ (800b2a0 <MX_USART1_UART_Init+0x58>)
 800b24e:	4a15      	ldr	r2, [pc, #84]	@ (800b2a4 <MX_USART1_UART_Init+0x5c>)
 800b250:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b252:	4b13      	ldr	r3, [pc, #76]	@ (800b2a0 <MX_USART1_UART_Init+0x58>)
 800b254:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800b258:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b25a:	4b11      	ldr	r3, [pc, #68]	@ (800b2a0 <MX_USART1_UART_Init+0x58>)
 800b25c:	2200      	movs	r2, #0
 800b25e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b260:	4b0f      	ldr	r3, [pc, #60]	@ (800b2a0 <MX_USART1_UART_Init+0x58>)
 800b262:	2200      	movs	r2, #0
 800b264:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b266:	4b0e      	ldr	r3, [pc, #56]	@ (800b2a0 <MX_USART1_UART_Init+0x58>)
 800b268:	2200      	movs	r2, #0
 800b26a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b26c:	4b0c      	ldr	r3, [pc, #48]	@ (800b2a0 <MX_USART1_UART_Init+0x58>)
 800b26e:	220c      	movs	r2, #12
 800b270:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b272:	4b0b      	ldr	r3, [pc, #44]	@ (800b2a0 <MX_USART1_UART_Init+0x58>)
 800b274:	2200      	movs	r2, #0
 800b276:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b278:	4b09      	ldr	r3, [pc, #36]	@ (800b2a0 <MX_USART1_UART_Init+0x58>)
 800b27a:	2200      	movs	r2, #0
 800b27c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b27e:	4b08      	ldr	r3, [pc, #32]	@ (800b2a0 <MX_USART1_UART_Init+0x58>)
 800b280:	2200      	movs	r2, #0
 800b282:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b284:	4b06      	ldr	r3, [pc, #24]	@ (800b2a0 <MX_USART1_UART_Init+0x58>)
 800b286:	2200      	movs	r2, #0
 800b288:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b28a:	4805      	ldr	r0, [pc, #20]	@ (800b2a0 <MX_USART1_UART_Init+0x58>)
 800b28c:	f003 fa08 	bl	800e6a0 <HAL_UART_Init>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d001      	beq.n	800b29a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800b296:	f000 f853 	bl	800b340 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b29a:	bf00      	nop
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	200000a4 	.word	0x200000a4
 800b2a4:	40013800 	.word	0x40013800

0800b2a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b088      	sub	sp, #32
 800b2ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b2ae:	f107 030c 	add.w	r3, r7, #12
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	601a      	str	r2, [r3, #0]
 800b2b6:	605a      	str	r2, [r3, #4]
 800b2b8:	609a      	str	r2, [r3, #8]
 800b2ba:	60da      	str	r2, [r3, #12]
 800b2bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b2be:	4b1e      	ldr	r3, [pc, #120]	@ (800b338 <MX_GPIO_Init+0x90>)
 800b2c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2c2:	4a1d      	ldr	r2, [pc, #116]	@ (800b338 <MX_GPIO_Init+0x90>)
 800b2c4:	f043 0304 	orr.w	r3, r3, #4
 800b2c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b2ca:	4b1b      	ldr	r3, [pc, #108]	@ (800b338 <MX_GPIO_Init+0x90>)
 800b2cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2ce:	f003 0304 	and.w	r3, r3, #4
 800b2d2:	60bb      	str	r3, [r7, #8]
 800b2d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b2d6:	4b18      	ldr	r3, [pc, #96]	@ (800b338 <MX_GPIO_Init+0x90>)
 800b2d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2da:	4a17      	ldr	r2, [pc, #92]	@ (800b338 <MX_GPIO_Init+0x90>)
 800b2dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b2e2:	4b15      	ldr	r3, [pc, #84]	@ (800b338 <MX_GPIO_Init+0x90>)
 800b2e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2ea:	607b      	str	r3, [r7, #4]
 800b2ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2ee:	4b12      	ldr	r3, [pc, #72]	@ (800b338 <MX_GPIO_Init+0x90>)
 800b2f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2f2:	4a11      	ldr	r2, [pc, #68]	@ (800b338 <MX_GPIO_Init+0x90>)
 800b2f4:	f043 0301 	orr.w	r3, r3, #1
 800b2f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b2fa:	4b0f      	ldr	r3, [pc, #60]	@ (800b338 <MX_GPIO_Init+0x90>)
 800b2fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2fe:	f003 0301 	and.w	r3, r3, #1
 800b302:	603b      	str	r3, [r7, #0]
 800b304:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800b306:	2200      	movs	r2, #0
 800b308:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b30c:	480b      	ldr	r0, [pc, #44]	@ (800b33c <MX_GPIO_Init+0x94>)
 800b30e:	f001 f95b 	bl	800c5c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800b312:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b316:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b318:	2301      	movs	r3, #1
 800b31a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b31c:	2300      	movs	r3, #0
 800b31e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b320:	2300      	movs	r3, #0
 800b322:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b324:	f107 030c 	add.w	r3, r7, #12
 800b328:	4619      	mov	r1, r3
 800b32a:	4804      	ldr	r0, [pc, #16]	@ (800b33c <MX_GPIO_Init+0x94>)
 800b32c:	f000 ffd2 	bl	800c2d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800b330:	bf00      	nop
 800b332:	3720      	adds	r7, #32
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	40021000 	.word	0x40021000
 800b33c:	48000800 	.word	0x48000800

0800b340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b340:	b480      	push	{r7}
 800b342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b344:	b672      	cpsid	i
}
 800b346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800b348:	bf00      	nop
 800b34a:	e7fd      	b.n	800b348 <Error_Handler+0x8>

0800b34c <pwm_init>:
 *      Author: Admin
 */
#include "pwm.h"
#include <math.h>

HAL_StatusTypeDef pwm_init(struct pwm_device *pwm, TIM_HandleTypeDef *tm, u8 channel) {
 800b34c:	b480      	push	{r7}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	4613      	mov	r3, r2
 800b358:	71fb      	strb	r3, [r7, #7]
	if (!pwm || !tm)
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d002      	beq.n	800b366 <pwm_init+0x1a>
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d101      	bne.n	800b36a <pwm_init+0x1e>
		return HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	e091      	b.n	800b48e <pwm_init+0x142>
	pwm->timer = tm;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	611a      	str	r2, [r3, #16]
	pwm->channel = channel;
 800b370:	79fa      	ldrb	r2, [r7, #7]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	601a      	str	r2, [r3, #0]
	pwm->period = tm->Instance->ARR;
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b37c:	ee07 3a90 	vmov	s15, r3
 800b380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	ee17 2a90 	vmov	r2, s15
 800b38a:	609a      	str	r2, [r3, #8]
	pwm->prescaler = tm->Instance->PSC;
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	605a      	str	r2, [r3, #4]

	switch (channel) {
 800b396:	79fb      	ldrb	r3, [r7, #7]
 800b398:	2b14      	cmp	r3, #20
 800b39a:	d875      	bhi.n	800b488 <pwm_init+0x13c>
 800b39c:	a201      	add	r2, pc, #4	@ (adr r2, 800b3a4 <pwm_init+0x58>)
 800b39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a2:	bf00      	nop
 800b3a4:	0800b3f9 	.word	0x0800b3f9
 800b3a8:	0800b489 	.word	0x0800b489
 800b3ac:	0800b489 	.word	0x0800b489
 800b3b0:	0800b489 	.word	0x0800b489
 800b3b4:	0800b411 	.word	0x0800b411
 800b3b8:	0800b489 	.word	0x0800b489
 800b3bc:	0800b489 	.word	0x0800b489
 800b3c0:	0800b489 	.word	0x0800b489
 800b3c4:	0800b429 	.word	0x0800b429
 800b3c8:	0800b489 	.word	0x0800b489
 800b3cc:	0800b489 	.word	0x0800b489
 800b3d0:	0800b489 	.word	0x0800b489
 800b3d4:	0800b441 	.word	0x0800b441
 800b3d8:	0800b489 	.word	0x0800b489
 800b3dc:	0800b489 	.word	0x0800b489
 800b3e0:	0800b489 	.word	0x0800b489
 800b3e4:	0800b459 	.word	0x0800b459
 800b3e8:	0800b489 	.word	0x0800b489
 800b3ec:	0800b489 	.word	0x0800b489
 800b3f0:	0800b489 	.word	0x0800b489
 800b3f4:	0800b471 	.word	0x0800b471
		case TIM_CHANNEL_1:
			pwm->dutycycle = tm->Instance->CCR1;
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3fe:	ee07 3a90 	vmov	s15, r3
 800b402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	ee17 2a90 	vmov	r2, s15
 800b40c:	60da      	str	r2, [r3, #12]
			break;
 800b40e:	e03d      	b.n	800b48c <pwm_init+0x140>
		case TIM_CHANNEL_2:
			pwm->dutycycle = tm->Instance->CCR2;
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b416:	ee07 3a90 	vmov	s15, r3
 800b41a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	ee17 2a90 	vmov	r2, s15
 800b424:	60da      	str	r2, [r3, #12]
			break;
 800b426:	e031      	b.n	800b48c <pwm_init+0x140>
		case TIM_CHANNEL_3:
			pwm->dutycycle = tm->Instance->CCR3;
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b42e:	ee07 3a90 	vmov	s15, r3
 800b432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	ee17 2a90 	vmov	r2, s15
 800b43c:	60da      	str	r2, [r3, #12]
			break;
 800b43e:	e025      	b.n	800b48c <pwm_init+0x140>
		case TIM_CHANNEL_4:
			pwm->dutycycle = tm->Instance->CCR4;
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b446:	ee07 3a90 	vmov	s15, r3
 800b44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	ee17 2a90 	vmov	r2, s15
 800b454:	60da      	str	r2, [r3, #12]
			break;
 800b456:	e019      	b.n	800b48c <pwm_init+0x140>
		case TIM_CHANNEL_5:
			pwm->dutycycle = tm->Instance->CCR5;
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b45e:	ee07 3a90 	vmov	s15, r3
 800b462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	ee17 2a90 	vmov	r2, s15
 800b46c:	60da      	str	r2, [r3, #12]
			break;
 800b46e:	e00d      	b.n	800b48c <pwm_init+0x140>
		case TIM_CHANNEL_6:
			pwm->dutycycle = tm->Instance->CCR6;
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b476:	ee07 3a90 	vmov	s15, r3
 800b47a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	ee17 2a90 	vmov	r2, s15
 800b484:	60da      	str	r2, [r3, #12]
			break;
 800b486:	e001      	b.n	800b48c <pwm_init+0x140>
		default:
			return HAL_ERROR;
 800b488:	2301      	movs	r3, #1
 800b48a:	e000      	b.n	800b48e <pwm_init+0x142>
	}

	return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3714      	adds	r7, #20
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop

0800b49c <pwm_set_dutycycle>:

void pwm_set_dutycycle(struct pwm_device *pwm, float dutycycle) {
 800b49c:	b590      	push	{r4, r7, lr}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	ed87 0a00 	vstr	s0, [r7]
	HAL_TIM_PWM_Stop(pwm->timer, pwm->channel);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	691a      	ldr	r2, [r3, #16]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	4610      	mov	r0, r2
 800b4b4:	f002 fbde 	bl	800dc74 <HAL_TIM_PWM_Stop>
	if (dutycycle > 100)
 800b4b8:	edd7 7a00 	vldr	s15, [r7]
 800b4bc:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800b538 <pwm_set_dutycycle+0x9c>
 800b4c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4c8:	dd01      	ble.n	800b4ce <pwm_set_dutycycle+0x32>
		dutycycle = 100;
 800b4ca:	4b1c      	ldr	r3, [pc, #112]	@ (800b53c <pwm_set_dutycycle+0xa0>)
 800b4cc:	603b      	str	r3, [r7, #0]
	pwm->dutycycle = pwm->period * dutycycle / 100;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	edd7 7a00 	vldr	s15, [r7]
 800b4d6:	ee07 3a10 	vmov	s14, r3
 800b4da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4de:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800b538 <pwm_set_dutycycle+0x9c>
 800b4e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	ee16 2a90 	vmov	r2, s13
 800b4ec:	60da      	str	r2, [r3, #12]
	pwm->timer->Instance->CCR1 = round(pwm->dutycycle);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7fe ffce 	bl	800a494 <__aeabi_f2d>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	ec43 2b10 	vmov	d0, r2, r3
 800b500:	f004 fc96 	bl	800fe30 <round>
 800b504:	ec51 0b10 	vmov	r0, r1, d0
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	691b      	ldr	r3, [r3, #16]
 800b50c:	681c      	ldr	r4, [r3, #0]
 800b50e:	f7ff f819 	bl	800a544 <__aeabi_d2uiz>
 800b512:	4603      	mov	r3, r0
 800b514:	6363      	str	r3, [r4, #52]	@ 0x34
	pwm->timer->Instance->CNT = 0;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	691b      	ldr	r3, [r3, #16]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2200      	movs	r2, #0
 800b51e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_PWM_Start(pwm->timer, pwm->channel);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	691a      	ldr	r2, [r3, #16]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4619      	mov	r1, r3
 800b52a:	4610      	mov	r0, r2
 800b52c:	f002 fac4 	bl	800dab8 <HAL_TIM_PWM_Start>
}
 800b530:	bf00      	nop
 800b532:	370c      	adds	r7, #12
 800b534:	46bd      	mov	sp, r7
 800b536:	bd90      	pop	{r4, r7, pc}
 800b538:	42c80000 	.word	0x42c80000
 800b53c:	42c80000 	.word	0x42c80000

0800b540 <pwm_set_frequency>:

HAL_StatusTypeDef pwm_set_frequency(struct pwm_device *pwm, float frequency) {
 800b540:	b590      	push	{r4, r7, lr}
 800b542:	b087      	sub	sp, #28
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	ed87 0a00 	vstr	s0, [r7]
	HAL_StatusTypeDef res;
	float timer_frequency;
	TIM_TypeDef *Instance = pwm->timer->Instance;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	691b      	ldr	r3, [r3, #16]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	613b      	str	r3, [r7, #16]
	if (Instance == TIM2 || Instance == TIM6 || Instance == TIM7)
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b55a:	d007      	beq.n	800b56c <pwm_set_frequency+0x2c>
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	4a3b      	ldr	r2, [pc, #236]	@ (800b64c <pwm_set_frequency+0x10c>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d003      	beq.n	800b56c <pwm_set_frequency+0x2c>
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	4a3a      	ldr	r2, [pc, #232]	@ (800b650 <pwm_set_frequency+0x110>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d108      	bne.n	800b57e <pwm_set_frequency+0x3e>
			timer_frequency = (float) HAL_RCC_GetPCLK1Freq();
 800b56c:	f001 feb6 	bl	800d2dc <HAL_RCC_GetPCLK1Freq>
 800b570:	ee07 0a90 	vmov	s15, r0
 800b574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b578:	edc7 7a05 	vstr	s15, [r7, #20]
 800b57c:	e01c      	b.n	800b5b8 <pwm_set_frequency+0x78>
	else if (Instance == TIM1 || Instance == TIM15 || Instance == TIM16)
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	4a34      	ldr	r2, [pc, #208]	@ (800b654 <pwm_set_frequency+0x114>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d007      	beq.n	800b596 <pwm_set_frequency+0x56>
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	4a33      	ldr	r2, [pc, #204]	@ (800b658 <pwm_set_frequency+0x118>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d003      	beq.n	800b596 <pwm_set_frequency+0x56>
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	4a32      	ldr	r2, [pc, #200]	@ (800b65c <pwm_set_frequency+0x11c>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d108      	bne.n	800b5a8 <pwm_set_frequency+0x68>
			timer_frequency = (float) HAL_RCC_GetPCLK2Freq();
 800b596:	f001 feb7 	bl	800d308 <HAL_RCC_GetPCLK2Freq>
 800b59a:	ee07 0a90 	vmov	s15, r0
 800b59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a2:	edc7 7a05 	vstr	s15, [r7, #20]
 800b5a6:	e007      	b.n	800b5b8 <pwm_set_frequency+0x78>
	else
			timer_frequency = (float) SystemCoreClock;
 800b5a8:	4b2d      	ldr	r3, [pc, #180]	@ (800b660 <pwm_set_frequency+0x120>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	ee07 3a90 	vmov	s15, r3
 800b5b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5b4:	edc7 7a05 	vstr	s15, [r7, #20]

	if (!frequency)
 800b5b8:	edd7 7a00 	vldr	s15, [r7]
 800b5bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c4:	d104      	bne.n	800b5d0 <pwm_set_frequency+0x90>
		pwm->period = 0;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f04f 0200 	mov.w	r2, #0
 800b5cc:	609a      	str	r2, [r3, #8]
 800b5ce:	e019      	b.n	800b604 <pwm_set_frequency+0xc4>
	else
		pwm->period = (float)(timer_frequency / (frequency * (float) pwm->prescaler + frequency) - 1);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	ee07 3a90 	vmov	s15, r3
 800b5d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b5dc:	edd7 7a00 	vldr	s15, [r7]
 800b5e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b5e4:	edd7 7a00 	vldr	s15, [r7]
 800b5e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b5ec:	edd7 6a05 	vldr	s13, [r7, #20]
 800b5f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b5f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	ee17 2a90 	vmov	r2, s15
 800b602:	609a      	str	r2, [r3, #8]

	pwm->timer->Init.Period = round(pwm->period);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	4618      	mov	r0, r3
 800b60a:	f7fe ff43 	bl	800a494 <__aeabi_f2d>
 800b60e:	4602      	mov	r2, r0
 800b610:	460b      	mov	r3, r1
 800b612:	ec43 2b10 	vmov	d0, r2, r3
 800b616:	f004 fc0b 	bl	800fe30 <round>
 800b61a:	ec51 0b10 	vmov	r0, r1, d0
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	691c      	ldr	r4, [r3, #16]
 800b622:	f7fe ff8f 	bl	800a544 <__aeabi_d2uiz>
 800b626:	4603      	mov	r3, r0
 800b628:	60e3      	str	r3, [r4, #12]
	pwm->timer->Instance->CNT = 0;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	691b      	ldr	r3, [r3, #16]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2200      	movs	r2, #0
 800b632:	625a      	str	r2, [r3, #36]	@ 0x24
	res = HAL_TIM_PWM_Init(pwm->timer);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	691b      	ldr	r3, [r3, #16]
 800b638:	4618      	mov	r0, r3
 800b63a:	f002 f9e5 	bl	800da08 <HAL_TIM_PWM_Init>
 800b63e:	4603      	mov	r3, r0
 800b640:	73fb      	strb	r3, [r7, #15]
	return res;
 800b642:	7bfb      	ldrb	r3, [r7, #15]
}
 800b644:	4618      	mov	r0, r3
 800b646:	371c      	adds	r7, #28
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd90      	pop	{r4, r7, pc}
 800b64c:	40001000 	.word	0x40001000
 800b650:	40001400 	.word	0x40001400
 800b654:	40012c00 	.word	0x40012c00
 800b658:	40014000 	.word	0x40014000
 800b65c:	40014400 	.word	0x40014400
 800b660:	20000000 	.word	0x20000000

0800b664 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b66a:	4b0f      	ldr	r3, [pc, #60]	@ (800b6a8 <HAL_MspInit+0x44>)
 800b66c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b66e:	4a0e      	ldr	r2, [pc, #56]	@ (800b6a8 <HAL_MspInit+0x44>)
 800b670:	f043 0301 	orr.w	r3, r3, #1
 800b674:	6613      	str	r3, [r2, #96]	@ 0x60
 800b676:	4b0c      	ldr	r3, [pc, #48]	@ (800b6a8 <HAL_MspInit+0x44>)
 800b678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b67a:	f003 0301 	and.w	r3, r3, #1
 800b67e:	607b      	str	r3, [r7, #4]
 800b680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b682:	4b09      	ldr	r3, [pc, #36]	@ (800b6a8 <HAL_MspInit+0x44>)
 800b684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b686:	4a08      	ldr	r2, [pc, #32]	@ (800b6a8 <HAL_MspInit+0x44>)
 800b688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b68c:	6593      	str	r3, [r2, #88]	@ 0x58
 800b68e:	4b06      	ldr	r3, [pc, #24]	@ (800b6a8 <HAL_MspInit+0x44>)
 800b690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b696:	603b      	str	r3, [r7, #0]
 800b698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b69a:	bf00      	nop
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	40021000 	.word	0x40021000

0800b6ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6bc:	d10b      	bne.n	800b6d6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b6be:	4b09      	ldr	r3, [pc, #36]	@ (800b6e4 <HAL_TIM_PWM_MspInit+0x38>)
 800b6c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6c2:	4a08      	ldr	r2, [pc, #32]	@ (800b6e4 <HAL_TIM_PWM_MspInit+0x38>)
 800b6c4:	f043 0301 	orr.w	r3, r3, #1
 800b6c8:	6593      	str	r3, [r2, #88]	@ 0x58
 800b6ca:	4b06      	ldr	r3, [pc, #24]	@ (800b6e4 <HAL_TIM_PWM_MspInit+0x38>)
 800b6cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6ce:	f003 0301 	and.w	r3, r3, #1
 800b6d2:	60fb      	str	r3, [r7, #12]
 800b6d4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800b6d6:	bf00      	nop
 800b6d8:	3714      	adds	r7, #20
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	40021000 	.word	0x40021000

0800b6e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b088      	sub	sp, #32
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6f0:	f107 030c 	add.w	r3, r7, #12
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	601a      	str	r2, [r3, #0]
 800b6f8:	605a      	str	r2, [r3, #4]
 800b6fa:	609a      	str	r2, [r3, #8]
 800b6fc:	60da      	str	r2, [r3, #12]
 800b6fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b708:	d11c      	bne.n	800b744 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b70a:	4b10      	ldr	r3, [pc, #64]	@ (800b74c <HAL_TIM_MspPostInit+0x64>)
 800b70c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b70e:	4a0f      	ldr	r2, [pc, #60]	@ (800b74c <HAL_TIM_MspPostInit+0x64>)
 800b710:	f043 0301 	orr.w	r3, r3, #1
 800b714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b716:	4b0d      	ldr	r3, [pc, #52]	@ (800b74c <HAL_TIM_MspPostInit+0x64>)
 800b718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b71a:	f003 0301 	and.w	r3, r3, #1
 800b71e:	60bb      	str	r3, [r7, #8]
 800b720:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800b722:	2301      	movs	r3, #1
 800b724:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b726:	2302      	movs	r3, #2
 800b728:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b72a:	2300      	movs	r3, #0
 800b72c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b72e:	2300      	movs	r3, #0
 800b730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b732:	2301      	movs	r3, #1
 800b734:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b736:	f107 030c 	add.w	r3, r7, #12
 800b73a:	4619      	mov	r1, r3
 800b73c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b740:	f000 fdc8 	bl	800c2d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800b744:	bf00      	nop
 800b746:	3720      	adds	r7, #32
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	40021000 	.word	0x40021000

0800b750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b0a0      	sub	sp, #128	@ 0x80
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b758:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800b75c:	2200      	movs	r2, #0
 800b75e:	601a      	str	r2, [r3, #0]
 800b760:	605a      	str	r2, [r3, #4]
 800b762:	609a      	str	r2, [r3, #8]
 800b764:	60da      	str	r2, [r3, #12]
 800b766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b768:	f107 0310 	add.w	r3, r7, #16
 800b76c:	225c      	movs	r2, #92	@ 0x5c
 800b76e:	2100      	movs	r1, #0
 800b770:	4618      	mov	r0, r3
 800b772:	f004 fb23 	bl	800fdbc <memset>
  if(huart->Instance==USART1)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a23      	ldr	r2, [pc, #140]	@ (800b808 <HAL_UART_MspInit+0xb8>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d13f      	bne.n	800b800 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800b780:	2301      	movs	r3, #1
 800b782:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800b784:	2300      	movs	r3, #0
 800b786:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b788:	f107 0310 	add.w	r3, r7, #16
 800b78c:	4618      	mov	r0, r3
 800b78e:	f001 fe31 	bl	800d3f4 <HAL_RCCEx_PeriphCLKConfig>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	d001      	beq.n	800b79c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800b798:	f7ff fdd2 	bl	800b340 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b79c:	4b1b      	ldr	r3, [pc, #108]	@ (800b80c <HAL_UART_MspInit+0xbc>)
 800b79e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b7a0:	4a1a      	ldr	r2, [pc, #104]	@ (800b80c <HAL_UART_MspInit+0xbc>)
 800b7a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b7a6:	6613      	str	r3, [r2, #96]	@ 0x60
 800b7a8:	4b18      	ldr	r3, [pc, #96]	@ (800b80c <HAL_UART_MspInit+0xbc>)
 800b7aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b7ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b7b0:	60fb      	str	r3, [r7, #12]
 800b7b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b7b4:	4b15      	ldr	r3, [pc, #84]	@ (800b80c <HAL_UART_MspInit+0xbc>)
 800b7b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7b8:	4a14      	ldr	r2, [pc, #80]	@ (800b80c <HAL_UART_MspInit+0xbc>)
 800b7ba:	f043 0301 	orr.w	r3, r3, #1
 800b7be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b7c0:	4b12      	ldr	r3, [pc, #72]	@ (800b80c <HAL_UART_MspInit+0xbc>)
 800b7c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7c4:	f003 0301 	and.w	r3, r3, #1
 800b7c8:	60bb      	str	r3, [r7, #8]
 800b7ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b7cc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800b7d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7d2:	2302      	movs	r3, #2
 800b7d4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7da:	2303      	movs	r3, #3
 800b7dc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b7de:	2307      	movs	r3, #7
 800b7e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7e2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b7ec:	f000 fd72 	bl	800c2d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	2101      	movs	r1, #1
 800b7f4:	2025      	movs	r0, #37	@ 0x25
 800b7f6:	f000 fa3e 	bl	800bc76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b7fa:	2025      	movs	r0, #37	@ 0x25
 800b7fc:	f000 fa57 	bl	800bcae <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800b800:	bf00      	nop
 800b802:	3780      	adds	r7, #128	@ 0x80
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	40013800 	.word	0x40013800
 800b80c:	40021000 	.word	0x40021000

0800b810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b810:	b480      	push	{r7}
 800b812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800b814:	bf00      	nop
 800b816:	e7fd      	b.n	800b814 <NMI_Handler+0x4>

0800b818 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b818:	b480      	push	{r7}
 800b81a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b81c:	bf00      	nop
 800b81e:	e7fd      	b.n	800b81c <HardFault_Handler+0x4>

0800b820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b820:	b480      	push	{r7}
 800b822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b824:	bf00      	nop
 800b826:	e7fd      	b.n	800b824 <MemManage_Handler+0x4>

0800b828 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b828:	b480      	push	{r7}
 800b82a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b82c:	bf00      	nop
 800b82e:	e7fd      	b.n	800b82c <BusFault_Handler+0x4>

0800b830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b830:	b480      	push	{r7}
 800b832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b834:	bf00      	nop
 800b836:	e7fd      	b.n	800b834 <UsageFault_Handler+0x4>

0800b838 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b838:	b480      	push	{r7}
 800b83a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b83c:	bf00      	nop
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr

0800b846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b846:	b480      	push	{r7}
 800b848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b84a:	bf00      	nop
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b854:	b480      	push	{r7}
 800b856:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b858:	bf00      	nop
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr

0800b862 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b862:	b580      	push	{r7, lr}
 800b864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b866:	f000 f8f5 	bl	800ba54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b86a:	bf00      	nop
 800b86c:	bd80      	pop	{r7, pc}
	...

0800b870 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800b874:	4802      	ldr	r0, [pc, #8]	@ (800b880 <USART1_IRQHandler+0x10>)
 800b876:	f002 ffeb 	bl	800e850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800b87a:	bf00      	nop
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop
 800b880:	200000a4 	.word	0x200000a4

0800b884 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800b884:	b480      	push	{r7}
 800b886:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 800b888:	4b07      	ldr	r3, [pc, #28]	@ (800b8a8 <SystemInit+0x24>)
 800b88a:	4a08      	ldr	r2, [pc, #32]	@ (800b8ac <SystemInit+0x28>)
 800b88c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800b88e:	4b06      	ldr	r3, [pc, #24]	@ (800b8a8 <SystemInit+0x24>)
 800b890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b894:	4a04      	ldr	r2, [pc, #16]	@ (800b8a8 <SystemInit+0x24>)
 800b896:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b89a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800b89e:	bf00      	nop
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr
 800b8a8:	e000ed00 	.word	0xe000ed00
 800b8ac:	0800a000 	.word	0x0800a000

0800b8b0 <watchdog_set_timeout>:
 *      Author: Admin
 */
#include "wdt.h"

HAL_StatusTypeDef watchdog_set_timeout(IWDG_HandleTypeDef *wdt,
		timeout_t timeout) {
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	70fb      	strb	r3, [r7, #3]
	switch (timeout) {
 800b8bc:	78fb      	ldrb	r3, [r7, #3]
 800b8be:	2b06      	cmp	r3, #6
 800b8c0:	d82c      	bhi.n	800b91c <watchdog_set_timeout+0x6c>
 800b8c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b8c8 <watchdog_set_timeout+0x18>)
 800b8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c8:	0800b8e5 	.word	0x0800b8e5
 800b8cc:	0800b8ed 	.word	0x0800b8ed
 800b8d0:	0800b8f5 	.word	0x0800b8f5
 800b8d4:	0800b8fd 	.word	0x0800b8fd
 800b8d8:	0800b905 	.word	0x0800b905
 800b8dc:	0800b90d 	.word	0x0800b90d
 800b8e0:	0800b915 	.word	0x0800b915
	case TIMEOUT_HALF_SEC:
		wdt->Init.Prescaler = WDT_PSC_4;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	605a      	str	r2, [r3, #4]
		break;
 800b8ea:	e019      	b.n	800b920 <watchdog_set_timeout+0x70>
	case TIMEOUT_ONE_SEC:
		wdt->Init.Prescaler = WDT_PSC_8;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	605a      	str	r2, [r3, #4]
		break;
 800b8f2:	e015      	b.n	800b920 <watchdog_set_timeout+0x70>
	case TIMEOUT_2_SEC:
		wdt->Init.Prescaler = WDT_PSC_16;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2202      	movs	r2, #2
 800b8f8:	605a      	str	r2, [r3, #4]
		break;
 800b8fa:	e011      	b.n	800b920 <watchdog_set_timeout+0x70>
	case TIMEOUT_4_SEC:
		wdt->Init.Prescaler = WDT_PSC_32;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2203      	movs	r2, #3
 800b900:	605a      	str	r2, [r3, #4]
		break;
 800b902:	e00d      	b.n	800b920 <watchdog_set_timeout+0x70>
	case TIMEOUT_8_SEC:
		wdt->Init.Prescaler = WDT_PSC_64;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2204      	movs	r2, #4
 800b908:	605a      	str	r2, [r3, #4]
		break;
 800b90a:	e009      	b.n	800b920 <watchdog_set_timeout+0x70>
	case TIMEOUT_16_SEC:
		wdt->Init.Prescaler = WDT_PSC_128;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2205      	movs	r2, #5
 800b910:	605a      	str	r2, [r3, #4]
		break;
 800b912:	e005      	b.n	800b920 <watchdog_set_timeout+0x70>
	case TIMEOUT_32_SEC:
		wdt->Init.Prescaler = WDT_PSC_256;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2206      	movs	r2, #6
 800b918:	605a      	str	r2, [r3, #4]
		break;
 800b91a:	e001      	b.n	800b920 <watchdog_set_timeout+0x70>
	default:
		return HAL_ERROR;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e00b      	b.n	800b938 <watchdog_set_timeout+0x88>
	}
	wdt->Init.Reload = 4095;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800b926:	609a      	str	r2, [r3, #8]
	wdt->Init.Window = 4095;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800b92e:	60da      	str	r2, [r3, #12]
	return HAL_IWDG_Init(wdt);
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 fe61 	bl	800c5f8 <HAL_IWDG_Init>
 800b936:	4603      	mov	r3, r0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3708      	adds	r7, #8
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <ping_to_watchdog>:

HAL_StatusTypeDef ping_to_watchdog(IWDG_HandleTypeDef *wdt) {
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
	return HAL_IWDG_Refresh(wdt);
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 fea6 	bl	800c69a <HAL_IWDG_Refresh>
 800b94e:	4603      	mov	r3, r0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800b958:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800b990 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800b95c:	f7ff ff92 	bl	800b884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b960:	480c      	ldr	r0, [pc, #48]	@ (800b994 <LoopForever+0x6>)
  ldr r1, =_edata
 800b962:	490d      	ldr	r1, [pc, #52]	@ (800b998 <LoopForever+0xa>)
  ldr r2, =_sidata
 800b964:	4a0d      	ldr	r2, [pc, #52]	@ (800b99c <LoopForever+0xe>)
  movs r3, #0
 800b966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b968:	e002      	b.n	800b970 <LoopCopyDataInit>

0800b96a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b96a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b96c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b96e:	3304      	adds	r3, #4

0800b970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b974:	d3f9      	bcc.n	800b96a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b976:	4a0a      	ldr	r2, [pc, #40]	@ (800b9a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 800b978:	4c0a      	ldr	r4, [pc, #40]	@ (800b9a4 <LoopForever+0x16>)
  movs r3, #0
 800b97a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b97c:	e001      	b.n	800b982 <LoopFillZerobss>

0800b97e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b97e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b980:	3204      	adds	r2, #4

0800b982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b984:	d3fb      	bcc.n	800b97e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b986:	f004 fa21 	bl	800fdcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800b98a:	f7ff fb01 	bl	800af90 <main>

0800b98e <LoopForever>:

LoopForever:
    b LoopForever
 800b98e:	e7fe      	b.n	800b98e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800b990:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800b994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b998:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 800b99c:	0800ff34 	.word	0x0800ff34
  ldr r2, =_sbss
 800b9a0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800b9a4:	20000980 	.word	0x20000980

0800b9a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b9a8:	e7fe      	b.n	800b9a8 <ADC1_IRQHandler>

0800b9aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b082      	sub	sp, #8
 800b9ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b9b4:	2003      	movs	r0, #3
 800b9b6:	f000 f953 	bl	800bc60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b9ba:	200f      	movs	r0, #15
 800b9bc:	f000 f80e 	bl	800b9dc <HAL_InitTick>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d002      	beq.n	800b9cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	71fb      	strb	r3, [r7, #7]
 800b9ca:	e001      	b.n	800b9d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800b9cc:	f7ff fe4a 	bl	800b664 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800b9d0:	79fb      	ldrb	r3, [r7, #7]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3708      	adds	r7, #8
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
	...

0800b9dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800b9e8:	4b17      	ldr	r3, [pc, #92]	@ (800ba48 <HAL_InitTick+0x6c>)
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d023      	beq.n	800ba38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800b9f0:	4b16      	ldr	r3, [pc, #88]	@ (800ba4c <HAL_InitTick+0x70>)
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	4b14      	ldr	r3, [pc, #80]	@ (800ba48 <HAL_InitTick+0x6c>)
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b9fe:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba06:	4618      	mov	r0, r3
 800ba08:	f000 f963 	bl	800bcd2 <HAL_SYSTICK_Config>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d10f      	bne.n	800ba32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2b0f      	cmp	r3, #15
 800ba16:	d809      	bhi.n	800ba2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ba18:	2200      	movs	r2, #0
 800ba1a:	6879      	ldr	r1, [r7, #4]
 800ba1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba20:	f000 f929 	bl	800bc76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800ba24:	4a0a      	ldr	r2, [pc, #40]	@ (800ba50 <HAL_InitTick+0x74>)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6013      	str	r3, [r2, #0]
 800ba2a:	e007      	b.n	800ba3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	73fb      	strb	r3, [r7, #15]
 800ba30:	e004      	b.n	800ba3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	73fb      	strb	r3, [r7, #15]
 800ba36:	e001      	b.n	800ba3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800ba3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	20000008 	.word	0x20000008
 800ba4c:	20000000 	.word	0x20000000
 800ba50:	20000004 	.word	0x20000004

0800ba54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ba54:	b480      	push	{r7}
 800ba56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800ba58:	4b06      	ldr	r3, [pc, #24]	@ (800ba74 <HAL_IncTick+0x20>)
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	4b06      	ldr	r3, [pc, #24]	@ (800ba78 <HAL_IncTick+0x24>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4413      	add	r3, r2
 800ba64:	4a04      	ldr	r2, [pc, #16]	@ (800ba78 <HAL_IncTick+0x24>)
 800ba66:	6013      	str	r3, [r2, #0]
}
 800ba68:	bf00      	nop
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	20000008 	.word	0x20000008
 800ba78:	2000097c 	.word	0x2000097c

0800ba7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	af00      	add	r7, sp, #0
  return uwTick;
 800ba80:	4b03      	ldr	r3, [pc, #12]	@ (800ba90 <HAL_GetTick+0x14>)
 800ba82:	681b      	ldr	r3, [r3, #0]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr
 800ba8e:	bf00      	nop
 800ba90:	2000097c 	.word	0x2000097c

0800ba94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b085      	sub	sp, #20
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f003 0307 	and.w	r3, r3, #7
 800baa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800baa4:	4b0c      	ldr	r3, [pc, #48]	@ (800bad8 <__NVIC_SetPriorityGrouping+0x44>)
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800baaa:	68ba      	ldr	r2, [r7, #8]
 800baac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800bab0:	4013      	ands	r3, r2
 800bab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800babc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800bac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bac6:	4a04      	ldr	r2, [pc, #16]	@ (800bad8 <__NVIC_SetPriorityGrouping+0x44>)
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	60d3      	str	r3, [r2, #12]
}
 800bacc:	bf00      	nop
 800bace:	3714      	adds	r7, #20
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr
 800bad8:	e000ed00 	.word	0xe000ed00

0800badc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800badc:	b480      	push	{r7}
 800bade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bae0:	4b04      	ldr	r3, [pc, #16]	@ (800baf4 <__NVIC_GetPriorityGrouping+0x18>)
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	0a1b      	lsrs	r3, r3, #8
 800bae6:	f003 0307 	and.w	r3, r3, #7
}
 800baea:	4618      	mov	r0, r3
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr
 800baf4:	e000ed00 	.word	0xe000ed00

0800baf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	4603      	mov	r3, r0
 800bb00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bb02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	db0b      	blt.n	800bb22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bb0a:	79fb      	ldrb	r3, [r7, #7]
 800bb0c:	f003 021f 	and.w	r2, r3, #31
 800bb10:	4907      	ldr	r1, [pc, #28]	@ (800bb30 <__NVIC_EnableIRQ+0x38>)
 800bb12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb16:	095b      	lsrs	r3, r3, #5
 800bb18:	2001      	movs	r0, #1
 800bb1a:	fa00 f202 	lsl.w	r2, r0, r2
 800bb1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800bb22:	bf00      	nop
 800bb24:	370c      	adds	r7, #12
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr
 800bb2e:	bf00      	nop
 800bb30:	e000e100 	.word	0xe000e100

0800bb34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	6039      	str	r1, [r7, #0]
 800bb3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bb40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	db0a      	blt.n	800bb5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	b2da      	uxtb	r2, r3
 800bb4c:	490c      	ldr	r1, [pc, #48]	@ (800bb80 <__NVIC_SetPriority+0x4c>)
 800bb4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb52:	0112      	lsls	r2, r2, #4
 800bb54:	b2d2      	uxtb	r2, r2
 800bb56:	440b      	add	r3, r1
 800bb58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bb5c:	e00a      	b.n	800bb74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	b2da      	uxtb	r2, r3
 800bb62:	4908      	ldr	r1, [pc, #32]	@ (800bb84 <__NVIC_SetPriority+0x50>)
 800bb64:	79fb      	ldrb	r3, [r7, #7]
 800bb66:	f003 030f 	and.w	r3, r3, #15
 800bb6a:	3b04      	subs	r3, #4
 800bb6c:	0112      	lsls	r2, r2, #4
 800bb6e:	b2d2      	uxtb	r2, r2
 800bb70:	440b      	add	r3, r1
 800bb72:	761a      	strb	r2, [r3, #24]
}
 800bb74:	bf00      	nop
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr
 800bb80:	e000e100 	.word	0xe000e100
 800bb84:	e000ed00 	.word	0xe000ed00

0800bb88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b089      	sub	sp, #36	@ 0x24
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f003 0307 	and.w	r3, r3, #7
 800bb9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	f1c3 0307 	rsb	r3, r3, #7
 800bba2:	2b04      	cmp	r3, #4
 800bba4:	bf28      	it	cs
 800bba6:	2304      	movcs	r3, #4
 800bba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	3304      	adds	r3, #4
 800bbae:	2b06      	cmp	r3, #6
 800bbb0:	d902      	bls.n	800bbb8 <NVIC_EncodePriority+0x30>
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	3b03      	subs	r3, #3
 800bbb6:	e000      	b.n	800bbba <NVIC_EncodePriority+0x32>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bbbc:	f04f 32ff 	mov.w	r2, #4294967295
 800bbc0:	69bb      	ldr	r3, [r7, #24]
 800bbc2:	fa02 f303 	lsl.w	r3, r2, r3
 800bbc6:	43da      	mvns	r2, r3
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	401a      	ands	r2, r3
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bbd0:	f04f 31ff 	mov.w	r1, #4294967295
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	fa01 f303 	lsl.w	r3, r1, r3
 800bbda:	43d9      	mvns	r1, r3
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bbe0:	4313      	orrs	r3, r2
         );
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3724      	adds	r7, #36	@ 0x24
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr
	...

0800bbf0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800bbf4:	f3bf 8f4f 	dsb	sy
}
 800bbf8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800bbfa:	4b06      	ldr	r3, [pc, #24]	@ (800bc14 <__NVIC_SystemReset+0x24>)
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800bc02:	4904      	ldr	r1, [pc, #16]	@ (800bc14 <__NVIC_SystemReset+0x24>)
 800bc04:	4b04      	ldr	r3, [pc, #16]	@ (800bc18 <__NVIC_SystemReset+0x28>)
 800bc06:	4313      	orrs	r3, r2
 800bc08:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800bc0a:	f3bf 8f4f 	dsb	sy
}
 800bc0e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800bc10:	bf00      	nop
 800bc12:	e7fd      	b.n	800bc10 <__NVIC_SystemReset+0x20>
 800bc14:	e000ed00 	.word	0xe000ed00
 800bc18:	05fa0004 	.word	0x05fa0004

0800bc1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	3b01      	subs	r3, #1
 800bc28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bc2c:	d301      	bcc.n	800bc32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e00f      	b.n	800bc52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bc32:	4a0a      	ldr	r2, [pc, #40]	@ (800bc5c <SysTick_Config+0x40>)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	3b01      	subs	r3, #1
 800bc38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800bc3a:	210f      	movs	r1, #15
 800bc3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc40:	f7ff ff78 	bl	800bb34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bc44:	4b05      	ldr	r3, [pc, #20]	@ (800bc5c <SysTick_Config+0x40>)
 800bc46:	2200      	movs	r2, #0
 800bc48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bc4a:	4b04      	ldr	r3, [pc, #16]	@ (800bc5c <SysTick_Config+0x40>)
 800bc4c:	2207      	movs	r2, #7
 800bc4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	e000e010 	.word	0xe000e010

0800bc60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f7ff ff13 	bl	800ba94 <__NVIC_SetPriorityGrouping>
}
 800bc6e:	bf00      	nop
 800bc70:	3708      	adds	r7, #8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b086      	sub	sp, #24
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	60b9      	str	r1, [r7, #8]
 800bc80:	607a      	str	r2, [r7, #4]
 800bc82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800bc84:	2300      	movs	r3, #0
 800bc86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800bc88:	f7ff ff28 	bl	800badc <__NVIC_GetPriorityGrouping>
 800bc8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	68b9      	ldr	r1, [r7, #8]
 800bc92:	6978      	ldr	r0, [r7, #20]
 800bc94:	f7ff ff78 	bl	800bb88 <NVIC_EncodePriority>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc9e:	4611      	mov	r1, r2
 800bca0:	4618      	mov	r0, r3
 800bca2:	f7ff ff47 	bl	800bb34 <__NVIC_SetPriority>
}
 800bca6:	bf00      	nop
 800bca8:	3718      	adds	r7, #24
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b082      	sub	sp, #8
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bcb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f7ff ff1b 	bl	800baf8 <__NVIC_EnableIRQ>
}
 800bcc2:	bf00      	nop
 800bcc4:	3708      	adds	r7, #8
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800bcce:	f7ff ff8f 	bl	800bbf0 <__NVIC_SystemReset>

0800bcd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b082      	sub	sp, #8
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f7ff ff9e 	bl	800bc1c <SysTick_Config>
 800bce0:	4603      	mov	r3, r0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3708      	adds	r7, #8
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}

0800bcea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bcea:	b480      	push	{r7}
 800bcec:	b085      	sub	sp, #20
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800bcfc:	b2db      	uxtb	r3, r3
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	d008      	beq.n	800bd14 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2204      	movs	r2, #4
 800bd06:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800bd10:	2301      	movs	r3, #1
 800bd12:	e022      	b.n	800bd5a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f022 020e 	bic.w	r2, r2, #14
 800bd22:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f022 0201 	bic.w	r2, r2, #1
 800bd32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd38:	f003 021c 	and.w	r2, r3, #28
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd40:	2101      	movs	r1, #1
 800bd42:	fa01 f202 	lsl.w	r2, r1, r2
 800bd46:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800bd58:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3714      	adds	r7, #20
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr

0800bd66 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b084      	sub	sp, #16
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	2b02      	cmp	r3, #2
 800bd7c:	d005      	beq.n	800bd8a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2204      	movs	r2, #4
 800bd82:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800bd84:	2301      	movs	r3, #1
 800bd86:	73fb      	strb	r3, [r7, #15]
 800bd88:	e029      	b.n	800bdde <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f022 020e 	bic.w	r2, r2, #14
 800bd98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f022 0201 	bic.w	r2, r2, #1
 800bda8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdae:	f003 021c 	and.w	r2, r3, #28
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdb6:	2101      	movs	r1, #1
 800bdb8:	fa01 f202 	lsl.w	r2, r1, r2
 800bdbc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d003      	beq.n	800bdde <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	4798      	blx	r3
    }
  }
  return status;
 800bdde:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b086      	sub	sp, #24
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800bdfa:	4b2f      	ldr	r3, [pc, #188]	@ (800beb8 <HAL_FLASH_Program+0xd0>)
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d101      	bne.n	800be06 <HAL_FLASH_Program+0x1e>
 800be02:	2302      	movs	r3, #2
 800be04:	e053      	b.n	800beae <HAL_FLASH_Program+0xc6>
 800be06:	4b2c      	ldr	r3, [pc, #176]	@ (800beb8 <HAL_FLASH_Program+0xd0>)
 800be08:	2201      	movs	r2, #1
 800be0a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800be0c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800be10:	f000 f888 	bl	800bf24 <FLASH_WaitForLastOperation>
 800be14:	4603      	mov	r3, r0
 800be16:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800be18:	7dfb      	ldrb	r3, [r7, #23]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d143      	bne.n	800bea6 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800be1e:	4b26      	ldr	r3, [pc, #152]	@ (800beb8 <HAL_FLASH_Program+0xd0>)
 800be20:	2200      	movs	r2, #0
 800be22:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800be24:	4b25      	ldr	r3, [pc, #148]	@ (800bebc <HAL_FLASH_Program+0xd4>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d009      	beq.n	800be44 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800be30:	4b22      	ldr	r3, [pc, #136]	@ (800bebc <HAL_FLASH_Program+0xd4>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4a21      	ldr	r2, [pc, #132]	@ (800bebc <HAL_FLASH_Program+0xd4>)
 800be36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800be3a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800be3c:	4b1e      	ldr	r3, [pc, #120]	@ (800beb8 <HAL_FLASH_Program+0xd0>)
 800be3e:	2202      	movs	r2, #2
 800be40:	771a      	strb	r2, [r3, #28]
 800be42:	e002      	b.n	800be4a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800be44:	4b1c      	ldr	r3, [pc, #112]	@ (800beb8 <HAL_FLASH_Program+0xd0>)
 800be46:	2200      	movs	r2, #0
 800be48:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d107      	bne.n	800be60 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800be50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be54:	68b8      	ldr	r0, [r7, #8]
 800be56:	f000 f8bb 	bl	800bfd0 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800be5a:	2301      	movs	r3, #1
 800be5c:	613b      	str	r3, [r7, #16]
 800be5e:	e010      	b.n	800be82 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2b01      	cmp	r3, #1
 800be64:	d002      	beq.n	800be6c <HAL_FLASH_Program+0x84>
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2b02      	cmp	r3, #2
 800be6a:	d10a      	bne.n	800be82 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	4619      	mov	r1, r3
 800be70:	68b8      	ldr	r0, [r7, #8]
 800be72:	f000 f8d3 	bl	800c01c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2b02      	cmp	r3, #2
 800be7a:	d102      	bne.n	800be82 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800be7c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800be80:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800be82:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800be86:	f000 f84d 	bl	800bf24 <FLASH_WaitForLastOperation>
 800be8a:	4603      	mov	r3, r0
 800be8c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d006      	beq.n	800bea2 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800be94:	4b09      	ldr	r3, [pc, #36]	@ (800bebc <HAL_FLASH_Program+0xd4>)
 800be96:	695a      	ldr	r2, [r3, #20]
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	43db      	mvns	r3, r3
 800be9c:	4907      	ldr	r1, [pc, #28]	@ (800bebc <HAL_FLASH_Program+0xd4>)
 800be9e:	4013      	ands	r3, r2
 800bea0:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800bea2:	f000 f9cd 	bl	800c240 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800bea6:	4b04      	ldr	r3, [pc, #16]	@ (800beb8 <HAL_FLASH_Program+0xd0>)
 800bea8:	2200      	movs	r2, #0
 800beaa:	701a      	strb	r2, [r3, #0]

  return status;
 800beac:	7dfb      	ldrb	r3, [r7, #23]
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3718      	adds	r7, #24
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	2000000c 	.word	0x2000000c
 800bebc:	40022000 	.word	0x40022000

0800bec0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b083      	sub	sp, #12
 800bec4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800bec6:	2300      	movs	r3, #0
 800bec8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800beca:	4b0b      	ldr	r3, [pc, #44]	@ (800bef8 <HAL_FLASH_Unlock+0x38>)
 800becc:	695b      	ldr	r3, [r3, #20]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	da0b      	bge.n	800beea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800bed2:	4b09      	ldr	r3, [pc, #36]	@ (800bef8 <HAL_FLASH_Unlock+0x38>)
 800bed4:	4a09      	ldr	r2, [pc, #36]	@ (800befc <HAL_FLASH_Unlock+0x3c>)
 800bed6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800bed8:	4b07      	ldr	r3, [pc, #28]	@ (800bef8 <HAL_FLASH_Unlock+0x38>)
 800beda:	4a09      	ldr	r2, [pc, #36]	@ (800bf00 <HAL_FLASH_Unlock+0x40>)
 800bedc:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800bede:	4b06      	ldr	r3, [pc, #24]	@ (800bef8 <HAL_FLASH_Unlock+0x38>)
 800bee0:	695b      	ldr	r3, [r3, #20]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	da01      	bge.n	800beea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800bee6:	2301      	movs	r3, #1
 800bee8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800beea:	79fb      	ldrb	r3, [r7, #7]
}
 800beec:	4618      	mov	r0, r3
 800beee:	370c      	adds	r7, #12
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr
 800bef8:	40022000 	.word	0x40022000
 800befc:	45670123 	.word	0x45670123
 800bf00:	cdef89ab 	.word	0xcdef89ab

0800bf04 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800bf04:	b480      	push	{r7}
 800bf06:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800bf08:	4b05      	ldr	r3, [pc, #20]	@ (800bf20 <HAL_FLASH_Lock+0x1c>)
 800bf0a:	695b      	ldr	r3, [r3, #20]
 800bf0c:	4a04      	ldr	r2, [pc, #16]	@ (800bf20 <HAL_FLASH_Lock+0x1c>)
 800bf0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bf12:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr
 800bf20:	40022000 	.word	0x40022000

0800bf24 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800bf2c:	f7ff fda6 	bl	800ba7c <HAL_GetTick>
 800bf30:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800bf32:	e00d      	b.n	800bf50 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf3a:	d009      	beq.n	800bf50 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800bf3c:	f7ff fd9e 	bl	800ba7c <HAL_GetTick>
 800bf40:	4602      	mov	r2, r0
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	1ad3      	subs	r3, r2, r3
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d801      	bhi.n	800bf50 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800bf4c:	2303      	movs	r3, #3
 800bf4e:	e035      	b.n	800bfbc <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800bf50:	4b1c      	ldr	r3, [pc, #112]	@ (800bfc4 <FLASH_WaitForLastOperation+0xa0>)
 800bf52:	691b      	ldr	r3, [r3, #16]
 800bf54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d1eb      	bne.n	800bf34 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800bf5c:	4b19      	ldr	r3, [pc, #100]	@ (800bfc4 <FLASH_WaitForLastOperation+0xa0>)
 800bf5e:	691a      	ldr	r2, [r3, #16]
 800bf60:	4b19      	ldr	r3, [pc, #100]	@ (800bfc8 <FLASH_WaitForLastOperation+0xa4>)
 800bf62:	4013      	ands	r3, r2
 800bf64:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d01d      	beq.n	800bfa8 <FLASH_WaitForLastOperation+0x84>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800bf6c:	4b17      	ldr	r3, [pc, #92]	@ (800bfcc <FLASH_WaitForLastOperation+0xa8>)
 800bf6e:	685a      	ldr	r2, [r3, #4]
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	4313      	orrs	r3, r2
 800bf74:	4a15      	ldr	r2, [pc, #84]	@ (800bfcc <FLASH_WaitForLastOperation+0xa8>)
 800bf76:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf7e:	d307      	bcc.n	800bf90 <FLASH_WaitForLastOperation+0x6c>
 800bf80:	4b10      	ldr	r3, [pc, #64]	@ (800bfc4 <FLASH_WaitForLastOperation+0xa0>)
 800bf82:	699a      	ldr	r2, [r3, #24]
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800bf8a:	490e      	ldr	r1, [pc, #56]	@ (800bfc4 <FLASH_WaitForLastOperation+0xa0>)
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	618b      	str	r3, [r1, #24]
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d004      	beq.n	800bfa4 <FLASH_WaitForLastOperation+0x80>
 800bf9a:	4a0a      	ldr	r2, [pc, #40]	@ (800bfc4 <FLASH_WaitForLastOperation+0xa0>)
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800bfa2:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e009      	b.n	800bfbc <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800bfa8:	4b06      	ldr	r3, [pc, #24]	@ (800bfc4 <FLASH_WaitForLastOperation+0xa0>)
 800bfaa:	691b      	ldr	r3, [r3, #16]
 800bfac:	f003 0301 	and.w	r3, r3, #1
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d002      	beq.n	800bfba <FLASH_WaitForLastOperation+0x96>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800bfb4:	4b03      	ldr	r3, [pc, #12]	@ (800bfc4 <FLASH_WaitForLastOperation+0xa0>)
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800bfba:	2300      	movs	r3, #0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	40022000 	.word	0x40022000
 800bfc8:	0002c3fa 	.word	0x0002c3fa
 800bfcc:	2000000c 	.word	0x2000000c

0800bfd0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b085      	sub	sp, #20
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800bfdc:	4b0e      	ldr	r3, [pc, #56]	@ (800c018 <FLASH_Program_DoubleWord+0x48>)
 800bfde:	695b      	ldr	r3, [r3, #20]
 800bfe0:	4a0d      	ldr	r2, [pc, #52]	@ (800c018 <FLASH_Program_DoubleWord+0x48>)
 800bfe2:	f043 0301 	orr.w	r3, r3, #1
 800bfe6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	683a      	ldr	r2, [r7, #0]
 800bfec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800bfee:	f3bf 8f6f 	isb	sy
}
 800bff2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800bff4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bff8:	f04f 0200 	mov.w	r2, #0
 800bffc:	f04f 0300 	mov.w	r3, #0
 800c000:	000a      	movs	r2, r1
 800c002:	2300      	movs	r3, #0
 800c004:	68f9      	ldr	r1, [r7, #12]
 800c006:	3104      	adds	r1, #4
 800c008:	4613      	mov	r3, r2
 800c00a:	600b      	str	r3, [r1, #0]
}
 800c00c:	bf00      	nop
 800c00e:	3714      	adds	r7, #20
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr
 800c018:	40022000 	.word	0x40022000

0800c01c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b089      	sub	sp, #36	@ 0x24
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800c026:	2340      	movs	r3, #64	@ 0x40
 800c028:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800c032:	4b14      	ldr	r3, [pc, #80]	@ (800c084 <FLASH_Program_Fast+0x68>)
 800c034:	695b      	ldr	r3, [r3, #20]
 800c036:	4a13      	ldr	r2, [pc, #76]	@ (800c084 <FLASH_Program_Fast+0x68>)
 800c038:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c03c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c03e:	f3ef 8310 	mrs	r3, PRIMASK
 800c042:	60fb      	str	r3, [r7, #12]
  return(result);
 800c044:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800c046:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c048:	b672      	cpsid	i
}
 800c04a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	3304      	adds	r3, #4
 800c058:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	3304      	adds	r3, #4
 800c05e:	617b      	str	r3, [r7, #20]
    row_index--;
 800c060:	7ffb      	ldrb	r3, [r7, #31]
 800c062:	3b01      	subs	r3, #1
 800c064:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800c066:	7ffb      	ldrb	r3, [r7, #31]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d1ef      	bne.n	800c04c <FLASH_Program_Fast+0x30>
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	f383 8810 	msr	PRIMASK, r3
}
 800c076:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800c078:	bf00      	nop
 800c07a:	3724      	adds	r7, #36	@ 0x24
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr
 800c084:	40022000 	.word	0x40022000

0800c088 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c092:	4b48      	ldr	r3, [pc, #288]	@ (800c1b4 <HAL_FLASHEx_Erase+0x12c>)
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	2b01      	cmp	r3, #1
 800c098:	d101      	bne.n	800c09e <HAL_FLASHEx_Erase+0x16>
 800c09a:	2302      	movs	r3, #2
 800c09c:	e085      	b.n	800c1aa <HAL_FLASHEx_Erase+0x122>
 800c09e:	4b45      	ldr	r3, [pc, #276]	@ (800c1b4 <HAL_FLASHEx_Erase+0x12c>)
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c0a4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800c0a8:	f7ff ff3c 	bl	800bf24 <FLASH_WaitForLastOperation>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800c0b0:	7bfb      	ldrb	r3, [r7, #15]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d175      	bne.n	800c1a2 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c0b6:	4b3f      	ldr	r3, [pc, #252]	@ (800c1b4 <HAL_FLASHEx_Erase+0x12c>)
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800c0bc:	4b3e      	ldr	r3, [pc, #248]	@ (800c1b8 <HAL_FLASHEx_Erase+0x130>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d013      	beq.n	800c0f0 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800c0c8:	4b3b      	ldr	r3, [pc, #236]	@ (800c1b8 <HAL_FLASHEx_Erase+0x130>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d009      	beq.n	800c0e8 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800c0d4:	4b38      	ldr	r3, [pc, #224]	@ (800c1b8 <HAL_FLASHEx_Erase+0x130>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4a37      	ldr	r2, [pc, #220]	@ (800c1b8 <HAL_FLASHEx_Erase+0x130>)
 800c0da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c0de:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800c0e0:	4b34      	ldr	r3, [pc, #208]	@ (800c1b4 <HAL_FLASHEx_Erase+0x12c>)
 800c0e2:	2203      	movs	r2, #3
 800c0e4:	771a      	strb	r2, [r3, #28]
 800c0e6:	e016      	b.n	800c116 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800c0e8:	4b32      	ldr	r3, [pc, #200]	@ (800c1b4 <HAL_FLASHEx_Erase+0x12c>)
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	771a      	strb	r2, [r3, #28]
 800c0ee:	e012      	b.n	800c116 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800c0f0:	4b31      	ldr	r3, [pc, #196]	@ (800c1b8 <HAL_FLASHEx_Erase+0x130>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d009      	beq.n	800c110 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800c0fc:	4b2e      	ldr	r3, [pc, #184]	@ (800c1b8 <HAL_FLASHEx_Erase+0x130>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a2d      	ldr	r2, [pc, #180]	@ (800c1b8 <HAL_FLASHEx_Erase+0x130>)
 800c102:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c106:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800c108:	4b2a      	ldr	r3, [pc, #168]	@ (800c1b4 <HAL_FLASHEx_Erase+0x12c>)
 800c10a:	2202      	movs	r2, #2
 800c10c:	771a      	strb	r2, [r3, #28]
 800c10e:	e002      	b.n	800c116 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800c110:	4b28      	ldr	r3, [pc, #160]	@ (800c1b4 <HAL_FLASHEx_Erase+0x12c>)
 800c112:	2200      	movs	r2, #0
 800c114:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d111      	bne.n	800c142 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	4618      	mov	r0, r3
 800c124:	f000 f84a 	bl	800c1bc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c128:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800c12c:	f7ff fefa 	bl	800bf24 <FLASH_WaitForLastOperation>
 800c130:	4603      	mov	r3, r0
 800c132:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800c134:	4b20      	ldr	r3, [pc, #128]	@ (800c1b8 <HAL_FLASHEx_Erase+0x130>)
 800c136:	695b      	ldr	r3, [r3, #20]
 800c138:	4a1f      	ldr	r2, [pc, #124]	@ (800c1b8 <HAL_FLASHEx_Erase+0x130>)
 800c13a:	f023 0304 	bic.w	r3, r3, #4
 800c13e:	6153      	str	r3, [r2, #20]
 800c140:	e02d      	b.n	800c19e <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	f04f 32ff 	mov.w	r2, #4294967295
 800c148:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	689b      	ldr	r3, [r3, #8]
 800c14e:	60bb      	str	r3, [r7, #8]
 800c150:	e01d      	b.n	800c18e <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	4619      	mov	r1, r3
 800c158:	68b8      	ldr	r0, [r7, #8]
 800c15a:	f000 f84d 	bl	800c1f8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c15e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800c162:	f7ff fedf 	bl	800bf24 <FLASH_WaitForLastOperation>
 800c166:	4603      	mov	r3, r0
 800c168:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800c16a:	4b13      	ldr	r3, [pc, #76]	@ (800c1b8 <HAL_FLASHEx_Erase+0x130>)
 800c16c:	695b      	ldr	r3, [r3, #20]
 800c16e:	4a12      	ldr	r2, [pc, #72]	@ (800c1b8 <HAL_FLASHEx_Erase+0x130>)
 800c170:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 800c174:	f023 0302 	bic.w	r3, r3, #2
 800c178:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800c17a:	7bfb      	ldrb	r3, [r7, #15]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d003      	beq.n	800c188 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	68ba      	ldr	r2, [r7, #8]
 800c184:	601a      	str	r2, [r3, #0]
          break;
 800c186:	e00a      	b.n	800c19e <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	3301      	adds	r3, #1
 800c18c:	60bb      	str	r3, [r7, #8]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	689a      	ldr	r2, [r3, #8]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	4413      	add	r3, r2
 800c198:	68ba      	ldr	r2, [r7, #8]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d3d9      	bcc.n	800c152 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800c19e:	f000 f84f 	bl	800c240 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c1a2:	4b04      	ldr	r3, [pc, #16]	@ (800c1b4 <HAL_FLASHEx_Erase+0x12c>)
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	701a      	strb	r2, [r3, #0]

  return status;
 800c1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	2000000c 	.word	0x2000000c
 800c1b8:	40022000 	.word	0x40022000

0800c1bc <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f003 0301 	and.w	r3, r3, #1
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d005      	beq.n	800c1da <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800c1ce:	4b09      	ldr	r3, [pc, #36]	@ (800c1f4 <FLASH_MassErase+0x38>)
 800c1d0:	695b      	ldr	r3, [r3, #20]
 800c1d2:	4a08      	ldr	r2, [pc, #32]	@ (800c1f4 <FLASH_MassErase+0x38>)
 800c1d4:	f043 0304 	orr.w	r3, r3, #4
 800c1d8:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800c1da:	4b06      	ldr	r3, [pc, #24]	@ (800c1f4 <FLASH_MassErase+0x38>)
 800c1dc:	695b      	ldr	r3, [r3, #20]
 800c1de:	4a05      	ldr	r2, [pc, #20]	@ (800c1f4 <FLASH_MassErase+0x38>)
 800c1e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c1e4:	6153      	str	r3, [r2, #20]
}
 800c1e6:	bf00      	nop
 800c1e8:	370c      	adds	r7, #12
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr
 800c1f2:	bf00      	nop
 800c1f4:	40022000 	.word	0x40022000

0800c1f8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800c202:	4b0e      	ldr	r3, [pc, #56]	@ (800c23c <FLASH_PageErase+0x44>)
 800c204:	695b      	ldr	r3, [r3, #20]
 800c206:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	00db      	lsls	r3, r3, #3
 800c20e:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800c212:	490a      	ldr	r1, [pc, #40]	@ (800c23c <FLASH_PageErase+0x44>)
 800c214:	4313      	orrs	r3, r2
 800c216:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800c218:	4b08      	ldr	r3, [pc, #32]	@ (800c23c <FLASH_PageErase+0x44>)
 800c21a:	695b      	ldr	r3, [r3, #20]
 800c21c:	4a07      	ldr	r2, [pc, #28]	@ (800c23c <FLASH_PageErase+0x44>)
 800c21e:	f043 0302 	orr.w	r3, r3, #2
 800c222:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800c224:	4b05      	ldr	r3, [pc, #20]	@ (800c23c <FLASH_PageErase+0x44>)
 800c226:	695b      	ldr	r3, [r3, #20]
 800c228:	4a04      	ldr	r2, [pc, #16]	@ (800c23c <FLASH_PageErase+0x44>)
 800c22a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c22e:	6153      	str	r3, [r2, #20]
}
 800c230:	bf00      	nop
 800c232:	370c      	adds	r7, #12
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr
 800c23c:	40022000 	.word	0x40022000

0800c240 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800c246:	4b21      	ldr	r3, [pc, #132]	@ (800c2cc <FLASH_FlushCaches+0x8c>)
 800c248:	7f1b      	ldrb	r3, [r3, #28]
 800c24a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800c24c:	79fb      	ldrb	r3, [r7, #7]
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d002      	beq.n	800c258 <FLASH_FlushCaches+0x18>
 800c252:	79fb      	ldrb	r3, [r7, #7]
 800c254:	2b03      	cmp	r3, #3
 800c256:	d117      	bne.n	800c288 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800c258:	4b1d      	ldr	r3, [pc, #116]	@ (800c2d0 <FLASH_FlushCaches+0x90>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4a1c      	ldr	r2, [pc, #112]	@ (800c2d0 <FLASH_FlushCaches+0x90>)
 800c25e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c262:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800c264:	4b1a      	ldr	r3, [pc, #104]	@ (800c2d0 <FLASH_FlushCaches+0x90>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a19      	ldr	r2, [pc, #100]	@ (800c2d0 <FLASH_FlushCaches+0x90>)
 800c26a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800c26e:	6013      	str	r3, [r2, #0]
 800c270:	4b17      	ldr	r3, [pc, #92]	@ (800c2d0 <FLASH_FlushCaches+0x90>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a16      	ldr	r2, [pc, #88]	@ (800c2d0 <FLASH_FlushCaches+0x90>)
 800c276:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c27a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c27c:	4b14      	ldr	r3, [pc, #80]	@ (800c2d0 <FLASH_FlushCaches+0x90>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a13      	ldr	r2, [pc, #76]	@ (800c2d0 <FLASH_FlushCaches+0x90>)
 800c282:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c286:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800c288:	79fb      	ldrb	r3, [r7, #7]
 800c28a:	2b02      	cmp	r3, #2
 800c28c:	d002      	beq.n	800c294 <FLASH_FlushCaches+0x54>
 800c28e:	79fb      	ldrb	r3, [r7, #7]
 800c290:	2b03      	cmp	r3, #3
 800c292:	d111      	bne.n	800c2b8 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800c294:	4b0e      	ldr	r3, [pc, #56]	@ (800c2d0 <FLASH_FlushCaches+0x90>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a0d      	ldr	r2, [pc, #52]	@ (800c2d0 <FLASH_FlushCaches+0x90>)
 800c29a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c29e:	6013      	str	r3, [r2, #0]
 800c2a0:	4b0b      	ldr	r3, [pc, #44]	@ (800c2d0 <FLASH_FlushCaches+0x90>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a0a      	ldr	r2, [pc, #40]	@ (800c2d0 <FLASH_FlushCaches+0x90>)
 800c2a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c2aa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800c2ac:	4b08      	ldr	r3, [pc, #32]	@ (800c2d0 <FLASH_FlushCaches+0x90>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a07      	ldr	r2, [pc, #28]	@ (800c2d0 <FLASH_FlushCaches+0x90>)
 800c2b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c2b6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800c2b8:	4b04      	ldr	r3, [pc, #16]	@ (800c2cc <FLASH_FlushCaches+0x8c>)
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	771a      	strb	r2, [r3, #28]
}
 800c2be:	bf00      	nop
 800c2c0:	370c      	adds	r7, #12
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr
 800c2ca:	bf00      	nop
 800c2cc:	2000000c 	.word	0x2000000c
 800c2d0:	40022000 	.word	0x40022000

0800c2d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b087      	sub	sp, #28
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c2e2:	e154      	b.n	800c58e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	2101      	movs	r1, #1
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	fa01 f303 	lsl.w	r3, r1, r3
 800c2f0:	4013      	ands	r3, r2
 800c2f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	f000 8146 	beq.w	800c588 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	f003 0303 	and.w	r3, r3, #3
 800c304:	2b01      	cmp	r3, #1
 800c306:	d005      	beq.n	800c314 <HAL_GPIO_Init+0x40>
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	f003 0303 	and.w	r3, r3, #3
 800c310:	2b02      	cmp	r3, #2
 800c312:	d130      	bne.n	800c376 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	689b      	ldr	r3, [r3, #8]
 800c318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	005b      	lsls	r3, r3, #1
 800c31e:	2203      	movs	r2, #3
 800c320:	fa02 f303 	lsl.w	r3, r2, r3
 800c324:	43db      	mvns	r3, r3
 800c326:	693a      	ldr	r2, [r7, #16]
 800c328:	4013      	ands	r3, r2
 800c32a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	68da      	ldr	r2, [r3, #12]
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	005b      	lsls	r3, r3, #1
 800c334:	fa02 f303 	lsl.w	r3, r2, r3
 800c338:	693a      	ldr	r2, [r7, #16]
 800c33a:	4313      	orrs	r3, r2
 800c33c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	693a      	ldr	r2, [r7, #16]
 800c342:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c34a:	2201      	movs	r2, #1
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	fa02 f303 	lsl.w	r3, r2, r3
 800c352:	43db      	mvns	r3, r3
 800c354:	693a      	ldr	r2, [r7, #16]
 800c356:	4013      	ands	r3, r2
 800c358:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	091b      	lsrs	r3, r3, #4
 800c360:	f003 0201 	and.w	r2, r3, #1
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	fa02 f303 	lsl.w	r3, r2, r3
 800c36a:	693a      	ldr	r2, [r7, #16]
 800c36c:	4313      	orrs	r3, r2
 800c36e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	693a      	ldr	r2, [r7, #16]
 800c374:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	f003 0303 	and.w	r3, r3, #3
 800c37e:	2b03      	cmp	r3, #3
 800c380:	d017      	beq.n	800c3b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	005b      	lsls	r3, r3, #1
 800c38c:	2203      	movs	r2, #3
 800c38e:	fa02 f303 	lsl.w	r3, r2, r3
 800c392:	43db      	mvns	r3, r3
 800c394:	693a      	ldr	r2, [r7, #16]
 800c396:	4013      	ands	r3, r2
 800c398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	689a      	ldr	r2, [r3, #8]
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	005b      	lsls	r3, r3, #1
 800c3a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c3a6:	693a      	ldr	r2, [r7, #16]
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	693a      	ldr	r2, [r7, #16]
 800c3b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	f003 0303 	and.w	r3, r3, #3
 800c3ba:	2b02      	cmp	r3, #2
 800c3bc:	d123      	bne.n	800c406 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	08da      	lsrs	r2, r3, #3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	3208      	adds	r2, #8
 800c3c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	f003 0307 	and.w	r3, r3, #7
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	220f      	movs	r2, #15
 800c3d6:	fa02 f303 	lsl.w	r3, r2, r3
 800c3da:	43db      	mvns	r3, r3
 800c3dc:	693a      	ldr	r2, [r7, #16]
 800c3de:	4013      	ands	r3, r2
 800c3e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	691a      	ldr	r2, [r3, #16]
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	f003 0307 	and.w	r3, r3, #7
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800c3f2:	693a      	ldr	r2, [r7, #16]
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	08da      	lsrs	r2, r3, #3
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	3208      	adds	r2, #8
 800c400:	6939      	ldr	r1, [r7, #16]
 800c402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	005b      	lsls	r3, r3, #1
 800c410:	2203      	movs	r2, #3
 800c412:	fa02 f303 	lsl.w	r3, r2, r3
 800c416:	43db      	mvns	r3, r3
 800c418:	693a      	ldr	r2, [r7, #16]
 800c41a:	4013      	ands	r3, r2
 800c41c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	f003 0203 	and.w	r2, r3, #3
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	005b      	lsls	r3, r3, #1
 800c42a:	fa02 f303 	lsl.w	r3, r2, r3
 800c42e:	693a      	ldr	r2, [r7, #16]
 800c430:	4313      	orrs	r3, r2
 800c432:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	693a      	ldr	r2, [r7, #16]
 800c438:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c442:	2b00      	cmp	r3, #0
 800c444:	f000 80a0 	beq.w	800c588 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c448:	4b58      	ldr	r3, [pc, #352]	@ (800c5ac <HAL_GPIO_Init+0x2d8>)
 800c44a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c44c:	4a57      	ldr	r2, [pc, #348]	@ (800c5ac <HAL_GPIO_Init+0x2d8>)
 800c44e:	f043 0301 	orr.w	r3, r3, #1
 800c452:	6613      	str	r3, [r2, #96]	@ 0x60
 800c454:	4b55      	ldr	r3, [pc, #340]	@ (800c5ac <HAL_GPIO_Init+0x2d8>)
 800c456:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c458:	f003 0301 	and.w	r3, r3, #1
 800c45c:	60bb      	str	r3, [r7, #8]
 800c45e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800c460:	4a53      	ldr	r2, [pc, #332]	@ (800c5b0 <HAL_GPIO_Init+0x2dc>)
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	089b      	lsrs	r3, r3, #2
 800c466:	3302      	adds	r3, #2
 800c468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c46c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	f003 0303 	and.w	r3, r3, #3
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	220f      	movs	r2, #15
 800c478:	fa02 f303 	lsl.w	r3, r2, r3
 800c47c:	43db      	mvns	r3, r3
 800c47e:	693a      	ldr	r2, [r7, #16]
 800c480:	4013      	ands	r3, r2
 800c482:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800c48a:	d019      	beq.n	800c4c0 <HAL_GPIO_Init+0x1ec>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	4a49      	ldr	r2, [pc, #292]	@ (800c5b4 <HAL_GPIO_Init+0x2e0>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d013      	beq.n	800c4bc <HAL_GPIO_Init+0x1e8>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	4a48      	ldr	r2, [pc, #288]	@ (800c5b8 <HAL_GPIO_Init+0x2e4>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d00d      	beq.n	800c4b8 <HAL_GPIO_Init+0x1e4>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	4a47      	ldr	r2, [pc, #284]	@ (800c5bc <HAL_GPIO_Init+0x2e8>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d007      	beq.n	800c4b4 <HAL_GPIO_Init+0x1e0>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	4a46      	ldr	r2, [pc, #280]	@ (800c5c0 <HAL_GPIO_Init+0x2ec>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d101      	bne.n	800c4b0 <HAL_GPIO_Init+0x1dc>
 800c4ac:	2304      	movs	r3, #4
 800c4ae:	e008      	b.n	800c4c2 <HAL_GPIO_Init+0x1ee>
 800c4b0:	2307      	movs	r3, #7
 800c4b2:	e006      	b.n	800c4c2 <HAL_GPIO_Init+0x1ee>
 800c4b4:	2303      	movs	r3, #3
 800c4b6:	e004      	b.n	800c4c2 <HAL_GPIO_Init+0x1ee>
 800c4b8:	2302      	movs	r3, #2
 800c4ba:	e002      	b.n	800c4c2 <HAL_GPIO_Init+0x1ee>
 800c4bc:	2301      	movs	r3, #1
 800c4be:	e000      	b.n	800c4c2 <HAL_GPIO_Init+0x1ee>
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	697a      	ldr	r2, [r7, #20]
 800c4c4:	f002 0203 	and.w	r2, r2, #3
 800c4c8:	0092      	lsls	r2, r2, #2
 800c4ca:	4093      	lsls	r3, r2
 800c4cc:	693a      	ldr	r2, [r7, #16]
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800c4d2:	4937      	ldr	r1, [pc, #220]	@ (800c5b0 <HAL_GPIO_Init+0x2dc>)
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	089b      	lsrs	r3, r3, #2
 800c4d8:	3302      	adds	r3, #2
 800c4da:	693a      	ldr	r2, [r7, #16]
 800c4dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c4e0:	4b38      	ldr	r3, [pc, #224]	@ (800c5c4 <HAL_GPIO_Init+0x2f0>)
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	43db      	mvns	r3, r3
 800c4ea:	693a      	ldr	r2, [r7, #16]
 800c4ec:	4013      	ands	r3, r2
 800c4ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d003      	beq.n	800c504 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800c4fc:	693a      	ldr	r2, [r7, #16]
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	4313      	orrs	r3, r2
 800c502:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c504:	4a2f      	ldr	r2, [pc, #188]	@ (800c5c4 <HAL_GPIO_Init+0x2f0>)
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c50a:	4b2e      	ldr	r3, [pc, #184]	@ (800c5c4 <HAL_GPIO_Init+0x2f0>)
 800c50c:	68db      	ldr	r3, [r3, #12]
 800c50e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	43db      	mvns	r3, r3
 800c514:	693a      	ldr	r2, [r7, #16]
 800c516:	4013      	ands	r3, r2
 800c518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c522:	2b00      	cmp	r3, #0
 800c524:	d003      	beq.n	800c52e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800c526:	693a      	ldr	r2, [r7, #16]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	4313      	orrs	r3, r2
 800c52c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c52e:	4a25      	ldr	r2, [pc, #148]	@ (800c5c4 <HAL_GPIO_Init+0x2f0>)
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800c534:	4b23      	ldr	r3, [pc, #140]	@ (800c5c4 <HAL_GPIO_Init+0x2f0>)
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	43db      	mvns	r3, r3
 800c53e:	693a      	ldr	r2, [r7, #16]
 800c540:	4013      	ands	r3, r2
 800c542:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d003      	beq.n	800c558 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800c550:	693a      	ldr	r2, [r7, #16]
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	4313      	orrs	r3, r2
 800c556:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c558:	4a1a      	ldr	r2, [pc, #104]	@ (800c5c4 <HAL_GPIO_Init+0x2f0>)
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800c55e:	4b19      	ldr	r3, [pc, #100]	@ (800c5c4 <HAL_GPIO_Init+0x2f0>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	43db      	mvns	r3, r3
 800c568:	693a      	ldr	r2, [r7, #16]
 800c56a:	4013      	ands	r3, r2
 800c56c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c576:	2b00      	cmp	r3, #0
 800c578:	d003      	beq.n	800c582 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800c57a:	693a      	ldr	r2, [r7, #16]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	4313      	orrs	r3, r2
 800c580:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c582:	4a10      	ldr	r2, [pc, #64]	@ (800c5c4 <HAL_GPIO_Init+0x2f0>)
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	3301      	adds	r3, #1
 800c58c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	fa22 f303 	lsr.w	r3, r2, r3
 800c598:	2b00      	cmp	r3, #0
 800c59a:	f47f aea3 	bne.w	800c2e4 <HAL_GPIO_Init+0x10>
  }
}
 800c59e:	bf00      	nop
 800c5a0:	bf00      	nop
 800c5a2:	371c      	adds	r7, #28
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr
 800c5ac:	40021000 	.word	0x40021000
 800c5b0:	40010000 	.word	0x40010000
 800c5b4:	48000400 	.word	0x48000400
 800c5b8:	48000800 	.word	0x48000800
 800c5bc:	48000c00 	.word	0x48000c00
 800c5c0:	48001000 	.word	0x48001000
 800c5c4:	40010400 	.word	0x40010400

0800c5c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b083      	sub	sp, #12
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	807b      	strh	r3, [r7, #2]
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c5d8:	787b      	ldrb	r3, [r7, #1]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d003      	beq.n	800c5e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c5de:	887a      	ldrh	r2, [r7, #2]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c5e4:	e002      	b.n	800c5ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c5e6:	887a      	ldrh	r2, [r7, #2]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c5ec:	bf00      	nop
 800c5ee:	370c      	adds	r7, #12
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d101      	bne.n	800c60a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800c606:	2301      	movs	r3, #1
 800c608:	e043      	b.n	800c692 <HAL_IWDG_Init+0x9a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800c612:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f245 5255 	movw	r2, #21845	@ 0x5555
 800c61c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	6852      	ldr	r2, [r2, #4]
 800c626:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	6892      	ldr	r2, [r2, #8]
 800c630:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800c632:	f7ff fa23 	bl	800ba7c <HAL_GetTick>
 800c636:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c638:	e011      	b.n	800c65e <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800c63a:	f7ff fa1f 	bl	800ba7c <HAL_GetTick>
 800c63e:	4602      	mov	r2, r0
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	1ad3      	subs	r3, r2, r3
 800c644:	f641 0201 	movw	r2, #6145	@ 0x1801
 800c648:	4293      	cmp	r3, r2
 800c64a:	d908      	bls.n	800c65e <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	68db      	ldr	r3, [r3, #12]
 800c652:	f003 0307 	and.w	r3, r3, #7
 800c656:	2b00      	cmp	r3, #0
 800c658:	d001      	beq.n	800c65e <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 800c65a:	2303      	movs	r3, #3
 800c65c:	e019      	b.n	800c692 <HAL_IWDG_Init+0x9a>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	f003 0307 	and.w	r3, r3, #7
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d1e6      	bne.n	800c63a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	691a      	ldr	r2, [r3, #16]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	429a      	cmp	r2, r3
 800c678:	d005      	beq.n	800c686 <HAL_IWDG_Init+0x8e>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	68d2      	ldr	r2, [r2, #12]
 800c682:	611a      	str	r2, [r3, #16]
 800c684:	e004      	b.n	800c690 <HAL_IWDG_Init+0x98>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800c68e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c690:	2300      	movs	r3, #0
}
 800c692:	4618      	mov	r0, r3
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800c69a:	b480      	push	{r7}
 800c69c:	b083      	sub	sp, #12
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800c6aa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c6ac:	2300      	movs	r3, #0
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	370c      	adds	r7, #12
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b8:	4770      	bx	lr
	...

0800c6bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800c6c0:	4b04      	ldr	r3, [pc, #16]	@ (800c6d4 <HAL_PWREx_GetVoltageRange+0x18>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	40007000 	.word	0x40007000

0800c6d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b085      	sub	sp, #20
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6e6:	d130      	bne.n	800c74a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800c6e8:	4b23      	ldr	r3, [pc, #140]	@ (800c778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c6f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6f4:	d038      	beq.n	800c768 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c6f6:	4b20      	ldr	r3, [pc, #128]	@ (800c778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c6fe:	4a1e      	ldr	r2, [pc, #120]	@ (800c778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c700:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c704:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c706:	4b1d      	ldr	r3, [pc, #116]	@ (800c77c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2232      	movs	r2, #50	@ 0x32
 800c70c:	fb02 f303 	mul.w	r3, r2, r3
 800c710:	4a1b      	ldr	r2, [pc, #108]	@ (800c780 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800c712:	fba2 2303 	umull	r2, r3, r2, r3
 800c716:	0c9b      	lsrs	r3, r3, #18
 800c718:	3301      	adds	r3, #1
 800c71a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c71c:	e002      	b.n	800c724 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	3b01      	subs	r3, #1
 800c722:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c724:	4b14      	ldr	r3, [pc, #80]	@ (800c778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c726:	695b      	ldr	r3, [r3, #20]
 800c728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c72c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c730:	d102      	bne.n	800c738 <HAL_PWREx_ControlVoltageScaling+0x60>
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d1f2      	bne.n	800c71e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c738:	4b0f      	ldr	r3, [pc, #60]	@ (800c778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c73a:	695b      	ldr	r3, [r3, #20]
 800c73c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c744:	d110      	bne.n	800c768 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800c746:	2303      	movs	r3, #3
 800c748:	e00f      	b.n	800c76a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800c74a:	4b0b      	ldr	r3, [pc, #44]	@ (800c778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c756:	d007      	beq.n	800c768 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c758:	4b07      	ldr	r3, [pc, #28]	@ (800c778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c760:	4a05      	ldr	r2, [pc, #20]	@ (800c778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c762:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c766:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800c768:	2300      	movs	r3, #0
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3714      	adds	r7, #20
 800c76e:	46bd      	mov	sp, r7
 800c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c774:	4770      	bx	lr
 800c776:	bf00      	nop
 800c778:	40007000 	.word	0x40007000
 800c77c:	20000000 	.word	0x20000000
 800c780:	431bde83 	.word	0x431bde83

0800c784 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b088      	sub	sp, #32
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d102      	bne.n	800c798 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c792:	2301      	movs	r3, #1
 800c794:	f000 bc02 	b.w	800cf9c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c798:	4b96      	ldr	r3, [pc, #600]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c79a:	689b      	ldr	r3, [r3, #8]
 800c79c:	f003 030c 	and.w	r3, r3, #12
 800c7a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c7a2:	4b94      	ldr	r3, [pc, #592]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	f003 0303 	and.w	r3, r3, #3
 800c7aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f003 0310 	and.w	r3, r3, #16
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f000 80e4 	beq.w	800c982 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c7ba:	69bb      	ldr	r3, [r7, #24]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d007      	beq.n	800c7d0 <HAL_RCC_OscConfig+0x4c>
 800c7c0:	69bb      	ldr	r3, [r7, #24]
 800c7c2:	2b0c      	cmp	r3, #12
 800c7c4:	f040 808b 	bne.w	800c8de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	f040 8087 	bne.w	800c8de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c7d0:	4b88      	ldr	r3, [pc, #544]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f003 0302 	and.w	r3, r3, #2
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d005      	beq.n	800c7e8 <HAL_RCC_OscConfig+0x64>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	699b      	ldr	r3, [r3, #24]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d101      	bne.n	800c7e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	e3d9      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6a1a      	ldr	r2, [r3, #32]
 800c7ec:	4b81      	ldr	r3, [pc, #516]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f003 0308 	and.w	r3, r3, #8
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d004      	beq.n	800c802 <HAL_RCC_OscConfig+0x7e>
 800c7f8:	4b7e      	ldr	r3, [pc, #504]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c800:	e005      	b.n	800c80e <HAL_RCC_OscConfig+0x8a>
 800c802:	4b7c      	ldr	r3, [pc, #496]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c808:	091b      	lsrs	r3, r3, #4
 800c80a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c80e:	4293      	cmp	r3, r2
 800c810:	d223      	bcs.n	800c85a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6a1b      	ldr	r3, [r3, #32]
 800c816:	4618      	mov	r0, r3
 800c818:	f000 fd8c 	bl	800d334 <RCC_SetFlashLatencyFromMSIRange>
 800c81c:	4603      	mov	r3, r0
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d001      	beq.n	800c826 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800c822:	2301      	movs	r3, #1
 800c824:	e3ba      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c826:	4b73      	ldr	r3, [pc, #460]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4a72      	ldr	r2, [pc, #456]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c82c:	f043 0308 	orr.w	r3, r3, #8
 800c830:	6013      	str	r3, [r2, #0]
 800c832:	4b70      	ldr	r3, [pc, #448]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6a1b      	ldr	r3, [r3, #32]
 800c83e:	496d      	ldr	r1, [pc, #436]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c840:	4313      	orrs	r3, r2
 800c842:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c844:	4b6b      	ldr	r3, [pc, #428]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	69db      	ldr	r3, [r3, #28]
 800c850:	021b      	lsls	r3, r3, #8
 800c852:	4968      	ldr	r1, [pc, #416]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c854:	4313      	orrs	r3, r2
 800c856:	604b      	str	r3, [r1, #4]
 800c858:	e025      	b.n	800c8a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c85a:	4b66      	ldr	r3, [pc, #408]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4a65      	ldr	r2, [pc, #404]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c860:	f043 0308 	orr.w	r3, r3, #8
 800c864:	6013      	str	r3, [r2, #0]
 800c866:	4b63      	ldr	r3, [pc, #396]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6a1b      	ldr	r3, [r3, #32]
 800c872:	4960      	ldr	r1, [pc, #384]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c874:	4313      	orrs	r3, r2
 800c876:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c878:	4b5e      	ldr	r3, [pc, #376]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	69db      	ldr	r3, [r3, #28]
 800c884:	021b      	lsls	r3, r3, #8
 800c886:	495b      	ldr	r1, [pc, #364]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c888:	4313      	orrs	r3, r2
 800c88a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c88c:	69bb      	ldr	r3, [r7, #24]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d109      	bne.n	800c8a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6a1b      	ldr	r3, [r3, #32]
 800c896:	4618      	mov	r0, r3
 800c898:	f000 fd4c 	bl	800d334 <RCC_SetFlashLatencyFromMSIRange>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d001      	beq.n	800c8a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e37a      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c8a6:	f000 fc81 	bl	800d1ac <HAL_RCC_GetSysClockFreq>
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	4b51      	ldr	r3, [pc, #324]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c8ae:	689b      	ldr	r3, [r3, #8]
 800c8b0:	091b      	lsrs	r3, r3, #4
 800c8b2:	f003 030f 	and.w	r3, r3, #15
 800c8b6:	4950      	ldr	r1, [pc, #320]	@ (800c9f8 <HAL_RCC_OscConfig+0x274>)
 800c8b8:	5ccb      	ldrb	r3, [r1, r3]
 800c8ba:	f003 031f 	and.w	r3, r3, #31
 800c8be:	fa22 f303 	lsr.w	r3, r2, r3
 800c8c2:	4a4e      	ldr	r2, [pc, #312]	@ (800c9fc <HAL_RCC_OscConfig+0x278>)
 800c8c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c8c6:	4b4e      	ldr	r3, [pc, #312]	@ (800ca00 <HAL_RCC_OscConfig+0x27c>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f7ff f886 	bl	800b9dc <HAL_InitTick>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800c8d4:	7bfb      	ldrb	r3, [r7, #15]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d052      	beq.n	800c980 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800c8da:	7bfb      	ldrb	r3, [r7, #15]
 800c8dc:	e35e      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	699b      	ldr	r3, [r3, #24]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d032      	beq.n	800c94c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c8e6:	4b43      	ldr	r3, [pc, #268]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a42      	ldr	r2, [pc, #264]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c8ec:	f043 0301 	orr.w	r3, r3, #1
 800c8f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c8f2:	f7ff f8c3 	bl	800ba7c <HAL_GetTick>
 800c8f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c8f8:	e008      	b.n	800c90c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c8fa:	f7ff f8bf 	bl	800ba7c <HAL_GetTick>
 800c8fe:	4602      	mov	r2, r0
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	1ad3      	subs	r3, r2, r3
 800c904:	2b02      	cmp	r3, #2
 800c906:	d901      	bls.n	800c90c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800c908:	2303      	movs	r3, #3
 800c90a:	e347      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c90c:	4b39      	ldr	r3, [pc, #228]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f003 0302 	and.w	r3, r3, #2
 800c914:	2b00      	cmp	r3, #0
 800c916:	d0f0      	beq.n	800c8fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c918:	4b36      	ldr	r3, [pc, #216]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a35      	ldr	r2, [pc, #212]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c91e:	f043 0308 	orr.w	r3, r3, #8
 800c922:	6013      	str	r3, [r2, #0]
 800c924:	4b33      	ldr	r3, [pc, #204]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6a1b      	ldr	r3, [r3, #32]
 800c930:	4930      	ldr	r1, [pc, #192]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c932:	4313      	orrs	r3, r2
 800c934:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c936:	4b2f      	ldr	r3, [pc, #188]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	69db      	ldr	r3, [r3, #28]
 800c942:	021b      	lsls	r3, r3, #8
 800c944:	492b      	ldr	r1, [pc, #172]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c946:	4313      	orrs	r3, r2
 800c948:	604b      	str	r3, [r1, #4]
 800c94a:	e01a      	b.n	800c982 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c94c:	4b29      	ldr	r3, [pc, #164]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a28      	ldr	r2, [pc, #160]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c952:	f023 0301 	bic.w	r3, r3, #1
 800c956:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c958:	f7ff f890 	bl	800ba7c <HAL_GetTick>
 800c95c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c95e:	e008      	b.n	800c972 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c960:	f7ff f88c 	bl	800ba7c <HAL_GetTick>
 800c964:	4602      	mov	r2, r0
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	1ad3      	subs	r3, r2, r3
 800c96a:	2b02      	cmp	r3, #2
 800c96c:	d901      	bls.n	800c972 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800c96e:	2303      	movs	r3, #3
 800c970:	e314      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c972:	4b20      	ldr	r3, [pc, #128]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f003 0302 	and.w	r3, r3, #2
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d1f0      	bne.n	800c960 <HAL_RCC_OscConfig+0x1dc>
 800c97e:	e000      	b.n	800c982 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c980:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f003 0301 	and.w	r3, r3, #1
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d073      	beq.n	800ca76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	2b08      	cmp	r3, #8
 800c992:	d005      	beq.n	800c9a0 <HAL_RCC_OscConfig+0x21c>
 800c994:	69bb      	ldr	r3, [r7, #24]
 800c996:	2b0c      	cmp	r3, #12
 800c998:	d10e      	bne.n	800c9b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	2b03      	cmp	r3, #3
 800c99e:	d10b      	bne.n	800c9b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c9a0:	4b14      	ldr	r3, [pc, #80]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d063      	beq.n	800ca74 <HAL_RCC_OscConfig+0x2f0>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d15f      	bne.n	800ca74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e2f1      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9c0:	d106      	bne.n	800c9d0 <HAL_RCC_OscConfig+0x24c>
 800c9c2:	4b0c      	ldr	r3, [pc, #48]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a0b      	ldr	r2, [pc, #44]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c9c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c9cc:	6013      	str	r3, [r2, #0]
 800c9ce:	e025      	b.n	800ca1c <HAL_RCC_OscConfig+0x298>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c9d8:	d114      	bne.n	800ca04 <HAL_RCC_OscConfig+0x280>
 800c9da:	4b06      	ldr	r3, [pc, #24]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	4a05      	ldr	r2, [pc, #20]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c9e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c9e4:	6013      	str	r3, [r2, #0]
 800c9e6:	4b03      	ldr	r3, [pc, #12]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a02      	ldr	r2, [pc, #8]	@ (800c9f4 <HAL_RCC_OscConfig+0x270>)
 800c9ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c9f0:	6013      	str	r3, [r2, #0]
 800c9f2:	e013      	b.n	800ca1c <HAL_RCC_OscConfig+0x298>
 800c9f4:	40021000 	.word	0x40021000
 800c9f8:	0800fedc 	.word	0x0800fedc
 800c9fc:	20000000 	.word	0x20000000
 800ca00:	20000004 	.word	0x20000004
 800ca04:	4ba0      	ldr	r3, [pc, #640]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a9f      	ldr	r2, [pc, #636]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800ca0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ca0e:	6013      	str	r3, [r2, #0]
 800ca10:	4b9d      	ldr	r3, [pc, #628]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a9c      	ldr	r2, [pc, #624]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800ca16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ca1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d013      	beq.n	800ca4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca24:	f7ff f82a 	bl	800ba7c <HAL_GetTick>
 800ca28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ca2a:	e008      	b.n	800ca3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca2c:	f7ff f826 	bl	800ba7c <HAL_GetTick>
 800ca30:	4602      	mov	r2, r0
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	1ad3      	subs	r3, r2, r3
 800ca36:	2b64      	cmp	r3, #100	@ 0x64
 800ca38:	d901      	bls.n	800ca3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800ca3a:	2303      	movs	r3, #3
 800ca3c:	e2ae      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ca3e:	4b92      	ldr	r3, [pc, #584]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d0f0      	beq.n	800ca2c <HAL_RCC_OscConfig+0x2a8>
 800ca4a:	e014      	b.n	800ca76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca4c:	f7ff f816 	bl	800ba7c <HAL_GetTick>
 800ca50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ca52:	e008      	b.n	800ca66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca54:	f7ff f812 	bl	800ba7c <HAL_GetTick>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	1ad3      	subs	r3, r2, r3
 800ca5e:	2b64      	cmp	r3, #100	@ 0x64
 800ca60:	d901      	bls.n	800ca66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ca62:	2303      	movs	r3, #3
 800ca64:	e29a      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ca66:	4b88      	ldr	r3, [pc, #544]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1f0      	bne.n	800ca54 <HAL_RCC_OscConfig+0x2d0>
 800ca72:	e000      	b.n	800ca76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f003 0302 	and.w	r3, r3, #2
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d060      	beq.n	800cb44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	2b04      	cmp	r3, #4
 800ca86:	d005      	beq.n	800ca94 <HAL_RCC_OscConfig+0x310>
 800ca88:	69bb      	ldr	r3, [r7, #24]
 800ca8a:	2b0c      	cmp	r3, #12
 800ca8c:	d119      	bne.n	800cac2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	2b02      	cmp	r3, #2
 800ca92:	d116      	bne.n	800cac2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ca94:	4b7c      	ldr	r3, [pc, #496]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d005      	beq.n	800caac <HAL_RCC_OscConfig+0x328>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d101      	bne.n	800caac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800caa8:	2301      	movs	r3, #1
 800caaa:	e277      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800caac:	4b76      	ldr	r3, [pc, #472]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	691b      	ldr	r3, [r3, #16]
 800cab8:	061b      	lsls	r3, r3, #24
 800caba:	4973      	ldr	r1, [pc, #460]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cabc:	4313      	orrs	r3, r2
 800cabe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cac0:	e040      	b.n	800cb44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	68db      	ldr	r3, [r3, #12]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d023      	beq.n	800cb12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800caca:	4b6f      	ldr	r3, [pc, #444]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	4a6e      	ldr	r2, [pc, #440]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cad6:	f7fe ffd1 	bl	800ba7c <HAL_GetTick>
 800cada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cadc:	e008      	b.n	800caf0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cade:	f7fe ffcd 	bl	800ba7c <HAL_GetTick>
 800cae2:	4602      	mov	r2, r0
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	1ad3      	subs	r3, r2, r3
 800cae8:	2b02      	cmp	r3, #2
 800caea:	d901      	bls.n	800caf0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800caec:	2303      	movs	r3, #3
 800caee:	e255      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800caf0:	4b65      	ldr	r3, [pc, #404]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d0f0      	beq.n	800cade <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cafc:	4b62      	ldr	r3, [pc, #392]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	691b      	ldr	r3, [r3, #16]
 800cb08:	061b      	lsls	r3, r3, #24
 800cb0a:	495f      	ldr	r1, [pc, #380]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	604b      	str	r3, [r1, #4]
 800cb10:	e018      	b.n	800cb44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cb12:	4b5d      	ldr	r3, [pc, #372]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a5c      	ldr	r2, [pc, #368]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cb18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb1e:	f7fe ffad 	bl	800ba7c <HAL_GetTick>
 800cb22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cb24:	e008      	b.n	800cb38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cb26:	f7fe ffa9 	bl	800ba7c <HAL_GetTick>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	1ad3      	subs	r3, r2, r3
 800cb30:	2b02      	cmp	r3, #2
 800cb32:	d901      	bls.n	800cb38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800cb34:	2303      	movs	r3, #3
 800cb36:	e231      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cb38:	4b53      	ldr	r3, [pc, #332]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d1f0      	bne.n	800cb26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f003 0308 	and.w	r3, r3, #8
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d03c      	beq.n	800cbca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	695b      	ldr	r3, [r3, #20]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d01c      	beq.n	800cb92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cb58:	4b4b      	ldr	r3, [pc, #300]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cb5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cb5e:	4a4a      	ldr	r2, [pc, #296]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cb60:	f043 0301 	orr.w	r3, r3, #1
 800cb64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb68:	f7fe ff88 	bl	800ba7c <HAL_GetTick>
 800cb6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cb6e:	e008      	b.n	800cb82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb70:	f7fe ff84 	bl	800ba7c <HAL_GetTick>
 800cb74:	4602      	mov	r2, r0
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	1ad3      	subs	r3, r2, r3
 800cb7a:	2b02      	cmp	r3, #2
 800cb7c:	d901      	bls.n	800cb82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800cb7e:	2303      	movs	r3, #3
 800cb80:	e20c      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cb82:	4b41      	ldr	r3, [pc, #260]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cb84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cb88:	f003 0302 	and.w	r3, r3, #2
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d0ef      	beq.n	800cb70 <HAL_RCC_OscConfig+0x3ec>
 800cb90:	e01b      	b.n	800cbca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cb92:	4b3d      	ldr	r3, [pc, #244]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cb94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cb98:	4a3b      	ldr	r2, [pc, #236]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cb9a:	f023 0301 	bic.w	r3, r3, #1
 800cb9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cba2:	f7fe ff6b 	bl	800ba7c <HAL_GetTick>
 800cba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cba8:	e008      	b.n	800cbbc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cbaa:	f7fe ff67 	bl	800ba7c <HAL_GetTick>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	1ad3      	subs	r3, r2, r3
 800cbb4:	2b02      	cmp	r3, #2
 800cbb6:	d901      	bls.n	800cbbc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800cbb8:	2303      	movs	r3, #3
 800cbba:	e1ef      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cbbc:	4b32      	ldr	r3, [pc, #200]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cbbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cbc2:	f003 0302 	and.w	r3, r3, #2
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d1ef      	bne.n	800cbaa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f003 0304 	and.w	r3, r3, #4
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	f000 80a6 	beq.w	800cd24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800cbdc:	4b2a      	ldr	r3, [pc, #168]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cbde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cbe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d10d      	bne.n	800cc04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cbe8:	4b27      	ldr	r3, [pc, #156]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cbea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cbec:	4a26      	ldr	r2, [pc, #152]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cbee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cbf2:	6593      	str	r3, [r2, #88]	@ 0x58
 800cbf4:	4b24      	ldr	r3, [pc, #144]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cbf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cbf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cbfc:	60bb      	str	r3, [r7, #8]
 800cbfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cc00:	2301      	movs	r3, #1
 800cc02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cc04:	4b21      	ldr	r3, [pc, #132]	@ (800cc8c <HAL_RCC_OscConfig+0x508>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d118      	bne.n	800cc42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cc10:	4b1e      	ldr	r3, [pc, #120]	@ (800cc8c <HAL_RCC_OscConfig+0x508>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a1d      	ldr	r2, [pc, #116]	@ (800cc8c <HAL_RCC_OscConfig+0x508>)
 800cc16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cc1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cc1c:	f7fe ff2e 	bl	800ba7c <HAL_GetTick>
 800cc20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cc22:	e008      	b.n	800cc36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc24:	f7fe ff2a 	bl	800ba7c <HAL_GetTick>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	1ad3      	subs	r3, r2, r3
 800cc2e:	2b02      	cmp	r3, #2
 800cc30:	d901      	bls.n	800cc36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800cc32:	2303      	movs	r3, #3
 800cc34:	e1b2      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cc36:	4b15      	ldr	r3, [pc, #84]	@ (800cc8c <HAL_RCC_OscConfig+0x508>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d0f0      	beq.n	800cc24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	689b      	ldr	r3, [r3, #8]
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d108      	bne.n	800cc5c <HAL_RCC_OscConfig+0x4d8>
 800cc4a:	4b0f      	ldr	r3, [pc, #60]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cc4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc50:	4a0d      	ldr	r2, [pc, #52]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cc52:	f043 0301 	orr.w	r3, r3, #1
 800cc56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cc5a:	e029      	b.n	800ccb0 <HAL_RCC_OscConfig+0x52c>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	689b      	ldr	r3, [r3, #8]
 800cc60:	2b05      	cmp	r3, #5
 800cc62:	d115      	bne.n	800cc90 <HAL_RCC_OscConfig+0x50c>
 800cc64:	4b08      	ldr	r3, [pc, #32]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cc66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc6a:	4a07      	ldr	r2, [pc, #28]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cc6c:	f043 0304 	orr.w	r3, r3, #4
 800cc70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cc74:	4b04      	ldr	r3, [pc, #16]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cc76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc7a:	4a03      	ldr	r2, [pc, #12]	@ (800cc88 <HAL_RCC_OscConfig+0x504>)
 800cc7c:	f043 0301 	orr.w	r3, r3, #1
 800cc80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cc84:	e014      	b.n	800ccb0 <HAL_RCC_OscConfig+0x52c>
 800cc86:	bf00      	nop
 800cc88:	40021000 	.word	0x40021000
 800cc8c:	40007000 	.word	0x40007000
 800cc90:	4b9a      	ldr	r3, [pc, #616]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800cc92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc96:	4a99      	ldr	r2, [pc, #612]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800cc98:	f023 0301 	bic.w	r3, r3, #1
 800cc9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cca0:	4b96      	ldr	r3, [pc, #600]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800cca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cca6:	4a95      	ldr	r2, [pc, #596]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800cca8:	f023 0304 	bic.w	r3, r3, #4
 800ccac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	689b      	ldr	r3, [r3, #8]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d016      	beq.n	800cce6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccb8:	f7fe fee0 	bl	800ba7c <HAL_GetTick>
 800ccbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ccbe:	e00a      	b.n	800ccd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ccc0:	f7fe fedc 	bl	800ba7c <HAL_GetTick>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	1ad3      	subs	r3, r2, r3
 800ccca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d901      	bls.n	800ccd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800ccd2:	2303      	movs	r3, #3
 800ccd4:	e162      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ccd6:	4b89      	ldr	r3, [pc, #548]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800ccd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccdc:	f003 0302 	and.w	r3, r3, #2
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d0ed      	beq.n	800ccc0 <HAL_RCC_OscConfig+0x53c>
 800cce4:	e015      	b.n	800cd12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cce6:	f7fe fec9 	bl	800ba7c <HAL_GetTick>
 800ccea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ccec:	e00a      	b.n	800cd04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ccee:	f7fe fec5 	bl	800ba7c <HAL_GetTick>
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	1ad3      	subs	r3, r2, r3
 800ccf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d901      	bls.n	800cd04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800cd00:	2303      	movs	r3, #3
 800cd02:	e14b      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cd04:	4b7d      	ldr	r3, [pc, #500]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800cd06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd0a:	f003 0302 	and.w	r3, r3, #2
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d1ed      	bne.n	800ccee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cd12:	7ffb      	ldrb	r3, [r7, #31]
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d105      	bne.n	800cd24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cd18:	4b78      	ldr	r3, [pc, #480]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800cd1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd1c:	4a77      	ldr	r2, [pc, #476]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800cd1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cd22:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f003 0320 	and.w	r3, r3, #32
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d03c      	beq.n	800cdaa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d01c      	beq.n	800cd72 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cd38:	4b70      	ldr	r3, [pc, #448]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800cd3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cd3e:	4a6f      	ldr	r2, [pc, #444]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800cd40:	f043 0301 	orr.w	r3, r3, #1
 800cd44:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd48:	f7fe fe98 	bl	800ba7c <HAL_GetTick>
 800cd4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cd4e:	e008      	b.n	800cd62 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cd50:	f7fe fe94 	bl	800ba7c <HAL_GetTick>
 800cd54:	4602      	mov	r2, r0
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	1ad3      	subs	r3, r2, r3
 800cd5a:	2b02      	cmp	r3, #2
 800cd5c:	d901      	bls.n	800cd62 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800cd5e:	2303      	movs	r3, #3
 800cd60:	e11c      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cd62:	4b66      	ldr	r3, [pc, #408]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800cd64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cd68:	f003 0302 	and.w	r3, r3, #2
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d0ef      	beq.n	800cd50 <HAL_RCC_OscConfig+0x5cc>
 800cd70:	e01b      	b.n	800cdaa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cd72:	4b62      	ldr	r3, [pc, #392]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800cd74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cd78:	4a60      	ldr	r2, [pc, #384]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800cd7a:	f023 0301 	bic.w	r3, r3, #1
 800cd7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd82:	f7fe fe7b 	bl	800ba7c <HAL_GetTick>
 800cd86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cd88:	e008      	b.n	800cd9c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cd8a:	f7fe fe77 	bl	800ba7c <HAL_GetTick>
 800cd8e:	4602      	mov	r2, r0
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	1ad3      	subs	r3, r2, r3
 800cd94:	2b02      	cmp	r3, #2
 800cd96:	d901      	bls.n	800cd9c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800cd98:	2303      	movs	r3, #3
 800cd9a:	e0ff      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cd9c:	4b57      	ldr	r3, [pc, #348]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800cd9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cda2:	f003 0302 	and.w	r3, r3, #2
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d1ef      	bne.n	800cd8a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	f000 80f3 	beq.w	800cf9a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdb8:	2b02      	cmp	r3, #2
 800cdba:	f040 80c9 	bne.w	800cf50 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800cdbe:	4b4f      	ldr	r3, [pc, #316]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	f003 0203 	and.w	r2, r3, #3
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d12c      	bne.n	800ce2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cddc:	3b01      	subs	r3, #1
 800cdde:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d123      	bne.n	800ce2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d11b      	bne.n	800ce2c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdfe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d113      	bne.n	800ce2c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce0e:	085b      	lsrs	r3, r3, #1
 800ce10:	3b01      	subs	r3, #1
 800ce12:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d109      	bne.n	800ce2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce22:	085b      	lsrs	r3, r3, #1
 800ce24:	3b01      	subs	r3, #1
 800ce26:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d06b      	beq.n	800cf04 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	2b0c      	cmp	r3, #12
 800ce30:	d062      	beq.n	800cef8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ce32:	4b32      	ldr	r3, [pc, #200]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d001      	beq.n	800ce42 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	e0ac      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ce42:	4b2e      	ldr	r3, [pc, #184]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4a2d      	ldr	r2, [pc, #180]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800ce48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ce4c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ce4e:	f7fe fe15 	bl	800ba7c <HAL_GetTick>
 800ce52:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ce54:	e008      	b.n	800ce68 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce56:	f7fe fe11 	bl	800ba7c <HAL_GetTick>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	1ad3      	subs	r3, r2, r3
 800ce60:	2b02      	cmp	r3, #2
 800ce62:	d901      	bls.n	800ce68 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800ce64:	2303      	movs	r3, #3
 800ce66:	e099      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ce68:	4b24      	ldr	r3, [pc, #144]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d1f0      	bne.n	800ce56 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ce74:	4b21      	ldr	r3, [pc, #132]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800ce76:	68da      	ldr	r2, [r3, #12]
 800ce78:	4b21      	ldr	r3, [pc, #132]	@ (800cf00 <HAL_RCC_OscConfig+0x77c>)
 800ce7a:	4013      	ands	r3, r2
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ce84:	3a01      	subs	r2, #1
 800ce86:	0112      	lsls	r2, r2, #4
 800ce88:	4311      	orrs	r1, r2
 800ce8a:	687a      	ldr	r2, [r7, #4]
 800ce8c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ce8e:	0212      	lsls	r2, r2, #8
 800ce90:	4311      	orrs	r1, r2
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ce96:	0852      	lsrs	r2, r2, #1
 800ce98:	3a01      	subs	r2, #1
 800ce9a:	0552      	lsls	r2, r2, #21
 800ce9c:	4311      	orrs	r1, r2
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800cea2:	0852      	lsrs	r2, r2, #1
 800cea4:	3a01      	subs	r2, #1
 800cea6:	0652      	lsls	r2, r2, #25
 800cea8:	4311      	orrs	r1, r2
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ceae:	06d2      	lsls	r2, r2, #27
 800ceb0:	430a      	orrs	r2, r1
 800ceb2:	4912      	ldr	r1, [pc, #72]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ceb8:	4b10      	ldr	r3, [pc, #64]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4a0f      	ldr	r2, [pc, #60]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800cebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cec2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cec4:	4b0d      	ldr	r3, [pc, #52]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800cec6:	68db      	ldr	r3, [r3, #12]
 800cec8:	4a0c      	ldr	r2, [pc, #48]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800ceca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cece:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ced0:	f7fe fdd4 	bl	800ba7c <HAL_GetTick>
 800ced4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ced6:	e008      	b.n	800ceea <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ced8:	f7fe fdd0 	bl	800ba7c <HAL_GetTick>
 800cedc:	4602      	mov	r2, r0
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	1ad3      	subs	r3, r2, r3
 800cee2:	2b02      	cmp	r3, #2
 800cee4:	d901      	bls.n	800ceea <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800cee6:	2303      	movs	r3, #3
 800cee8:	e058      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ceea:	4b04      	ldr	r3, [pc, #16]	@ (800cefc <HAL_RCC_OscConfig+0x778>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d0f0      	beq.n	800ced8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800cef6:	e050      	b.n	800cf9a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800cef8:	2301      	movs	r3, #1
 800cefa:	e04f      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
 800cefc:	40021000 	.word	0x40021000
 800cf00:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cf04:	4b27      	ldr	r3, [pc, #156]	@ (800cfa4 <HAL_RCC_OscConfig+0x820>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d144      	bne.n	800cf9a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800cf10:	4b24      	ldr	r3, [pc, #144]	@ (800cfa4 <HAL_RCC_OscConfig+0x820>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a23      	ldr	r2, [pc, #140]	@ (800cfa4 <HAL_RCC_OscConfig+0x820>)
 800cf16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cf1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cf1c:	4b21      	ldr	r3, [pc, #132]	@ (800cfa4 <HAL_RCC_OscConfig+0x820>)
 800cf1e:	68db      	ldr	r3, [r3, #12]
 800cf20:	4a20      	ldr	r2, [pc, #128]	@ (800cfa4 <HAL_RCC_OscConfig+0x820>)
 800cf22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cf26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cf28:	f7fe fda8 	bl	800ba7c <HAL_GetTick>
 800cf2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cf2e:	e008      	b.n	800cf42 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf30:	f7fe fda4 	bl	800ba7c <HAL_GetTick>
 800cf34:	4602      	mov	r2, r0
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	1ad3      	subs	r3, r2, r3
 800cf3a:	2b02      	cmp	r3, #2
 800cf3c:	d901      	bls.n	800cf42 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800cf3e:	2303      	movs	r3, #3
 800cf40:	e02c      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cf42:	4b18      	ldr	r3, [pc, #96]	@ (800cfa4 <HAL_RCC_OscConfig+0x820>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d0f0      	beq.n	800cf30 <HAL_RCC_OscConfig+0x7ac>
 800cf4e:	e024      	b.n	800cf9a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800cf50:	69bb      	ldr	r3, [r7, #24]
 800cf52:	2b0c      	cmp	r3, #12
 800cf54:	d01f      	beq.n	800cf96 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf56:	4b13      	ldr	r3, [pc, #76]	@ (800cfa4 <HAL_RCC_OscConfig+0x820>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a12      	ldr	r2, [pc, #72]	@ (800cfa4 <HAL_RCC_OscConfig+0x820>)
 800cf5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cf60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf62:	f7fe fd8b 	bl	800ba7c <HAL_GetTick>
 800cf66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cf68:	e008      	b.n	800cf7c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf6a:	f7fe fd87 	bl	800ba7c <HAL_GetTick>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	1ad3      	subs	r3, r2, r3
 800cf74:	2b02      	cmp	r3, #2
 800cf76:	d901      	bls.n	800cf7c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800cf78:	2303      	movs	r3, #3
 800cf7a:	e00f      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cf7c:	4b09      	ldr	r3, [pc, #36]	@ (800cfa4 <HAL_RCC_OscConfig+0x820>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d1f0      	bne.n	800cf6a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800cf88:	4b06      	ldr	r3, [pc, #24]	@ (800cfa4 <HAL_RCC_OscConfig+0x820>)
 800cf8a:	68da      	ldr	r2, [r3, #12]
 800cf8c:	4905      	ldr	r1, [pc, #20]	@ (800cfa4 <HAL_RCC_OscConfig+0x820>)
 800cf8e:	4b06      	ldr	r3, [pc, #24]	@ (800cfa8 <HAL_RCC_OscConfig+0x824>)
 800cf90:	4013      	ands	r3, r2
 800cf92:	60cb      	str	r3, [r1, #12]
 800cf94:	e001      	b.n	800cf9a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800cf96:	2301      	movs	r3, #1
 800cf98:	e000      	b.n	800cf9c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800cf9a:	2300      	movs	r3, #0
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3720      	adds	r7, #32
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	40021000 	.word	0x40021000
 800cfa8:	feeefffc 	.word	0xfeeefffc

0800cfac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d101      	bne.n	800cfc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e0e7      	b.n	800d190 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cfc0:	4b75      	ldr	r3, [pc, #468]	@ (800d198 <HAL_RCC_ClockConfig+0x1ec>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f003 0307 	and.w	r3, r3, #7
 800cfc8:	683a      	ldr	r2, [r7, #0]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d910      	bls.n	800cff0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cfce:	4b72      	ldr	r3, [pc, #456]	@ (800d198 <HAL_RCC_ClockConfig+0x1ec>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f023 0207 	bic.w	r2, r3, #7
 800cfd6:	4970      	ldr	r1, [pc, #448]	@ (800d198 <HAL_RCC_ClockConfig+0x1ec>)
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cfde:	4b6e      	ldr	r3, [pc, #440]	@ (800d198 <HAL_RCC_ClockConfig+0x1ec>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f003 0307 	and.w	r3, r3, #7
 800cfe6:	683a      	ldr	r2, [r7, #0]
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d001      	beq.n	800cff0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800cfec:	2301      	movs	r3, #1
 800cfee:	e0cf      	b.n	800d190 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f003 0302 	and.w	r3, r3, #2
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d010      	beq.n	800d01e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	689a      	ldr	r2, [r3, #8]
 800d000:	4b66      	ldr	r3, [pc, #408]	@ (800d19c <HAL_RCC_ClockConfig+0x1f0>)
 800d002:	689b      	ldr	r3, [r3, #8]
 800d004:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d008:	429a      	cmp	r2, r3
 800d00a:	d908      	bls.n	800d01e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d00c:	4b63      	ldr	r3, [pc, #396]	@ (800d19c <HAL_RCC_ClockConfig+0x1f0>)
 800d00e:	689b      	ldr	r3, [r3, #8]
 800d010:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	689b      	ldr	r3, [r3, #8]
 800d018:	4960      	ldr	r1, [pc, #384]	@ (800d19c <HAL_RCC_ClockConfig+0x1f0>)
 800d01a:	4313      	orrs	r3, r2
 800d01c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f003 0301 	and.w	r3, r3, #1
 800d026:	2b00      	cmp	r3, #0
 800d028:	d04c      	beq.n	800d0c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	2b03      	cmp	r3, #3
 800d030:	d107      	bne.n	800d042 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d032:	4b5a      	ldr	r3, [pc, #360]	@ (800d19c <HAL_RCC_ClockConfig+0x1f0>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d121      	bne.n	800d082 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800d03e:	2301      	movs	r3, #1
 800d040:	e0a6      	b.n	800d190 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	2b02      	cmp	r3, #2
 800d048:	d107      	bne.n	800d05a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d04a:	4b54      	ldr	r3, [pc, #336]	@ (800d19c <HAL_RCC_ClockConfig+0x1f0>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d052:	2b00      	cmp	r3, #0
 800d054:	d115      	bne.n	800d082 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800d056:	2301      	movs	r3, #1
 800d058:	e09a      	b.n	800d190 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d107      	bne.n	800d072 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d062:	4b4e      	ldr	r3, [pc, #312]	@ (800d19c <HAL_RCC_ClockConfig+0x1f0>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f003 0302 	and.w	r3, r3, #2
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d109      	bne.n	800d082 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800d06e:	2301      	movs	r3, #1
 800d070:	e08e      	b.n	800d190 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d072:	4b4a      	ldr	r3, [pc, #296]	@ (800d19c <HAL_RCC_ClockConfig+0x1f0>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d101      	bne.n	800d082 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800d07e:	2301      	movs	r3, #1
 800d080:	e086      	b.n	800d190 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d082:	4b46      	ldr	r3, [pc, #280]	@ (800d19c <HAL_RCC_ClockConfig+0x1f0>)
 800d084:	689b      	ldr	r3, [r3, #8]
 800d086:	f023 0203 	bic.w	r2, r3, #3
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	685b      	ldr	r3, [r3, #4]
 800d08e:	4943      	ldr	r1, [pc, #268]	@ (800d19c <HAL_RCC_ClockConfig+0x1f0>)
 800d090:	4313      	orrs	r3, r2
 800d092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d094:	f7fe fcf2 	bl	800ba7c <HAL_GetTick>
 800d098:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d09a:	e00a      	b.n	800d0b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d09c:	f7fe fcee 	bl	800ba7c <HAL_GetTick>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	1ad3      	subs	r3, r2, r3
 800d0a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d901      	bls.n	800d0b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800d0ae:	2303      	movs	r3, #3
 800d0b0:	e06e      	b.n	800d190 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d0b2:	4b3a      	ldr	r3, [pc, #232]	@ (800d19c <HAL_RCC_ClockConfig+0x1f0>)
 800d0b4:	689b      	ldr	r3, [r3, #8]
 800d0b6:	f003 020c 	and.w	r2, r3, #12
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d1eb      	bne.n	800d09c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f003 0302 	and.w	r3, r3, #2
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d010      	beq.n	800d0f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	689a      	ldr	r2, [r3, #8]
 800d0d4:	4b31      	ldr	r3, [pc, #196]	@ (800d19c <HAL_RCC_ClockConfig+0x1f0>)
 800d0d6:	689b      	ldr	r3, [r3, #8]
 800d0d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d208      	bcs.n	800d0f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d0e0:	4b2e      	ldr	r3, [pc, #184]	@ (800d19c <HAL_RCC_ClockConfig+0x1f0>)
 800d0e2:	689b      	ldr	r3, [r3, #8]
 800d0e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	689b      	ldr	r3, [r3, #8]
 800d0ec:	492b      	ldr	r1, [pc, #172]	@ (800d19c <HAL_RCC_ClockConfig+0x1f0>)
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d0f2:	4b29      	ldr	r3, [pc, #164]	@ (800d198 <HAL_RCC_ClockConfig+0x1ec>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f003 0307 	and.w	r3, r3, #7
 800d0fa:	683a      	ldr	r2, [r7, #0]
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d210      	bcs.n	800d122 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d100:	4b25      	ldr	r3, [pc, #148]	@ (800d198 <HAL_RCC_ClockConfig+0x1ec>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f023 0207 	bic.w	r2, r3, #7
 800d108:	4923      	ldr	r1, [pc, #140]	@ (800d198 <HAL_RCC_ClockConfig+0x1ec>)
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	4313      	orrs	r3, r2
 800d10e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d110:	4b21      	ldr	r3, [pc, #132]	@ (800d198 <HAL_RCC_ClockConfig+0x1ec>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f003 0307 	and.w	r3, r3, #7
 800d118:	683a      	ldr	r2, [r7, #0]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d001      	beq.n	800d122 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800d11e:	2301      	movs	r3, #1
 800d120:	e036      	b.n	800d190 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f003 0304 	and.w	r3, r3, #4
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d008      	beq.n	800d140 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d12e:	4b1b      	ldr	r3, [pc, #108]	@ (800d19c <HAL_RCC_ClockConfig+0x1f0>)
 800d130:	689b      	ldr	r3, [r3, #8]
 800d132:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	4918      	ldr	r1, [pc, #96]	@ (800d19c <HAL_RCC_ClockConfig+0x1f0>)
 800d13c:	4313      	orrs	r3, r2
 800d13e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f003 0308 	and.w	r3, r3, #8
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d009      	beq.n	800d160 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d14c:	4b13      	ldr	r3, [pc, #76]	@ (800d19c <HAL_RCC_ClockConfig+0x1f0>)
 800d14e:	689b      	ldr	r3, [r3, #8]
 800d150:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	691b      	ldr	r3, [r3, #16]
 800d158:	00db      	lsls	r3, r3, #3
 800d15a:	4910      	ldr	r1, [pc, #64]	@ (800d19c <HAL_RCC_ClockConfig+0x1f0>)
 800d15c:	4313      	orrs	r3, r2
 800d15e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d160:	f000 f824 	bl	800d1ac <HAL_RCC_GetSysClockFreq>
 800d164:	4602      	mov	r2, r0
 800d166:	4b0d      	ldr	r3, [pc, #52]	@ (800d19c <HAL_RCC_ClockConfig+0x1f0>)
 800d168:	689b      	ldr	r3, [r3, #8]
 800d16a:	091b      	lsrs	r3, r3, #4
 800d16c:	f003 030f 	and.w	r3, r3, #15
 800d170:	490b      	ldr	r1, [pc, #44]	@ (800d1a0 <HAL_RCC_ClockConfig+0x1f4>)
 800d172:	5ccb      	ldrb	r3, [r1, r3]
 800d174:	f003 031f 	and.w	r3, r3, #31
 800d178:	fa22 f303 	lsr.w	r3, r2, r3
 800d17c:	4a09      	ldr	r2, [pc, #36]	@ (800d1a4 <HAL_RCC_ClockConfig+0x1f8>)
 800d17e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d180:	4b09      	ldr	r3, [pc, #36]	@ (800d1a8 <HAL_RCC_ClockConfig+0x1fc>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4618      	mov	r0, r3
 800d186:	f7fe fc29 	bl	800b9dc <HAL_InitTick>
 800d18a:	4603      	mov	r3, r0
 800d18c:	72fb      	strb	r3, [r7, #11]

  return status;
 800d18e:	7afb      	ldrb	r3, [r7, #11]
}
 800d190:	4618      	mov	r0, r3
 800d192:	3710      	adds	r7, #16
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	40022000 	.word	0x40022000
 800d19c:	40021000 	.word	0x40021000
 800d1a0:	0800fedc 	.word	0x0800fedc
 800d1a4:	20000000 	.word	0x20000000
 800d1a8:	20000004 	.word	0x20000004

0800d1ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b089      	sub	sp, #36	@ 0x24
 800d1b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	61fb      	str	r3, [r7, #28]
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d1ba:	4b3e      	ldr	r3, [pc, #248]	@ (800d2b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800d1bc:	689b      	ldr	r3, [r3, #8]
 800d1be:	f003 030c 	and.w	r3, r3, #12
 800d1c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d1c4:	4b3b      	ldr	r3, [pc, #236]	@ (800d2b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	f003 0303 	and.w	r3, r3, #3
 800d1cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d005      	beq.n	800d1e0 <HAL_RCC_GetSysClockFreq+0x34>
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	2b0c      	cmp	r3, #12
 800d1d8:	d121      	bne.n	800d21e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d11e      	bne.n	800d21e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800d1e0:	4b34      	ldr	r3, [pc, #208]	@ (800d2b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f003 0308 	and.w	r3, r3, #8
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d107      	bne.n	800d1fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800d1ec:	4b31      	ldr	r3, [pc, #196]	@ (800d2b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800d1ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d1f2:	0a1b      	lsrs	r3, r3, #8
 800d1f4:	f003 030f 	and.w	r3, r3, #15
 800d1f8:	61fb      	str	r3, [r7, #28]
 800d1fa:	e005      	b.n	800d208 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800d1fc:	4b2d      	ldr	r3, [pc, #180]	@ (800d2b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	091b      	lsrs	r3, r3, #4
 800d202:	f003 030f 	and.w	r3, r3, #15
 800d206:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d208:	4a2b      	ldr	r2, [pc, #172]	@ (800d2b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800d20a:	69fb      	ldr	r3, [r7, #28]
 800d20c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d210:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d10d      	bne.n	800d234 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d21c:	e00a      	b.n	800d234 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	2b04      	cmp	r3, #4
 800d222:	d102      	bne.n	800d22a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d224:	4b25      	ldr	r3, [pc, #148]	@ (800d2bc <HAL_RCC_GetSysClockFreq+0x110>)
 800d226:	61bb      	str	r3, [r7, #24]
 800d228:	e004      	b.n	800d234 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	2b08      	cmp	r3, #8
 800d22e:	d101      	bne.n	800d234 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d230:	4b23      	ldr	r3, [pc, #140]	@ (800d2c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800d232:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	2b0c      	cmp	r3, #12
 800d238:	d134      	bne.n	800d2a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d23a:	4b1e      	ldr	r3, [pc, #120]	@ (800d2b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800d23c:	68db      	ldr	r3, [r3, #12]
 800d23e:	f003 0303 	and.w	r3, r3, #3
 800d242:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	2b02      	cmp	r3, #2
 800d248:	d003      	beq.n	800d252 <HAL_RCC_GetSysClockFreq+0xa6>
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	2b03      	cmp	r3, #3
 800d24e:	d003      	beq.n	800d258 <HAL_RCC_GetSysClockFreq+0xac>
 800d250:	e005      	b.n	800d25e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800d252:	4b1a      	ldr	r3, [pc, #104]	@ (800d2bc <HAL_RCC_GetSysClockFreq+0x110>)
 800d254:	617b      	str	r3, [r7, #20]
      break;
 800d256:	e005      	b.n	800d264 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800d258:	4b19      	ldr	r3, [pc, #100]	@ (800d2c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800d25a:	617b      	str	r3, [r7, #20]
      break;
 800d25c:	e002      	b.n	800d264 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800d25e:	69fb      	ldr	r3, [r7, #28]
 800d260:	617b      	str	r3, [r7, #20]
      break;
 800d262:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d264:	4b13      	ldr	r3, [pc, #76]	@ (800d2b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800d266:	68db      	ldr	r3, [r3, #12]
 800d268:	091b      	lsrs	r3, r3, #4
 800d26a:	f003 0307 	and.w	r3, r3, #7
 800d26e:	3301      	adds	r3, #1
 800d270:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800d272:	4b10      	ldr	r3, [pc, #64]	@ (800d2b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	0a1b      	lsrs	r3, r3, #8
 800d278:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d27c:	697a      	ldr	r2, [r7, #20]
 800d27e:	fb03 f202 	mul.w	r2, r3, r2
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	fbb2 f3f3 	udiv	r3, r2, r3
 800d288:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d28a:	4b0a      	ldr	r3, [pc, #40]	@ (800d2b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800d28c:	68db      	ldr	r3, [r3, #12]
 800d28e:	0e5b      	lsrs	r3, r3, #25
 800d290:	f003 0303 	and.w	r3, r3, #3
 800d294:	3301      	adds	r3, #1
 800d296:	005b      	lsls	r3, r3, #1
 800d298:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800d29a:	697a      	ldr	r2, [r7, #20]
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800d2a4:	69bb      	ldr	r3, [r7, #24]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3724      	adds	r7, #36	@ 0x24
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr
 800d2b2:	bf00      	nop
 800d2b4:	40021000 	.word	0x40021000
 800d2b8:	0800fef4 	.word	0x0800fef4
 800d2bc:	00f42400 	.word	0x00f42400
 800d2c0:	007a1200 	.word	0x007a1200

0800d2c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d2c8:	4b03      	ldr	r3, [pc, #12]	@ (800d2d8 <HAL_RCC_GetHCLKFreq+0x14>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d4:	4770      	bx	lr
 800d2d6:	bf00      	nop
 800d2d8:	20000000 	.word	0x20000000

0800d2dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d2e0:	f7ff fff0 	bl	800d2c4 <HAL_RCC_GetHCLKFreq>
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	4b06      	ldr	r3, [pc, #24]	@ (800d300 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d2e8:	689b      	ldr	r3, [r3, #8]
 800d2ea:	0a1b      	lsrs	r3, r3, #8
 800d2ec:	f003 0307 	and.w	r3, r3, #7
 800d2f0:	4904      	ldr	r1, [pc, #16]	@ (800d304 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d2f2:	5ccb      	ldrb	r3, [r1, r3]
 800d2f4:	f003 031f 	and.w	r3, r3, #31
 800d2f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	40021000 	.word	0x40021000
 800d304:	0800feec 	.word	0x0800feec

0800d308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d30c:	f7ff ffda 	bl	800d2c4 <HAL_RCC_GetHCLKFreq>
 800d310:	4602      	mov	r2, r0
 800d312:	4b06      	ldr	r3, [pc, #24]	@ (800d32c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d314:	689b      	ldr	r3, [r3, #8]
 800d316:	0adb      	lsrs	r3, r3, #11
 800d318:	f003 0307 	and.w	r3, r3, #7
 800d31c:	4904      	ldr	r1, [pc, #16]	@ (800d330 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d31e:	5ccb      	ldrb	r3, [r1, r3]
 800d320:	f003 031f 	and.w	r3, r3, #31
 800d324:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d328:	4618      	mov	r0, r3
 800d32a:	bd80      	pop	{r7, pc}
 800d32c:	40021000 	.word	0x40021000
 800d330:	0800feec 	.word	0x0800feec

0800d334 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b086      	sub	sp, #24
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800d33c:	2300      	movs	r3, #0
 800d33e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d340:	4b2a      	ldr	r3, [pc, #168]	@ (800d3ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d003      	beq.n	800d354 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800d34c:	f7ff f9b6 	bl	800c6bc <HAL_PWREx_GetVoltageRange>
 800d350:	6178      	str	r0, [r7, #20]
 800d352:	e014      	b.n	800d37e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800d354:	4b25      	ldr	r3, [pc, #148]	@ (800d3ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d358:	4a24      	ldr	r2, [pc, #144]	@ (800d3ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d35a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d35e:	6593      	str	r3, [r2, #88]	@ 0x58
 800d360:	4b22      	ldr	r3, [pc, #136]	@ (800d3ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d368:	60fb      	str	r3, [r7, #12]
 800d36a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800d36c:	f7ff f9a6 	bl	800c6bc <HAL_PWREx_GetVoltageRange>
 800d370:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800d372:	4b1e      	ldr	r3, [pc, #120]	@ (800d3ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d376:	4a1d      	ldr	r2, [pc, #116]	@ (800d3ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d378:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d37c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d384:	d10b      	bne.n	800d39e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2b80      	cmp	r3, #128	@ 0x80
 800d38a:	d919      	bls.n	800d3c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2ba0      	cmp	r3, #160	@ 0xa0
 800d390:	d902      	bls.n	800d398 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800d392:	2302      	movs	r3, #2
 800d394:	613b      	str	r3, [r7, #16]
 800d396:	e013      	b.n	800d3c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d398:	2301      	movs	r3, #1
 800d39a:	613b      	str	r3, [r7, #16]
 800d39c:	e010      	b.n	800d3c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2b80      	cmp	r3, #128	@ 0x80
 800d3a2:	d902      	bls.n	800d3aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800d3a4:	2303      	movs	r3, #3
 800d3a6:	613b      	str	r3, [r7, #16]
 800d3a8:	e00a      	b.n	800d3c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2b80      	cmp	r3, #128	@ 0x80
 800d3ae:	d102      	bne.n	800d3b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800d3b0:	2302      	movs	r3, #2
 800d3b2:	613b      	str	r3, [r7, #16]
 800d3b4:	e004      	b.n	800d3c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2b70      	cmp	r3, #112	@ 0x70
 800d3ba:	d101      	bne.n	800d3c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d3bc:	2301      	movs	r3, #1
 800d3be:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d3c0:	4b0b      	ldr	r3, [pc, #44]	@ (800d3f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f023 0207 	bic.w	r2, r3, #7
 800d3c8:	4909      	ldr	r1, [pc, #36]	@ (800d3f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800d3d0:	4b07      	ldr	r3, [pc, #28]	@ (800d3f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f003 0307 	and.w	r3, r3, #7
 800d3d8:	693a      	ldr	r2, [r7, #16]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d001      	beq.n	800d3e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800d3de:	2301      	movs	r3, #1
 800d3e0:	e000      	b.n	800d3e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800d3e2:	2300      	movs	r3, #0
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3718      	adds	r7, #24
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	40021000 	.word	0x40021000
 800d3f0:	40022000 	.word	0x40022000

0800d3f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b086      	sub	sp, #24
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d400:	2300      	movs	r3, #0
 800d402:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d031      	beq.n	800d474 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d414:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d418:	d01a      	beq.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800d41a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d41e:	d814      	bhi.n	800d44a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d420:	2b00      	cmp	r3, #0
 800d422:	d009      	beq.n	800d438 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800d424:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d428:	d10f      	bne.n	800d44a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800d42a:	4b5d      	ldr	r3, [pc, #372]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	4a5c      	ldr	r2, [pc, #368]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d434:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d436:	e00c      	b.n	800d452 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	3304      	adds	r3, #4
 800d43c:	2100      	movs	r1, #0
 800d43e:	4618      	mov	r0, r3
 800d440:	f000 f9f0 	bl	800d824 <RCCEx_PLLSAI1_Config>
 800d444:	4603      	mov	r3, r0
 800d446:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d448:	e003      	b.n	800d452 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d44a:	2301      	movs	r3, #1
 800d44c:	74fb      	strb	r3, [r7, #19]
      break;
 800d44e:	e000      	b.n	800d452 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800d450:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d452:	7cfb      	ldrb	r3, [r7, #19]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d10b      	bne.n	800d470 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d458:	4b51      	ldr	r3, [pc, #324]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d45a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d45e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d466:	494e      	ldr	r1, [pc, #312]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d468:	4313      	orrs	r3, r2
 800d46a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800d46e:	e001      	b.n	800d474 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d470:	7cfb      	ldrb	r3, [r7, #19]
 800d472:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	f000 809e 	beq.w	800d5be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d482:	2300      	movs	r3, #0
 800d484:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d486:	4b46      	ldr	r3, [pc, #280]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d48a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d101      	bne.n	800d496 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800d492:	2301      	movs	r3, #1
 800d494:	e000      	b.n	800d498 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800d496:	2300      	movs	r3, #0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d00d      	beq.n	800d4b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d49c:	4b40      	ldr	r3, [pc, #256]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d49e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4a0:	4a3f      	ldr	r2, [pc, #252]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d4a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d4a6:	6593      	str	r3, [r2, #88]	@ 0x58
 800d4a8:	4b3d      	ldr	r3, [pc, #244]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d4aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d4b0:	60bb      	str	r3, [r7, #8]
 800d4b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d4b8:	4b3a      	ldr	r3, [pc, #232]	@ (800d5a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4a39      	ldr	r2, [pc, #228]	@ (800d5a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800d4be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d4c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d4c4:	f7fe fada 	bl	800ba7c <HAL_GetTick>
 800d4c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d4ca:	e009      	b.n	800d4e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d4cc:	f7fe fad6 	bl	800ba7c <HAL_GetTick>
 800d4d0:	4602      	mov	r2, r0
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	1ad3      	subs	r3, r2, r3
 800d4d6:	2b02      	cmp	r3, #2
 800d4d8:	d902      	bls.n	800d4e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800d4da:	2303      	movs	r3, #3
 800d4dc:	74fb      	strb	r3, [r7, #19]
        break;
 800d4de:	e005      	b.n	800d4ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d4e0:	4b30      	ldr	r3, [pc, #192]	@ (800d5a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d0ef      	beq.n	800d4cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800d4ec:	7cfb      	ldrb	r3, [r7, #19]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d15a      	bne.n	800d5a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d4f2:	4b2b      	ldr	r3, [pc, #172]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d4f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d4fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d01e      	beq.n	800d542 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d508:	697a      	ldr	r2, [r7, #20]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d019      	beq.n	800d542 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d50e:	4b24      	ldr	r3, [pc, #144]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d518:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d51a:	4b21      	ldr	r3, [pc, #132]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d520:	4a1f      	ldr	r2, [pc, #124]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d526:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d52a:	4b1d      	ldr	r3, [pc, #116]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d530:	4a1b      	ldr	r2, [pc, #108]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d536:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d53a:	4a19      	ldr	r2, [pc, #100]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	f003 0301 	and.w	r3, r3, #1
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d016      	beq.n	800d57a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d54c:	f7fe fa96 	bl	800ba7c <HAL_GetTick>
 800d550:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d552:	e00b      	b.n	800d56c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d554:	f7fe fa92 	bl	800ba7c <HAL_GetTick>
 800d558:	4602      	mov	r2, r0
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	1ad3      	subs	r3, r2, r3
 800d55e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d562:	4293      	cmp	r3, r2
 800d564:	d902      	bls.n	800d56c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800d566:	2303      	movs	r3, #3
 800d568:	74fb      	strb	r3, [r7, #19]
            break;
 800d56a:	e006      	b.n	800d57a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d56c:	4b0c      	ldr	r3, [pc, #48]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d56e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d572:	f003 0302 	and.w	r3, r3, #2
 800d576:	2b00      	cmp	r3, #0
 800d578:	d0ec      	beq.n	800d554 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800d57a:	7cfb      	ldrb	r3, [r7, #19]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d10b      	bne.n	800d598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d580:	4b07      	ldr	r3, [pc, #28]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d586:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d58e:	4904      	ldr	r1, [pc, #16]	@ (800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d590:	4313      	orrs	r3, r2
 800d592:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800d596:	e009      	b.n	800d5ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d598:	7cfb      	ldrb	r3, [r7, #19]
 800d59a:	74bb      	strb	r3, [r7, #18]
 800d59c:	e006      	b.n	800d5ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800d59e:	bf00      	nop
 800d5a0:	40021000 	.word	0x40021000
 800d5a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5a8:	7cfb      	ldrb	r3, [r7, #19]
 800d5aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d5ac:	7c7b      	ldrb	r3, [r7, #17]
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d105      	bne.n	800d5be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d5b2:	4b9b      	ldr	r3, [pc, #620]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d5b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5b6:	4a9a      	ldr	r2, [pc, #616]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d5b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d5bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f003 0301 	and.w	r3, r3, #1
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d00a      	beq.n	800d5e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d5ca:	4b95      	ldr	r3, [pc, #596]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d5cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d5d0:	f023 0203 	bic.w	r2, r3, #3
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6a1b      	ldr	r3, [r3, #32]
 800d5d8:	4991      	ldr	r1, [pc, #580]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d5da:	4313      	orrs	r3, r2
 800d5dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f003 0302 	and.w	r3, r3, #2
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d00a      	beq.n	800d602 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d5ec:	4b8c      	ldr	r3, [pc, #560]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d5ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d5f2:	f023 020c 	bic.w	r2, r3, #12
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5fa:	4989      	ldr	r1, [pc, #548]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f003 0304 	and.w	r3, r3, #4
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d00a      	beq.n	800d624 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d60e:	4b84      	ldr	r3, [pc, #528]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d614:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d61c:	4980      	ldr	r1, [pc, #512]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d61e:	4313      	orrs	r3, r2
 800d620:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f003 0320 	and.w	r3, r3, #32
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d00a      	beq.n	800d646 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d630:	4b7b      	ldr	r3, [pc, #492]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d636:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d63e:	4978      	ldr	r1, [pc, #480]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d640:	4313      	orrs	r3, r2
 800d642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d00a      	beq.n	800d668 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d652:	4b73      	ldr	r3, [pc, #460]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d658:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d660:	496f      	ldr	r1, [pc, #444]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d662:	4313      	orrs	r3, r2
 800d664:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d670:	2b00      	cmp	r3, #0
 800d672:	d00a      	beq.n	800d68a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d674:	4b6a      	ldr	r3, [pc, #424]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d67a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d682:	4967      	ldr	r1, [pc, #412]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d684:	4313      	orrs	r3, r2
 800d686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00a      	beq.n	800d6ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d696:	4b62      	ldr	r3, [pc, #392]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d69c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6a4:	495e      	ldr	r1, [pc, #376]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00a      	beq.n	800d6ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d6b8:	4b59      	ldr	r3, [pc, #356]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d6ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d6be:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6c6:	4956      	ldr	r1, [pc, #344]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d00a      	beq.n	800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d6da:	4b51      	ldr	r3, [pc, #324]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d6dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d6e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6e8:	494d      	ldr	r1, [pc, #308]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d028      	beq.n	800d74e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d6fc:	4b48      	ldr	r3, [pc, #288]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d6fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d702:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d70a:	4945      	ldr	r1, [pc, #276]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d70c:	4313      	orrs	r3, r2
 800d70e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d716:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d71a:	d106      	bne.n	800d72a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d71c:	4b40      	ldr	r3, [pc, #256]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d71e:	68db      	ldr	r3, [r3, #12]
 800d720:	4a3f      	ldr	r2, [pc, #252]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d722:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d726:	60d3      	str	r3, [r2, #12]
 800d728:	e011      	b.n	800d74e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d72e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d732:	d10c      	bne.n	800d74e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	3304      	adds	r3, #4
 800d738:	2101      	movs	r1, #1
 800d73a:	4618      	mov	r0, r3
 800d73c:	f000 f872 	bl	800d824 <RCCEx_PLLSAI1_Config>
 800d740:	4603      	mov	r3, r0
 800d742:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d744:	7cfb      	ldrb	r3, [r7, #19]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d001      	beq.n	800d74e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800d74a:	7cfb      	ldrb	r3, [r7, #19]
 800d74c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d756:	2b00      	cmp	r3, #0
 800d758:	d028      	beq.n	800d7ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d75a:	4b31      	ldr	r3, [pc, #196]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d75c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d760:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d768:	492d      	ldr	r1, [pc, #180]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d76a:	4313      	orrs	r3, r2
 800d76c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d774:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d778:	d106      	bne.n	800d788 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d77a:	4b29      	ldr	r3, [pc, #164]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	4a28      	ldr	r2, [pc, #160]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d780:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d784:	60d3      	str	r3, [r2, #12]
 800d786:	e011      	b.n	800d7ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d78c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d790:	d10c      	bne.n	800d7ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	3304      	adds	r3, #4
 800d796:	2101      	movs	r1, #1
 800d798:	4618      	mov	r0, r3
 800d79a:	f000 f843 	bl	800d824 <RCCEx_PLLSAI1_Config>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d7a2:	7cfb      	ldrb	r3, [r7, #19]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d001      	beq.n	800d7ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800d7a8:	7cfb      	ldrb	r3, [r7, #19]
 800d7aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d01c      	beq.n	800d7f2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d7b8:	4b19      	ldr	r3, [pc, #100]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d7ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d7be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7c6:	4916      	ldr	r1, [pc, #88]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d7c8:	4313      	orrs	r3, r2
 800d7ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d7d6:	d10c      	bne.n	800d7f2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	3304      	adds	r3, #4
 800d7dc:	2102      	movs	r1, #2
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f000 f820 	bl	800d824 <RCCEx_PLLSAI1_Config>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d7e8:	7cfb      	ldrb	r3, [r7, #19]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d001      	beq.n	800d7f2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800d7ee:	7cfb      	ldrb	r3, [r7, #19]
 800d7f0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d00a      	beq.n	800d814 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d7fe:	4b08      	ldr	r3, [pc, #32]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d804:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d80c:	4904      	ldr	r1, [pc, #16]	@ (800d820 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800d80e:	4313      	orrs	r3, r2
 800d810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800d814:	7cbb      	ldrb	r3, [r7, #18]
}
 800d816:	4618      	mov	r0, r3
 800d818:	3718      	adds	r7, #24
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	40021000 	.word	0x40021000

0800d824 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b084      	sub	sp, #16
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d82e:	2300      	movs	r3, #0
 800d830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d832:	4b74      	ldr	r3, [pc, #464]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d834:	68db      	ldr	r3, [r3, #12]
 800d836:	f003 0303 	and.w	r3, r3, #3
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d018      	beq.n	800d870 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800d83e:	4b71      	ldr	r3, [pc, #452]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d840:	68db      	ldr	r3, [r3, #12]
 800d842:	f003 0203 	and.w	r2, r3, #3
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d10d      	bne.n	800d86a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
       ||
 800d852:	2b00      	cmp	r3, #0
 800d854:	d009      	beq.n	800d86a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800d856:	4b6b      	ldr	r3, [pc, #428]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d858:	68db      	ldr	r3, [r3, #12]
 800d85a:	091b      	lsrs	r3, r3, #4
 800d85c:	f003 0307 	and.w	r3, r3, #7
 800d860:	1c5a      	adds	r2, r3, #1
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	685b      	ldr	r3, [r3, #4]
       ||
 800d866:	429a      	cmp	r2, r3
 800d868:	d047      	beq.n	800d8fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d86a:	2301      	movs	r3, #1
 800d86c:	73fb      	strb	r3, [r7, #15]
 800d86e:	e044      	b.n	800d8fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	2b03      	cmp	r3, #3
 800d876:	d018      	beq.n	800d8aa <RCCEx_PLLSAI1_Config+0x86>
 800d878:	2b03      	cmp	r3, #3
 800d87a:	d825      	bhi.n	800d8c8 <RCCEx_PLLSAI1_Config+0xa4>
 800d87c:	2b01      	cmp	r3, #1
 800d87e:	d002      	beq.n	800d886 <RCCEx_PLLSAI1_Config+0x62>
 800d880:	2b02      	cmp	r3, #2
 800d882:	d009      	beq.n	800d898 <RCCEx_PLLSAI1_Config+0x74>
 800d884:	e020      	b.n	800d8c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d886:	4b5f      	ldr	r3, [pc, #380]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f003 0302 	and.w	r3, r3, #2
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d11d      	bne.n	800d8ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800d892:	2301      	movs	r3, #1
 800d894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d896:	e01a      	b.n	800d8ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d898:	4b5a      	ldr	r3, [pc, #360]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d116      	bne.n	800d8d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d8a8:	e013      	b.n	800d8d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d8aa:	4b56      	ldr	r3, [pc, #344]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d10f      	bne.n	800d8d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d8b6:	4b53      	ldr	r3, [pc, #332]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d109      	bne.n	800d8d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d8c6:	e006      	b.n	800d8d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	73fb      	strb	r3, [r7, #15]
      break;
 800d8cc:	e004      	b.n	800d8d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d8ce:	bf00      	nop
 800d8d0:	e002      	b.n	800d8d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d8d2:	bf00      	nop
 800d8d4:	e000      	b.n	800d8d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d8d6:	bf00      	nop
    }

    if(status == HAL_OK)
 800d8d8:	7bfb      	ldrb	r3, [r7, #15]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d10d      	bne.n	800d8fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d8de:	4b49      	ldr	r3, [pc, #292]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6819      	ldr	r1, [r3, #0]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	3b01      	subs	r3, #1
 800d8f0:	011b      	lsls	r3, r3, #4
 800d8f2:	430b      	orrs	r3, r1
 800d8f4:	4943      	ldr	r1, [pc, #268]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d8fa:	7bfb      	ldrb	r3, [r7, #15]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d17c      	bne.n	800d9fa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800d900:	4b40      	ldr	r3, [pc, #256]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4a3f      	ldr	r2, [pc, #252]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d906:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d90a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d90c:	f7fe f8b6 	bl	800ba7c <HAL_GetTick>
 800d910:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d912:	e009      	b.n	800d928 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d914:	f7fe f8b2 	bl	800ba7c <HAL_GetTick>
 800d918:	4602      	mov	r2, r0
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	1ad3      	subs	r3, r2, r3
 800d91e:	2b02      	cmp	r3, #2
 800d920:	d902      	bls.n	800d928 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d922:	2303      	movs	r3, #3
 800d924:	73fb      	strb	r3, [r7, #15]
        break;
 800d926:	e005      	b.n	800d934 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d928:	4b36      	ldr	r3, [pc, #216]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d930:	2b00      	cmp	r3, #0
 800d932:	d1ef      	bne.n	800d914 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d934:	7bfb      	ldrb	r3, [r7, #15]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d15f      	bne.n	800d9fa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d110      	bne.n	800d962 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d940:	4b30      	ldr	r3, [pc, #192]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d942:	691b      	ldr	r3, [r3, #16]
 800d944:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800d948:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	6892      	ldr	r2, [r2, #8]
 800d950:	0211      	lsls	r1, r2, #8
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	68d2      	ldr	r2, [r2, #12]
 800d956:	06d2      	lsls	r2, r2, #27
 800d958:	430a      	orrs	r2, r1
 800d95a:	492a      	ldr	r1, [pc, #168]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d95c:	4313      	orrs	r3, r2
 800d95e:	610b      	str	r3, [r1, #16]
 800d960:	e027      	b.n	800d9b2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	2b01      	cmp	r3, #1
 800d966:	d112      	bne.n	800d98e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d968:	4b26      	ldr	r3, [pc, #152]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d96a:	691b      	ldr	r3, [r3, #16]
 800d96c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800d970:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	6892      	ldr	r2, [r2, #8]
 800d978:	0211      	lsls	r1, r2, #8
 800d97a:	687a      	ldr	r2, [r7, #4]
 800d97c:	6912      	ldr	r2, [r2, #16]
 800d97e:	0852      	lsrs	r2, r2, #1
 800d980:	3a01      	subs	r2, #1
 800d982:	0552      	lsls	r2, r2, #21
 800d984:	430a      	orrs	r2, r1
 800d986:	491f      	ldr	r1, [pc, #124]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d988:	4313      	orrs	r3, r2
 800d98a:	610b      	str	r3, [r1, #16]
 800d98c:	e011      	b.n	800d9b2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d98e:	4b1d      	ldr	r3, [pc, #116]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d990:	691b      	ldr	r3, [r3, #16]
 800d992:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800d996:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800d99a:	687a      	ldr	r2, [r7, #4]
 800d99c:	6892      	ldr	r2, [r2, #8]
 800d99e:	0211      	lsls	r1, r2, #8
 800d9a0:	687a      	ldr	r2, [r7, #4]
 800d9a2:	6952      	ldr	r2, [r2, #20]
 800d9a4:	0852      	lsrs	r2, r2, #1
 800d9a6:	3a01      	subs	r2, #1
 800d9a8:	0652      	lsls	r2, r2, #25
 800d9aa:	430a      	orrs	r2, r1
 800d9ac:	4915      	ldr	r1, [pc, #84]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800d9b2:	4b14      	ldr	r3, [pc, #80]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	4a13      	ldr	r2, [pc, #76]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d9b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d9bc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9be:	f7fe f85d 	bl	800ba7c <HAL_GetTick>
 800d9c2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d9c4:	e009      	b.n	800d9da <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d9c6:	f7fe f859 	bl	800ba7c <HAL_GetTick>
 800d9ca:	4602      	mov	r2, r0
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	1ad3      	subs	r3, r2, r3
 800d9d0:	2b02      	cmp	r3, #2
 800d9d2:	d902      	bls.n	800d9da <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800d9d4:	2303      	movs	r3, #3
 800d9d6:	73fb      	strb	r3, [r7, #15]
          break;
 800d9d8:	e005      	b.n	800d9e6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d9da:	4b0a      	ldr	r3, [pc, #40]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d0ef      	beq.n	800d9c6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800d9e6:	7bfb      	ldrb	r3, [r7, #15]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d106      	bne.n	800d9fa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800d9ec:	4b05      	ldr	r3, [pc, #20]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d9ee:	691a      	ldr	r2, [r3, #16]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	699b      	ldr	r3, [r3, #24]
 800d9f4:	4903      	ldr	r1, [pc, #12]	@ (800da04 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800d9fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3710      	adds	r7, #16
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}
 800da04:	40021000 	.word	0x40021000

0800da08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d101      	bne.n	800da1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800da16:	2301      	movs	r3, #1
 800da18:	e049      	b.n	800daae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800da20:	b2db      	uxtb	r3, r3
 800da22:	2b00      	cmp	r3, #0
 800da24:	d106      	bne.n	800da34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2200      	movs	r2, #0
 800da2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f7fd fe3c 	bl	800b6ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2202      	movs	r2, #2
 800da38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	3304      	adds	r3, #4
 800da44:	4619      	mov	r1, r3
 800da46:	4610      	mov	r0, r2
 800da48:	f000 fab0 	bl	800dfac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2201      	movs	r2, #1
 800da50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2201      	movs	r2, #1
 800da58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2201      	movs	r2, #1
 800da60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2201      	movs	r2, #1
 800da68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2201      	movs	r2, #1
 800da70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2201      	movs	r2, #1
 800da78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2201      	movs	r2, #1
 800da80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2201      	movs	r2, #1
 800da88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2201      	movs	r2, #1
 800da90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2201      	movs	r2, #1
 800da98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2201      	movs	r2, #1
 800daa0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2201      	movs	r2, #1
 800daa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800daac:	2300      	movs	r3, #0
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3708      	adds	r7, #8
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
	...

0800dab8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d109      	bne.n	800dadc <HAL_TIM_PWM_Start+0x24>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dace:	b2db      	uxtb	r3, r3
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	bf14      	ite	ne
 800dad4:	2301      	movne	r3, #1
 800dad6:	2300      	moveq	r3, #0
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	e03c      	b.n	800db56 <HAL_TIM_PWM_Start+0x9e>
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	2b04      	cmp	r3, #4
 800dae0:	d109      	bne.n	800daf6 <HAL_TIM_PWM_Start+0x3e>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	2b01      	cmp	r3, #1
 800daec:	bf14      	ite	ne
 800daee:	2301      	movne	r3, #1
 800daf0:	2300      	moveq	r3, #0
 800daf2:	b2db      	uxtb	r3, r3
 800daf4:	e02f      	b.n	800db56 <HAL_TIM_PWM_Start+0x9e>
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	2b08      	cmp	r3, #8
 800dafa:	d109      	bne.n	800db10 <HAL_TIM_PWM_Start+0x58>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800db02:	b2db      	uxtb	r3, r3
 800db04:	2b01      	cmp	r3, #1
 800db06:	bf14      	ite	ne
 800db08:	2301      	movne	r3, #1
 800db0a:	2300      	moveq	r3, #0
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	e022      	b.n	800db56 <HAL_TIM_PWM_Start+0x9e>
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	2b0c      	cmp	r3, #12
 800db14:	d109      	bne.n	800db2a <HAL_TIM_PWM_Start+0x72>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800db1c:	b2db      	uxtb	r3, r3
 800db1e:	2b01      	cmp	r3, #1
 800db20:	bf14      	ite	ne
 800db22:	2301      	movne	r3, #1
 800db24:	2300      	moveq	r3, #0
 800db26:	b2db      	uxtb	r3, r3
 800db28:	e015      	b.n	800db56 <HAL_TIM_PWM_Start+0x9e>
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	2b10      	cmp	r3, #16
 800db2e:	d109      	bne.n	800db44 <HAL_TIM_PWM_Start+0x8c>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800db36:	b2db      	uxtb	r3, r3
 800db38:	2b01      	cmp	r3, #1
 800db3a:	bf14      	ite	ne
 800db3c:	2301      	movne	r3, #1
 800db3e:	2300      	moveq	r3, #0
 800db40:	b2db      	uxtb	r3, r3
 800db42:	e008      	b.n	800db56 <HAL_TIM_PWM_Start+0x9e>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	bf14      	ite	ne
 800db50:	2301      	movne	r3, #1
 800db52:	2300      	moveq	r3, #0
 800db54:	b2db      	uxtb	r3, r3
 800db56:	2b00      	cmp	r3, #0
 800db58:	d001      	beq.n	800db5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800db5a:	2301      	movs	r3, #1
 800db5c:	e07e      	b.n	800dc5c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d104      	bne.n	800db6e <HAL_TIM_PWM_Start+0xb6>
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2202      	movs	r2, #2
 800db68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800db6c:	e023      	b.n	800dbb6 <HAL_TIM_PWM_Start+0xfe>
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	2b04      	cmp	r3, #4
 800db72:	d104      	bne.n	800db7e <HAL_TIM_PWM_Start+0xc6>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2202      	movs	r2, #2
 800db78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800db7c:	e01b      	b.n	800dbb6 <HAL_TIM_PWM_Start+0xfe>
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	2b08      	cmp	r3, #8
 800db82:	d104      	bne.n	800db8e <HAL_TIM_PWM_Start+0xd6>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2202      	movs	r2, #2
 800db88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800db8c:	e013      	b.n	800dbb6 <HAL_TIM_PWM_Start+0xfe>
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	2b0c      	cmp	r3, #12
 800db92:	d104      	bne.n	800db9e <HAL_TIM_PWM_Start+0xe6>
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2202      	movs	r2, #2
 800db98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800db9c:	e00b      	b.n	800dbb6 <HAL_TIM_PWM_Start+0xfe>
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	2b10      	cmp	r3, #16
 800dba2:	d104      	bne.n	800dbae <HAL_TIM_PWM_Start+0xf6>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2202      	movs	r2, #2
 800dba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dbac:	e003      	b.n	800dbb6 <HAL_TIM_PWM_Start+0xfe>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2202      	movs	r2, #2
 800dbb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	2201      	movs	r2, #1
 800dbbc:	6839      	ldr	r1, [r7, #0]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f000 fce2 	bl	800e588 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4a26      	ldr	r2, [pc, #152]	@ (800dc64 <HAL_TIM_PWM_Start+0x1ac>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d009      	beq.n	800dbe2 <HAL_TIM_PWM_Start+0x12a>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4a25      	ldr	r2, [pc, #148]	@ (800dc68 <HAL_TIM_PWM_Start+0x1b0>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d004      	beq.n	800dbe2 <HAL_TIM_PWM_Start+0x12a>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a23      	ldr	r2, [pc, #140]	@ (800dc6c <HAL_TIM_PWM_Start+0x1b4>)
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d101      	bne.n	800dbe6 <HAL_TIM_PWM_Start+0x12e>
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	e000      	b.n	800dbe8 <HAL_TIM_PWM_Start+0x130>
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d007      	beq.n	800dbfc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800dbfa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4a18      	ldr	r2, [pc, #96]	@ (800dc64 <HAL_TIM_PWM_Start+0x1ac>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d009      	beq.n	800dc1a <HAL_TIM_PWM_Start+0x162>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc0e:	d004      	beq.n	800dc1a <HAL_TIM_PWM_Start+0x162>
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4a14      	ldr	r2, [pc, #80]	@ (800dc68 <HAL_TIM_PWM_Start+0x1b0>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d115      	bne.n	800dc46 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	689a      	ldr	r2, [r3, #8]
 800dc20:	4b13      	ldr	r3, [pc, #76]	@ (800dc70 <HAL_TIM_PWM_Start+0x1b8>)
 800dc22:	4013      	ands	r3, r2
 800dc24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2b06      	cmp	r3, #6
 800dc2a:	d015      	beq.n	800dc58 <HAL_TIM_PWM_Start+0x1a0>
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc32:	d011      	beq.n	800dc58 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	681a      	ldr	r2, [r3, #0]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f042 0201 	orr.w	r2, r2, #1
 800dc42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc44:	e008      	b.n	800dc58 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f042 0201 	orr.w	r2, r2, #1
 800dc54:	601a      	str	r2, [r3, #0]
 800dc56:	e000      	b.n	800dc5a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dc5a:	2300      	movs	r3, #0
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	40012c00 	.word	0x40012c00
 800dc68:	40014000 	.word	0x40014000
 800dc6c:	40014400 	.word	0x40014400
 800dc70:	00010007 	.word	0x00010007

0800dc74 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b082      	sub	sp, #8
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	2200      	movs	r2, #0
 800dc84:	6839      	ldr	r1, [r7, #0]
 800dc86:	4618      	mov	r0, r3
 800dc88:	f000 fc7e 	bl	800e588 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	4a39      	ldr	r2, [pc, #228]	@ (800dd78 <HAL_TIM_PWM_Stop+0x104>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d009      	beq.n	800dcaa <HAL_TIM_PWM_Stop+0x36>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4a38      	ldr	r2, [pc, #224]	@ (800dd7c <HAL_TIM_PWM_Stop+0x108>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d004      	beq.n	800dcaa <HAL_TIM_PWM_Stop+0x36>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4a36      	ldr	r2, [pc, #216]	@ (800dd80 <HAL_TIM_PWM_Stop+0x10c>)
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d101      	bne.n	800dcae <HAL_TIM_PWM_Stop+0x3a>
 800dcaa:	2301      	movs	r3, #1
 800dcac:	e000      	b.n	800dcb0 <HAL_TIM_PWM_Stop+0x3c>
 800dcae:	2300      	movs	r3, #0
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d017      	beq.n	800dce4 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	6a1a      	ldr	r2, [r3, #32]
 800dcba:	f241 1311 	movw	r3, #4369	@ 0x1111
 800dcbe:	4013      	ands	r3, r2
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d10f      	bne.n	800dce4 <HAL_TIM_PWM_Stop+0x70>
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	6a1a      	ldr	r2, [r3, #32]
 800dcca:	f240 4344 	movw	r3, #1092	@ 0x444
 800dcce:	4013      	ands	r3, r2
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d107      	bne.n	800dce4 <HAL_TIM_PWM_Stop+0x70>
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800dce2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	6a1a      	ldr	r2, [r3, #32]
 800dcea:	f241 1311 	movw	r3, #4369	@ 0x1111
 800dcee:	4013      	ands	r3, r2
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d10f      	bne.n	800dd14 <HAL_TIM_PWM_Stop+0xa0>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	6a1a      	ldr	r2, [r3, #32]
 800dcfa:	f240 4344 	movw	r3, #1092	@ 0x444
 800dcfe:	4013      	ands	r3, r2
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d107      	bne.n	800dd14 <HAL_TIM_PWM_Stop+0xa0>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f022 0201 	bic.w	r2, r2, #1
 800dd12:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d104      	bne.n	800dd24 <HAL_TIM_PWM_Stop+0xb0>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dd22:	e023      	b.n	800dd6c <HAL_TIM_PWM_Stop+0xf8>
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	2b04      	cmp	r3, #4
 800dd28:	d104      	bne.n	800dd34 <HAL_TIM_PWM_Stop+0xc0>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dd32:	e01b      	b.n	800dd6c <HAL_TIM_PWM_Stop+0xf8>
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	2b08      	cmp	r3, #8
 800dd38:	d104      	bne.n	800dd44 <HAL_TIM_PWM_Stop+0xd0>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dd42:	e013      	b.n	800dd6c <HAL_TIM_PWM_Stop+0xf8>
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	2b0c      	cmp	r3, #12
 800dd48:	d104      	bne.n	800dd54 <HAL_TIM_PWM_Stop+0xe0>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dd52:	e00b      	b.n	800dd6c <HAL_TIM_PWM_Stop+0xf8>
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	2b10      	cmp	r3, #16
 800dd58:	d104      	bne.n	800dd64 <HAL_TIM_PWM_Stop+0xf0>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dd62:	e003      	b.n	800dd6c <HAL_TIM_PWM_Stop+0xf8>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2201      	movs	r2, #1
 800dd68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800dd6c:	2300      	movs	r3, #0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3708      	adds	r7, #8
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	40012c00 	.word	0x40012c00
 800dd7c:	40014000 	.word	0x40014000
 800dd80:	40014400 	.word	0x40014400

0800dd84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b086      	sub	sp, #24
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	60f8      	str	r0, [r7, #12]
 800dd8c:	60b9      	str	r1, [r7, #8]
 800dd8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dd90:	2300      	movs	r3, #0
 800dd92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d101      	bne.n	800dda2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dd9e:	2302      	movs	r3, #2
 800dda0:	e0ff      	b.n	800dfa2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2201      	movs	r2, #1
 800dda6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2b14      	cmp	r3, #20
 800ddae:	f200 80f0 	bhi.w	800df92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ddb2:	a201      	add	r2, pc, #4	@ (adr r2, 800ddb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ddb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddb8:	0800de0d 	.word	0x0800de0d
 800ddbc:	0800df93 	.word	0x0800df93
 800ddc0:	0800df93 	.word	0x0800df93
 800ddc4:	0800df93 	.word	0x0800df93
 800ddc8:	0800de4d 	.word	0x0800de4d
 800ddcc:	0800df93 	.word	0x0800df93
 800ddd0:	0800df93 	.word	0x0800df93
 800ddd4:	0800df93 	.word	0x0800df93
 800ddd8:	0800de8f 	.word	0x0800de8f
 800dddc:	0800df93 	.word	0x0800df93
 800dde0:	0800df93 	.word	0x0800df93
 800dde4:	0800df93 	.word	0x0800df93
 800dde8:	0800decf 	.word	0x0800decf
 800ddec:	0800df93 	.word	0x0800df93
 800ddf0:	0800df93 	.word	0x0800df93
 800ddf4:	0800df93 	.word	0x0800df93
 800ddf8:	0800df11 	.word	0x0800df11
 800ddfc:	0800df93 	.word	0x0800df93
 800de00:	0800df93 	.word	0x0800df93
 800de04:	0800df93 	.word	0x0800df93
 800de08:	0800df51 	.word	0x0800df51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	68b9      	ldr	r1, [r7, #8]
 800de12:	4618      	mov	r0, r3
 800de14:	f000 f93a 	bl	800e08c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	699a      	ldr	r2, [r3, #24]
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f042 0208 	orr.w	r2, r2, #8
 800de26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	699a      	ldr	r2, [r3, #24]
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	f022 0204 	bic.w	r2, r2, #4
 800de36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	6999      	ldr	r1, [r3, #24]
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	691a      	ldr	r2, [r3, #16]
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	430a      	orrs	r2, r1
 800de48:	619a      	str	r2, [r3, #24]
      break;
 800de4a:	e0a5      	b.n	800df98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	68b9      	ldr	r1, [r7, #8]
 800de52:	4618      	mov	r0, r3
 800de54:	f000 f996 	bl	800e184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	699a      	ldr	r2, [r3, #24]
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800de66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	699a      	ldr	r2, [r3, #24]
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800de76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	6999      	ldr	r1, [r3, #24]
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	691b      	ldr	r3, [r3, #16]
 800de82:	021a      	lsls	r2, r3, #8
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	430a      	orrs	r2, r1
 800de8a:	619a      	str	r2, [r3, #24]
      break;
 800de8c:	e084      	b.n	800df98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	68b9      	ldr	r1, [r7, #8]
 800de94:	4618      	mov	r0, r3
 800de96:	f000 f9ef 	bl	800e278 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	69da      	ldr	r2, [r3, #28]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f042 0208 	orr.w	r2, r2, #8
 800dea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	69da      	ldr	r2, [r3, #28]
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f022 0204 	bic.w	r2, r2, #4
 800deb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	69d9      	ldr	r1, [r3, #28]
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	691a      	ldr	r2, [r3, #16]
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	430a      	orrs	r2, r1
 800deca:	61da      	str	r2, [r3, #28]
      break;
 800decc:	e064      	b.n	800df98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	68b9      	ldr	r1, [r7, #8]
 800ded4:	4618      	mov	r0, r3
 800ded6:	f000 fa47 	bl	800e368 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	69da      	ldr	r2, [r3, #28]
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	69da      	ldr	r2, [r3, #28]
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800def8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	69d9      	ldr	r1, [r3, #28]
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	691b      	ldr	r3, [r3, #16]
 800df04:	021a      	lsls	r2, r3, #8
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	430a      	orrs	r2, r1
 800df0c:	61da      	str	r2, [r3, #28]
      break;
 800df0e:	e043      	b.n	800df98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	68b9      	ldr	r1, [r7, #8]
 800df16:	4618      	mov	r0, r3
 800df18:	f000 fa84 	bl	800e424 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f042 0208 	orr.w	r2, r2, #8
 800df2a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	f022 0204 	bic.w	r2, r2, #4
 800df3a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	691a      	ldr	r2, [r3, #16]
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	430a      	orrs	r2, r1
 800df4c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800df4e:	e023      	b.n	800df98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	68b9      	ldr	r1, [r7, #8]
 800df56:	4618      	mov	r0, r3
 800df58:	f000 fabc 	bl	800e4d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800df6a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800df7a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	691b      	ldr	r3, [r3, #16]
 800df86:	021a      	lsls	r2, r3, #8
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	430a      	orrs	r2, r1
 800df8e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800df90:	e002      	b.n	800df98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800df92:	2301      	movs	r3, #1
 800df94:	75fb      	strb	r3, [r7, #23]
      break;
 800df96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	2200      	movs	r2, #0
 800df9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dfa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3718      	adds	r7, #24
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop

0800dfac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b085      	sub	sp, #20
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	4a30      	ldr	r2, [pc, #192]	@ (800e080 <TIM_Base_SetConfig+0xd4>)
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	d003      	beq.n	800dfcc <TIM_Base_SetConfig+0x20>
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfca:	d108      	bne.n	800dfde <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dfd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	685b      	ldr	r3, [r3, #4]
 800dfd8:	68fa      	ldr	r2, [r7, #12]
 800dfda:	4313      	orrs	r3, r2
 800dfdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	4a27      	ldr	r2, [pc, #156]	@ (800e080 <TIM_Base_SetConfig+0xd4>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d00b      	beq.n	800dffe <TIM_Base_SetConfig+0x52>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfec:	d007      	beq.n	800dffe <TIM_Base_SetConfig+0x52>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	4a24      	ldr	r2, [pc, #144]	@ (800e084 <TIM_Base_SetConfig+0xd8>)
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d003      	beq.n	800dffe <TIM_Base_SetConfig+0x52>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	4a23      	ldr	r2, [pc, #140]	@ (800e088 <TIM_Base_SetConfig+0xdc>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d108      	bne.n	800e010 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	68db      	ldr	r3, [r3, #12]
 800e00a:	68fa      	ldr	r2, [r7, #12]
 800e00c:	4313      	orrs	r3, r2
 800e00e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	695b      	ldr	r3, [r3, #20]
 800e01a:	4313      	orrs	r3, r2
 800e01c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	68fa      	ldr	r2, [r7, #12]
 800e022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	689a      	ldr	r2, [r3, #8]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	681a      	ldr	r2, [r3, #0]
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	4a12      	ldr	r2, [pc, #72]	@ (800e080 <TIM_Base_SetConfig+0xd4>)
 800e038:	4293      	cmp	r3, r2
 800e03a:	d007      	beq.n	800e04c <TIM_Base_SetConfig+0xa0>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	4a11      	ldr	r2, [pc, #68]	@ (800e084 <TIM_Base_SetConfig+0xd8>)
 800e040:	4293      	cmp	r3, r2
 800e042:	d003      	beq.n	800e04c <TIM_Base_SetConfig+0xa0>
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	4a10      	ldr	r2, [pc, #64]	@ (800e088 <TIM_Base_SetConfig+0xdc>)
 800e048:	4293      	cmp	r3, r2
 800e04a:	d103      	bne.n	800e054 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	691a      	ldr	r2, [r3, #16]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2201      	movs	r2, #1
 800e058:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	691b      	ldr	r3, [r3, #16]
 800e05e:	f003 0301 	and.w	r3, r3, #1
 800e062:	2b01      	cmp	r3, #1
 800e064:	d105      	bne.n	800e072 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	691b      	ldr	r3, [r3, #16]
 800e06a:	f023 0201 	bic.w	r2, r3, #1
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	611a      	str	r2, [r3, #16]
  }
}
 800e072:	bf00      	nop
 800e074:	3714      	adds	r7, #20
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop
 800e080:	40012c00 	.word	0x40012c00
 800e084:	40014000 	.word	0x40014000
 800e088:	40014400 	.word	0x40014400

0800e08c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e08c:	b480      	push	{r7}
 800e08e:	b087      	sub	sp, #28
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6a1b      	ldr	r3, [r3, #32]
 800e09a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6a1b      	ldr	r3, [r3, #32]
 800e0a0:	f023 0201 	bic.w	r2, r3, #1
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	685b      	ldr	r3, [r3, #4]
 800e0ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	699b      	ldr	r3, [r3, #24]
 800e0b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e0ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e0be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	f023 0303 	bic.w	r3, r3, #3
 800e0c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	68fa      	ldr	r2, [r7, #12]
 800e0ce:	4313      	orrs	r3, r2
 800e0d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	f023 0302 	bic.w	r3, r3, #2
 800e0d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	689b      	ldr	r3, [r3, #8]
 800e0de:	697a      	ldr	r2, [r7, #20]
 800e0e0:	4313      	orrs	r3, r2
 800e0e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	4a24      	ldr	r2, [pc, #144]	@ (800e178 <TIM_OC1_SetConfig+0xec>)
 800e0e8:	4293      	cmp	r3, r2
 800e0ea:	d007      	beq.n	800e0fc <TIM_OC1_SetConfig+0x70>
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	4a23      	ldr	r2, [pc, #140]	@ (800e17c <TIM_OC1_SetConfig+0xf0>)
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d003      	beq.n	800e0fc <TIM_OC1_SetConfig+0x70>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	4a22      	ldr	r2, [pc, #136]	@ (800e180 <TIM_OC1_SetConfig+0xf4>)
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	d10c      	bne.n	800e116 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	f023 0308 	bic.w	r3, r3, #8
 800e102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	68db      	ldr	r3, [r3, #12]
 800e108:	697a      	ldr	r2, [r7, #20]
 800e10a:	4313      	orrs	r3, r2
 800e10c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	f023 0304 	bic.w	r3, r3, #4
 800e114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	4a17      	ldr	r2, [pc, #92]	@ (800e178 <TIM_OC1_SetConfig+0xec>)
 800e11a:	4293      	cmp	r3, r2
 800e11c:	d007      	beq.n	800e12e <TIM_OC1_SetConfig+0xa2>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	4a16      	ldr	r2, [pc, #88]	@ (800e17c <TIM_OC1_SetConfig+0xf0>)
 800e122:	4293      	cmp	r3, r2
 800e124:	d003      	beq.n	800e12e <TIM_OC1_SetConfig+0xa2>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	4a15      	ldr	r2, [pc, #84]	@ (800e180 <TIM_OC1_SetConfig+0xf4>)
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d111      	bne.n	800e152 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e13c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	695b      	ldr	r3, [r3, #20]
 800e142:	693a      	ldr	r2, [r7, #16]
 800e144:	4313      	orrs	r3, r2
 800e146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	699b      	ldr	r3, [r3, #24]
 800e14c:	693a      	ldr	r2, [r7, #16]
 800e14e:	4313      	orrs	r3, r2
 800e150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	693a      	ldr	r2, [r7, #16]
 800e156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	68fa      	ldr	r2, [r7, #12]
 800e15c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	685a      	ldr	r2, [r3, #4]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	697a      	ldr	r2, [r7, #20]
 800e16a:	621a      	str	r2, [r3, #32]
}
 800e16c:	bf00      	nop
 800e16e:	371c      	adds	r7, #28
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr
 800e178:	40012c00 	.word	0x40012c00
 800e17c:	40014000 	.word	0x40014000
 800e180:	40014400 	.word	0x40014400

0800e184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e184:	b480      	push	{r7}
 800e186:	b087      	sub	sp, #28
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6a1b      	ldr	r3, [r3, #32]
 800e192:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6a1b      	ldr	r3, [r3, #32]
 800e198:	f023 0210 	bic.w	r2, r3, #16
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	685b      	ldr	r3, [r3, #4]
 800e1a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	699b      	ldr	r3, [r3, #24]
 800e1aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e1b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e1b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e1be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	021b      	lsls	r3, r3, #8
 800e1c6:	68fa      	ldr	r2, [r7, #12]
 800e1c8:	4313      	orrs	r3, r2
 800e1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	f023 0320 	bic.w	r3, r3, #32
 800e1d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	689b      	ldr	r3, [r3, #8]
 800e1d8:	011b      	lsls	r3, r3, #4
 800e1da:	697a      	ldr	r2, [r7, #20]
 800e1dc:	4313      	orrs	r3, r2
 800e1de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	4a22      	ldr	r2, [pc, #136]	@ (800e26c <TIM_OC2_SetConfig+0xe8>)
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d10d      	bne.n	800e204 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e1ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	011b      	lsls	r3, r3, #4
 800e1f6:	697a      	ldr	r2, [r7, #20]
 800e1f8:	4313      	orrs	r3, r2
 800e1fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e202:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	4a19      	ldr	r2, [pc, #100]	@ (800e26c <TIM_OC2_SetConfig+0xe8>)
 800e208:	4293      	cmp	r3, r2
 800e20a:	d007      	beq.n	800e21c <TIM_OC2_SetConfig+0x98>
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	4a18      	ldr	r2, [pc, #96]	@ (800e270 <TIM_OC2_SetConfig+0xec>)
 800e210:	4293      	cmp	r3, r2
 800e212:	d003      	beq.n	800e21c <TIM_OC2_SetConfig+0x98>
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	4a17      	ldr	r2, [pc, #92]	@ (800e274 <TIM_OC2_SetConfig+0xf0>)
 800e218:	4293      	cmp	r3, r2
 800e21a:	d113      	bne.n	800e244 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e222:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e22a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	695b      	ldr	r3, [r3, #20]
 800e230:	009b      	lsls	r3, r3, #2
 800e232:	693a      	ldr	r2, [r7, #16]
 800e234:	4313      	orrs	r3, r2
 800e236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	699b      	ldr	r3, [r3, #24]
 800e23c:	009b      	lsls	r3, r3, #2
 800e23e:	693a      	ldr	r2, [r7, #16]
 800e240:	4313      	orrs	r3, r2
 800e242:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	693a      	ldr	r2, [r7, #16]
 800e248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	685a      	ldr	r2, [r3, #4]
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	697a      	ldr	r2, [r7, #20]
 800e25c:	621a      	str	r2, [r3, #32]
}
 800e25e:	bf00      	nop
 800e260:	371c      	adds	r7, #28
 800e262:	46bd      	mov	sp, r7
 800e264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e268:	4770      	bx	lr
 800e26a:	bf00      	nop
 800e26c:	40012c00 	.word	0x40012c00
 800e270:	40014000 	.word	0x40014000
 800e274:	40014400 	.word	0x40014400

0800e278 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e278:	b480      	push	{r7}
 800e27a:	b087      	sub	sp, #28
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6a1b      	ldr	r3, [r3, #32]
 800e286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6a1b      	ldr	r3, [r3, #32]
 800e28c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	685b      	ldr	r3, [r3, #4]
 800e298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	69db      	ldr	r3, [r3, #28]
 800e29e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e2a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e2aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f023 0303 	bic.w	r3, r3, #3
 800e2b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	68fa      	ldr	r2, [r7, #12]
 800e2ba:	4313      	orrs	r3, r2
 800e2bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e2c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	689b      	ldr	r3, [r3, #8]
 800e2ca:	021b      	lsls	r3, r3, #8
 800e2cc:	697a      	ldr	r2, [r7, #20]
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	4a21      	ldr	r2, [pc, #132]	@ (800e35c <TIM_OC3_SetConfig+0xe4>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d10d      	bne.n	800e2f6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e2e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	68db      	ldr	r3, [r3, #12]
 800e2e6:	021b      	lsls	r3, r3, #8
 800e2e8:	697a      	ldr	r2, [r7, #20]
 800e2ea:	4313      	orrs	r3, r2
 800e2ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e2f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	4a18      	ldr	r2, [pc, #96]	@ (800e35c <TIM_OC3_SetConfig+0xe4>)
 800e2fa:	4293      	cmp	r3, r2
 800e2fc:	d007      	beq.n	800e30e <TIM_OC3_SetConfig+0x96>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	4a17      	ldr	r2, [pc, #92]	@ (800e360 <TIM_OC3_SetConfig+0xe8>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d003      	beq.n	800e30e <TIM_OC3_SetConfig+0x96>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	4a16      	ldr	r2, [pc, #88]	@ (800e364 <TIM_OC3_SetConfig+0xec>)
 800e30a:	4293      	cmp	r3, r2
 800e30c:	d113      	bne.n	800e336 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e30e:	693b      	ldr	r3, [r7, #16]
 800e310:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e31c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	695b      	ldr	r3, [r3, #20]
 800e322:	011b      	lsls	r3, r3, #4
 800e324:	693a      	ldr	r2, [r7, #16]
 800e326:	4313      	orrs	r3, r2
 800e328:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	699b      	ldr	r3, [r3, #24]
 800e32e:	011b      	lsls	r3, r3, #4
 800e330:	693a      	ldr	r2, [r7, #16]
 800e332:	4313      	orrs	r3, r2
 800e334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	693a      	ldr	r2, [r7, #16]
 800e33a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	68fa      	ldr	r2, [r7, #12]
 800e340:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	685a      	ldr	r2, [r3, #4]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	697a      	ldr	r2, [r7, #20]
 800e34e:	621a      	str	r2, [r3, #32]
}
 800e350:	bf00      	nop
 800e352:	371c      	adds	r7, #28
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr
 800e35c:	40012c00 	.word	0x40012c00
 800e360:	40014000 	.word	0x40014000
 800e364:	40014400 	.word	0x40014400

0800e368 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e368:	b480      	push	{r7}
 800e36a:	b087      	sub	sp, #28
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6a1b      	ldr	r3, [r3, #32]
 800e376:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6a1b      	ldr	r3, [r3, #32]
 800e37c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	685b      	ldr	r3, [r3, #4]
 800e388:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	69db      	ldr	r3, [r3, #28]
 800e38e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e39a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e3a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	021b      	lsls	r3, r3, #8
 800e3aa:	68fa      	ldr	r2, [r7, #12]
 800e3ac:	4313      	orrs	r3, r2
 800e3ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e3b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	689b      	ldr	r3, [r3, #8]
 800e3bc:	031b      	lsls	r3, r3, #12
 800e3be:	693a      	ldr	r2, [r7, #16]
 800e3c0:	4313      	orrs	r3, r2
 800e3c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	4a14      	ldr	r2, [pc, #80]	@ (800e418 <TIM_OC4_SetConfig+0xb0>)
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d007      	beq.n	800e3dc <TIM_OC4_SetConfig+0x74>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	4a13      	ldr	r2, [pc, #76]	@ (800e41c <TIM_OC4_SetConfig+0xb4>)
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	d003      	beq.n	800e3dc <TIM_OC4_SetConfig+0x74>
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	4a12      	ldr	r2, [pc, #72]	@ (800e420 <TIM_OC4_SetConfig+0xb8>)
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d109      	bne.n	800e3f0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e3e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	695b      	ldr	r3, [r3, #20]
 800e3e8:	019b      	lsls	r3, r3, #6
 800e3ea:	697a      	ldr	r2, [r7, #20]
 800e3ec:	4313      	orrs	r3, r2
 800e3ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	697a      	ldr	r2, [r7, #20]
 800e3f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	68fa      	ldr	r2, [r7, #12]
 800e3fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	685a      	ldr	r2, [r3, #4]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	693a      	ldr	r2, [r7, #16]
 800e408:	621a      	str	r2, [r3, #32]
}
 800e40a:	bf00      	nop
 800e40c:	371c      	adds	r7, #28
 800e40e:	46bd      	mov	sp, r7
 800e410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e414:	4770      	bx	lr
 800e416:	bf00      	nop
 800e418:	40012c00 	.word	0x40012c00
 800e41c:	40014000 	.word	0x40014000
 800e420:	40014400 	.word	0x40014400

0800e424 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e424:	b480      	push	{r7}
 800e426:	b087      	sub	sp, #28
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6a1b      	ldr	r3, [r3, #32]
 800e432:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6a1b      	ldr	r3, [r3, #32]
 800e438:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	68fa      	ldr	r2, [r7, #12]
 800e45e:	4313      	orrs	r3, r2
 800e460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e468:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	689b      	ldr	r3, [r3, #8]
 800e46e:	041b      	lsls	r3, r3, #16
 800e470:	693a      	ldr	r2, [r7, #16]
 800e472:	4313      	orrs	r3, r2
 800e474:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	4a13      	ldr	r2, [pc, #76]	@ (800e4c8 <TIM_OC5_SetConfig+0xa4>)
 800e47a:	4293      	cmp	r3, r2
 800e47c:	d007      	beq.n	800e48e <TIM_OC5_SetConfig+0x6a>
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	4a12      	ldr	r2, [pc, #72]	@ (800e4cc <TIM_OC5_SetConfig+0xa8>)
 800e482:	4293      	cmp	r3, r2
 800e484:	d003      	beq.n	800e48e <TIM_OC5_SetConfig+0x6a>
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	4a11      	ldr	r2, [pc, #68]	@ (800e4d0 <TIM_OC5_SetConfig+0xac>)
 800e48a:	4293      	cmp	r3, r2
 800e48c:	d109      	bne.n	800e4a2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e494:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	695b      	ldr	r3, [r3, #20]
 800e49a:	021b      	lsls	r3, r3, #8
 800e49c:	697a      	ldr	r2, [r7, #20]
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	697a      	ldr	r2, [r7, #20]
 800e4a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	68fa      	ldr	r2, [r7, #12]
 800e4ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	685a      	ldr	r2, [r3, #4]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	693a      	ldr	r2, [r7, #16]
 800e4ba:	621a      	str	r2, [r3, #32]
}
 800e4bc:	bf00      	nop
 800e4be:	371c      	adds	r7, #28
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr
 800e4c8:	40012c00 	.word	0x40012c00
 800e4cc:	40014000 	.word	0x40014000
 800e4d0:	40014400 	.word	0x40014400

0800e4d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b087      	sub	sp, #28
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
 800e4dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6a1b      	ldr	r3, [r3, #32]
 800e4e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6a1b      	ldr	r3, [r3, #32]
 800e4e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	685b      	ldr	r3, [r3, #4]
 800e4f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	021b      	lsls	r3, r3, #8
 800e50e:	68fa      	ldr	r2, [r7, #12]
 800e510:	4313      	orrs	r3, r2
 800e512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e51a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	689b      	ldr	r3, [r3, #8]
 800e520:	051b      	lsls	r3, r3, #20
 800e522:	693a      	ldr	r2, [r7, #16]
 800e524:	4313      	orrs	r3, r2
 800e526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	4a14      	ldr	r2, [pc, #80]	@ (800e57c <TIM_OC6_SetConfig+0xa8>)
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d007      	beq.n	800e540 <TIM_OC6_SetConfig+0x6c>
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	4a13      	ldr	r2, [pc, #76]	@ (800e580 <TIM_OC6_SetConfig+0xac>)
 800e534:	4293      	cmp	r3, r2
 800e536:	d003      	beq.n	800e540 <TIM_OC6_SetConfig+0x6c>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	4a12      	ldr	r2, [pc, #72]	@ (800e584 <TIM_OC6_SetConfig+0xb0>)
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d109      	bne.n	800e554 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e546:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	695b      	ldr	r3, [r3, #20]
 800e54c:	029b      	lsls	r3, r3, #10
 800e54e:	697a      	ldr	r2, [r7, #20]
 800e550:	4313      	orrs	r3, r2
 800e552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	697a      	ldr	r2, [r7, #20]
 800e558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	68fa      	ldr	r2, [r7, #12]
 800e55e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	685a      	ldr	r2, [r3, #4]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	693a      	ldr	r2, [r7, #16]
 800e56c:	621a      	str	r2, [r3, #32]
}
 800e56e:	bf00      	nop
 800e570:	371c      	adds	r7, #28
 800e572:	46bd      	mov	sp, r7
 800e574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e578:	4770      	bx	lr
 800e57a:	bf00      	nop
 800e57c:	40012c00 	.word	0x40012c00
 800e580:	40014000 	.word	0x40014000
 800e584:	40014400 	.word	0x40014400

0800e588 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e588:	b480      	push	{r7}
 800e58a:	b087      	sub	sp, #28
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	60f8      	str	r0, [r7, #12]
 800e590:	60b9      	str	r1, [r7, #8]
 800e592:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	f003 031f 	and.w	r3, r3, #31
 800e59a:	2201      	movs	r2, #1
 800e59c:	fa02 f303 	lsl.w	r3, r2, r3
 800e5a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	6a1a      	ldr	r2, [r3, #32]
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	43db      	mvns	r3, r3
 800e5aa:	401a      	ands	r2, r3
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	6a1a      	ldr	r2, [r3, #32]
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	f003 031f 	and.w	r3, r3, #31
 800e5ba:	6879      	ldr	r1, [r7, #4]
 800e5bc:	fa01 f303 	lsl.w	r3, r1, r3
 800e5c0:	431a      	orrs	r2, r3
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	621a      	str	r2, [r3, #32]
}
 800e5c6:	bf00      	nop
 800e5c8:	371c      	adds	r7, #28
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d0:	4770      	bx	lr
	...

0800e5d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b085      	sub	sp, #20
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
 800e5dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	d101      	bne.n	800e5ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e5e8:	2302      	movs	r3, #2
 800e5ea:	e04f      	b.n	800e68c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2201      	movs	r2, #1
 800e5f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2202      	movs	r2, #2
 800e5f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	689b      	ldr	r3, [r3, #8]
 800e60a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	4a21      	ldr	r2, [pc, #132]	@ (800e698 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e612:	4293      	cmp	r3, r2
 800e614:	d108      	bne.n	800e628 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e61c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	68fa      	ldr	r2, [r7, #12]
 800e624:	4313      	orrs	r3, r2
 800e626:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e62e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	68fa      	ldr	r2, [r7, #12]
 800e636:	4313      	orrs	r3, r2
 800e638:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	68fa      	ldr	r2, [r7, #12]
 800e640:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	4a14      	ldr	r2, [pc, #80]	@ (800e698 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e648:	4293      	cmp	r3, r2
 800e64a:	d009      	beq.n	800e660 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e654:	d004      	beq.n	800e660 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	4a10      	ldr	r2, [pc, #64]	@ (800e69c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d10c      	bne.n	800e67a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e666:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	689b      	ldr	r3, [r3, #8]
 800e66c:	68ba      	ldr	r2, [r7, #8]
 800e66e:	4313      	orrs	r3, r2
 800e670:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	68ba      	ldr	r2, [r7, #8]
 800e678:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2201      	movs	r2, #1
 800e67e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2200      	movs	r2, #0
 800e686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e68a:	2300      	movs	r3, #0
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3714      	adds	r7, #20
 800e690:	46bd      	mov	sp, r7
 800e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e696:	4770      	bx	lr
 800e698:	40012c00 	.word	0x40012c00
 800e69c:	40014000 	.word	0x40014000

0800e6a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d101      	bne.n	800e6b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	e040      	b.n	800e734 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d106      	bne.n	800e6c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f7fd f844 	bl	800b750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2224      	movs	r2, #36	@ 0x24
 800e6cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f022 0201 	bic.w	r2, r2, #1
 800e6dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d002      	beq.n	800e6ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f000 fe30 	bl	800f34c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f000 fbd3 	bl	800ee98 <UART_SetConfig>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d101      	bne.n	800e6fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	e01b      	b.n	800e734 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	685a      	ldr	r2, [r3, #4]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e70a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	689a      	ldr	r2, [r3, #8]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e71a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	681a      	ldr	r2, [r3, #0]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f042 0201 	orr.w	r2, r2, #1
 800e72a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f000 feaf 	bl	800f490 <UART_CheckIdleState>
 800e732:	4603      	mov	r3, r0
}
 800e734:	4618      	mov	r0, r3
 800e736:	3708      	adds	r7, #8
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}

0800e73c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b08a      	sub	sp, #40	@ 0x28
 800e740:	af02      	add	r7, sp, #8
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	603b      	str	r3, [r7, #0]
 800e748:	4613      	mov	r3, r2
 800e74a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e750:	2b20      	cmp	r3, #32
 800e752:	d177      	bne.n	800e844 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d002      	beq.n	800e760 <HAL_UART_Transmit+0x24>
 800e75a:	88fb      	ldrh	r3, [r7, #6]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d101      	bne.n	800e764 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e760:	2301      	movs	r3, #1
 800e762:	e070      	b.n	800e846 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2200      	movs	r2, #0
 800e768:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2221      	movs	r2, #33	@ 0x21
 800e770:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e772:	f7fd f983 	bl	800ba7c <HAL_GetTick>
 800e776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	88fa      	ldrh	r2, [r7, #6]
 800e77c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	88fa      	ldrh	r2, [r7, #6]
 800e784:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	689b      	ldr	r3, [r3, #8]
 800e78c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e790:	d108      	bne.n	800e7a4 <HAL_UART_Transmit+0x68>
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	691b      	ldr	r3, [r3, #16]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d104      	bne.n	800e7a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800e79a:	2300      	movs	r3, #0
 800e79c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	61bb      	str	r3, [r7, #24]
 800e7a2:	e003      	b.n	800e7ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e7ac:	e02f      	b.n	800e80e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	9300      	str	r3, [sp, #0]
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	2180      	movs	r1, #128	@ 0x80
 800e7b8:	68f8      	ldr	r0, [r7, #12]
 800e7ba:	f000 ff11 	bl	800f5e0 <UART_WaitOnFlagUntilTimeout>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d004      	beq.n	800e7ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2220      	movs	r2, #32
 800e7c8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800e7ca:	2303      	movs	r3, #3
 800e7cc:	e03b      	b.n	800e846 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800e7ce:	69fb      	ldr	r3, [r7, #28]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d10b      	bne.n	800e7ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	881a      	ldrh	r2, [r3, #0]
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e7e0:	b292      	uxth	r2, r2
 800e7e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	3302      	adds	r3, #2
 800e7e8:	61bb      	str	r3, [r7, #24]
 800e7ea:	e007      	b.n	800e7fc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e7ec:	69fb      	ldr	r3, [r7, #28]
 800e7ee:	781a      	ldrb	r2, [r3, #0]
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e7f6:	69fb      	ldr	r3, [r7, #28]
 800e7f8:	3301      	adds	r3, #1
 800e7fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e802:	b29b      	uxth	r3, r3
 800e804:	3b01      	subs	r3, #1
 800e806:	b29a      	uxth	r2, r3
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e814:	b29b      	uxth	r3, r3
 800e816:	2b00      	cmp	r3, #0
 800e818:	d1c9      	bne.n	800e7ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	9300      	str	r3, [sp, #0]
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	2200      	movs	r2, #0
 800e822:	2140      	movs	r1, #64	@ 0x40
 800e824:	68f8      	ldr	r0, [r7, #12]
 800e826:	f000 fedb 	bl	800f5e0 <UART_WaitOnFlagUntilTimeout>
 800e82a:	4603      	mov	r3, r0
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d004      	beq.n	800e83a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	2220      	movs	r2, #32
 800e834:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800e836:	2303      	movs	r3, #3
 800e838:	e005      	b.n	800e846 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2220      	movs	r2, #32
 800e83e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800e840:	2300      	movs	r3, #0
 800e842:	e000      	b.n	800e846 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800e844:	2302      	movs	r3, #2
  }
}
 800e846:	4618      	mov	r0, r3
 800e848:	3720      	adds	r7, #32
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
	...

0800e850 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b0ba      	sub	sp, #232	@ 0xe8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	69db      	ldr	r3, [r3, #28]
 800e85e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	689b      	ldr	r3, [r3, #8]
 800e872:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e876:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e87a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e87e:	4013      	ands	r3, r2
 800e880:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d115      	bne.n	800e8b8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e88c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e890:	f003 0320 	and.w	r3, r3, #32
 800e894:	2b00      	cmp	r3, #0
 800e896:	d00f      	beq.n	800e8b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e89c:	f003 0320 	and.w	r3, r3, #32
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d009      	beq.n	800e8b8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	f000 82ca 	beq.w	800ee42 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	4798      	blx	r3
      }
      return;
 800e8b6:	e2c4      	b.n	800ee42 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800e8b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	f000 8117 	beq.w	800eaf0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e8c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e8c6:	f003 0301 	and.w	r3, r3, #1
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d106      	bne.n	800e8dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e8ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e8d2:	4b85      	ldr	r3, [pc, #532]	@ (800eae8 <HAL_UART_IRQHandler+0x298>)
 800e8d4:	4013      	ands	r3, r2
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	f000 810a 	beq.w	800eaf0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e8dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e8e0:	f003 0301 	and.w	r3, r3, #1
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d011      	beq.n	800e90c <HAL_UART_IRQHandler+0xbc>
 800e8e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e8ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d00b      	beq.n	800e90c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e902:	f043 0201 	orr.w	r2, r3, #1
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e90c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e910:	f003 0302 	and.w	r3, r3, #2
 800e914:	2b00      	cmp	r3, #0
 800e916:	d011      	beq.n	800e93c <HAL_UART_IRQHandler+0xec>
 800e918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e91c:	f003 0301 	and.w	r3, r3, #1
 800e920:	2b00      	cmp	r3, #0
 800e922:	d00b      	beq.n	800e93c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2202      	movs	r2, #2
 800e92a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e932:	f043 0204 	orr.w	r2, r3, #4
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e93c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e940:	f003 0304 	and.w	r3, r3, #4
 800e944:	2b00      	cmp	r3, #0
 800e946:	d011      	beq.n	800e96c <HAL_UART_IRQHandler+0x11c>
 800e948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e94c:	f003 0301 	and.w	r3, r3, #1
 800e950:	2b00      	cmp	r3, #0
 800e952:	d00b      	beq.n	800e96c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	2204      	movs	r2, #4
 800e95a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e962:	f043 0202 	orr.w	r2, r3, #2
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e96c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e970:	f003 0308 	and.w	r3, r3, #8
 800e974:	2b00      	cmp	r3, #0
 800e976:	d017      	beq.n	800e9a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e97c:	f003 0320 	and.w	r3, r3, #32
 800e980:	2b00      	cmp	r3, #0
 800e982:	d105      	bne.n	800e990 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e988:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d00b      	beq.n	800e9a8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	2208      	movs	r2, #8
 800e996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e99e:	f043 0208 	orr.w	r2, r3, #8
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e9a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e9ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d012      	beq.n	800e9da <HAL_UART_IRQHandler+0x18a>
 800e9b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e9b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d00c      	beq.n	800e9da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e9c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e9d0:	f043 0220 	orr.w	r2, r3, #32
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f000 8230 	beq.w	800ee46 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e9e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e9ea:	f003 0320 	and.w	r3, r3, #32
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d00d      	beq.n	800ea0e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e9f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e9f6:	f003 0320 	and.w	r3, r3, #32
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d007      	beq.n	800ea0e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d003      	beq.n	800ea0e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ea14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	689b      	ldr	r3, [r3, #8]
 800ea1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea22:	2b40      	cmp	r3, #64	@ 0x40
 800ea24:	d005      	beq.n	800ea32 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ea26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ea2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d04f      	beq.n	800ead2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f000 ff08 	bl	800f848 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	689b      	ldr	r3, [r3, #8]
 800ea3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea42:	2b40      	cmp	r3, #64	@ 0x40
 800ea44:	d141      	bne.n	800eaca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	3308      	adds	r3, #8
 800ea4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ea54:	e853 3f00 	ldrex	r3, [r3]
 800ea58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ea5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ea60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	3308      	adds	r3, #8
 800ea6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ea72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ea76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ea7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ea82:	e841 2300 	strex	r3, r2, [r1]
 800ea86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ea8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d1d9      	bne.n	800ea46 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d013      	beq.n	800eac2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea9e:	4a13      	ldr	r2, [pc, #76]	@ (800eaec <HAL_UART_IRQHandler+0x29c>)
 800eaa0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7fd f95d 	bl	800bd66 <HAL_DMA_Abort_IT>
 800eaac:	4603      	mov	r3, r0
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d017      	beq.n	800eae2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eab8:	687a      	ldr	r2, [r7, #4]
 800eaba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800eabc:	4610      	mov	r0, r2
 800eabe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eac0:	e00f      	b.n	800eae2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f000 f9de 	bl	800ee84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eac8:	e00b      	b.n	800eae2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 f9da 	bl	800ee84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ead0:	e007      	b.n	800eae2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f000 f9d6 	bl	800ee84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2200      	movs	r2, #0
 800eadc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800eae0:	e1b1      	b.n	800ee46 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eae2:	bf00      	nop
    return;
 800eae4:	e1af      	b.n	800ee46 <HAL_UART_IRQHandler+0x5f6>
 800eae6:	bf00      	nop
 800eae8:	04000120 	.word	0x04000120
 800eaec:	0800f911 	.word	0x0800f911

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	f040 816a 	bne.w	800edce <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800eafa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eafe:	f003 0310 	and.w	r3, r3, #16
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f000 8163 	beq.w	800edce <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800eb08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb0c:	f003 0310 	and.w	r3, r3, #16
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	f000 815c 	beq.w	800edce <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	2210      	movs	r2, #16
 800eb1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb28:	2b40      	cmp	r3, #64	@ 0x40
 800eb2a:	f040 80d4 	bne.w	800ecd6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	685b      	ldr	r3, [r3, #4]
 800eb36:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800eb3a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	f000 80ad 	beq.w	800ec9e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800eb4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	f080 80a5 	bcs.w	800ec9e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800eb5a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	f003 0320 	and.w	r3, r3, #32
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	f040 8086 	bne.w	800ec7c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800eb7c:	e853 3f00 	ldrex	r3, [r3]
 800eb80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800eb84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800eb88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eb8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	461a      	mov	r2, r3
 800eb96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800eb9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800eb9e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eba2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800eba6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ebaa:	e841 2300 	strex	r3, r2, [r1]
 800ebae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ebb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d1da      	bne.n	800eb70 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	3308      	adds	r3, #8
 800ebc0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ebc4:	e853 3f00 	ldrex	r3, [r3]
 800ebc8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ebca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ebcc:	f023 0301 	bic.w	r3, r3, #1
 800ebd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	3308      	adds	r3, #8
 800ebda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ebde:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ebe2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebe4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ebe6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ebea:	e841 2300 	strex	r3, r2, [r1]
 800ebee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ebf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d1e1      	bne.n	800ebba <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	3308      	adds	r3, #8
 800ebfc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ec00:	e853 3f00 	ldrex	r3, [r3]
 800ec04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ec06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ec08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ec0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	3308      	adds	r3, #8
 800ec16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ec1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ec1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ec20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ec22:	e841 2300 	strex	r3, r2, [r1]
 800ec26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ec28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d1e3      	bne.n	800ebf6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2220      	movs	r2, #32
 800ec32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec44:	e853 3f00 	ldrex	r3, [r3]
 800ec48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ec4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec4c:	f023 0310 	bic.w	r3, r3, #16
 800ec50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	461a      	mov	r2, r3
 800ec5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ec60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ec64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ec66:	e841 2300 	strex	r3, r2, [r1]
 800ec6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ec6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d1e4      	bne.n	800ec3c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7fd f837 	bl	800bcea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2202      	movs	r2, #2
 800ec80:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ec8e:	b29b      	uxth	r3, r3
 800ec90:	1ad3      	subs	r3, r2, r3
 800ec92:	b29b      	uxth	r3, r3
 800ec94:	4619      	mov	r1, r3
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f7fc f962 	bl	800af60 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ec9c:	e0d5      	b.n	800ee4a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800eca4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	f040 80ce 	bne.w	800ee4a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f003 0320 	and.w	r3, r3, #32
 800ecba:	2b20      	cmp	r3, #32
 800ecbc:	f040 80c5 	bne.w	800ee4a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2202      	movs	r2, #2
 800ecc4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800eccc:	4619      	mov	r1, r3
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f7fc f946 	bl	800af60 <HAL_UARTEx_RxEventCallback>
      return;
 800ecd4:	e0b9      	b.n	800ee4a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ece2:	b29b      	uxth	r3, r3
 800ece4:	1ad3      	subs	r3, r2, r3
 800ece6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ecf0:	b29b      	uxth	r3, r3
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	f000 80ab 	beq.w	800ee4e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800ecf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	f000 80a6 	beq.w	800ee4e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed0a:	e853 3f00 	ldrex	r3, [r3]
 800ed0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ed10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ed16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	461a      	mov	r2, r3
 800ed20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ed24:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ed2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ed2c:	e841 2300 	strex	r3, r2, [r1]
 800ed30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ed32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d1e4      	bne.n	800ed02 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	3308      	adds	r3, #8
 800ed3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed42:	e853 3f00 	ldrex	r3, [r3]
 800ed46:	623b      	str	r3, [r7, #32]
   return(result);
 800ed48:	6a3b      	ldr	r3, [r7, #32]
 800ed4a:	f023 0301 	bic.w	r3, r3, #1
 800ed4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	3308      	adds	r3, #8
 800ed58:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ed5c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ed5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ed62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed64:	e841 2300 	strex	r3, r2, [r1]
 800ed68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ed6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d1e3      	bne.n	800ed38 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2220      	movs	r2, #32
 800ed74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2200      	movs	r2, #0
 800ed82:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	e853 3f00 	ldrex	r3, [r3]
 800ed90:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	f023 0310 	bic.w	r3, r3, #16
 800ed98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	461a      	mov	r2, r3
 800eda2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800eda6:	61fb      	str	r3, [r7, #28]
 800eda8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edaa:	69b9      	ldr	r1, [r7, #24]
 800edac:	69fa      	ldr	r2, [r7, #28]
 800edae:	e841 2300 	strex	r3, r2, [r1]
 800edb2:	617b      	str	r3, [r7, #20]
   return(result);
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d1e4      	bne.n	800ed84 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2202      	movs	r2, #2
 800edbe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800edc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800edc4:	4619      	mov	r1, r3
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f7fc f8ca 	bl	800af60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800edcc:	e03f      	b.n	800ee4e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800edce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800edd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d00e      	beq.n	800edf8 <HAL_UART_IRQHandler+0x5a8>
 800edda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800edde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d008      	beq.n	800edf8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800edee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f000 ff89 	bl	800fd08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800edf6:	e02d      	b.n	800ee54 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800edf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800edfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d00e      	beq.n	800ee22 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ee04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ee08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d008      	beq.n	800ee22 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d01c      	beq.n	800ee52 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	4798      	blx	r3
    }
    return;
 800ee20:	e017      	b.n	800ee52 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ee22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d012      	beq.n	800ee54 <HAL_UART_IRQHandler+0x604>
 800ee2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ee32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d00c      	beq.n	800ee54 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f000 fd7e 	bl	800f93c <UART_EndTransmit_IT>
    return;
 800ee40:	e008      	b.n	800ee54 <HAL_UART_IRQHandler+0x604>
      return;
 800ee42:	bf00      	nop
 800ee44:	e006      	b.n	800ee54 <HAL_UART_IRQHandler+0x604>
    return;
 800ee46:	bf00      	nop
 800ee48:	e004      	b.n	800ee54 <HAL_UART_IRQHandler+0x604>
      return;
 800ee4a:	bf00      	nop
 800ee4c:	e002      	b.n	800ee54 <HAL_UART_IRQHandler+0x604>
      return;
 800ee4e:	bf00      	nop
 800ee50:	e000      	b.n	800ee54 <HAL_UART_IRQHandler+0x604>
    return;
 800ee52:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800ee54:	37e8      	adds	r7, #232	@ 0xe8
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop

0800ee5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	b083      	sub	sp, #12
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ee64:	bf00      	nop
 800ee66:	370c      	adds	r7, #12
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr

0800ee70 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ee70:	b480      	push	{r7}
 800ee72:	b083      	sub	sp, #12
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ee78:	bf00      	nop
 800ee7a:	370c      	adds	r7, #12
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr

0800ee84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ee8c:	bf00      	nop
 800ee8e:	370c      	adds	r7, #12
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr

0800ee98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ee98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ee9c:	b08a      	sub	sp, #40	@ 0x28
 800ee9e:	af00      	add	r7, sp, #0
 800eea0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800eea2:	2300      	movs	r3, #0
 800eea4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	689a      	ldr	r2, [r3, #8]
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	691b      	ldr	r3, [r3, #16]
 800eeb0:	431a      	orrs	r2, r3
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	695b      	ldr	r3, [r3, #20]
 800eeb6:	431a      	orrs	r2, r3
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	69db      	ldr	r3, [r3, #28]
 800eebc:	4313      	orrs	r3, r2
 800eebe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	681a      	ldr	r2, [r3, #0]
 800eec6:	4b9e      	ldr	r3, [pc, #632]	@ (800f140 <UART_SetConfig+0x2a8>)
 800eec8:	4013      	ands	r3, r2
 800eeca:	68fa      	ldr	r2, [r7, #12]
 800eecc:	6812      	ldr	r2, [r2, #0]
 800eece:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800eed0:	430b      	orrs	r3, r1
 800eed2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	685b      	ldr	r3, [r3, #4]
 800eeda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	68da      	ldr	r2, [r3, #12]
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	430a      	orrs	r2, r1
 800eee8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	699b      	ldr	r3, [r3, #24]
 800eeee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	4a93      	ldr	r2, [pc, #588]	@ (800f144 <UART_SetConfig+0x2ac>)
 800eef6:	4293      	cmp	r3, r2
 800eef8:	d004      	beq.n	800ef04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	6a1b      	ldr	r3, [r3, #32]
 800eefe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef00:	4313      	orrs	r3, r2
 800ef02:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	689b      	ldr	r3, [r3, #8]
 800ef0a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef14:	430a      	orrs	r2, r1
 800ef16:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	4a8a      	ldr	r2, [pc, #552]	@ (800f148 <UART_SetConfig+0x2b0>)
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	d126      	bne.n	800ef70 <UART_SetConfig+0xd8>
 800ef22:	4b8a      	ldr	r3, [pc, #552]	@ (800f14c <UART_SetConfig+0x2b4>)
 800ef24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ef28:	f003 0303 	and.w	r3, r3, #3
 800ef2c:	2b03      	cmp	r3, #3
 800ef2e:	d81b      	bhi.n	800ef68 <UART_SetConfig+0xd0>
 800ef30:	a201      	add	r2, pc, #4	@ (adr r2, 800ef38 <UART_SetConfig+0xa0>)
 800ef32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef36:	bf00      	nop
 800ef38:	0800ef49 	.word	0x0800ef49
 800ef3c:	0800ef59 	.word	0x0800ef59
 800ef40:	0800ef51 	.word	0x0800ef51
 800ef44:	0800ef61 	.word	0x0800ef61
 800ef48:	2301      	movs	r3, #1
 800ef4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ef4e:	e0ab      	b.n	800f0a8 <UART_SetConfig+0x210>
 800ef50:	2302      	movs	r3, #2
 800ef52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ef56:	e0a7      	b.n	800f0a8 <UART_SetConfig+0x210>
 800ef58:	2304      	movs	r3, #4
 800ef5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ef5e:	e0a3      	b.n	800f0a8 <UART_SetConfig+0x210>
 800ef60:	2308      	movs	r3, #8
 800ef62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ef66:	e09f      	b.n	800f0a8 <UART_SetConfig+0x210>
 800ef68:	2310      	movs	r3, #16
 800ef6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ef6e:	e09b      	b.n	800f0a8 <UART_SetConfig+0x210>
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	4a76      	ldr	r2, [pc, #472]	@ (800f150 <UART_SetConfig+0x2b8>)
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d138      	bne.n	800efec <UART_SetConfig+0x154>
 800ef7a:	4b74      	ldr	r3, [pc, #464]	@ (800f14c <UART_SetConfig+0x2b4>)
 800ef7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ef80:	f003 030c 	and.w	r3, r3, #12
 800ef84:	2b0c      	cmp	r3, #12
 800ef86:	d82d      	bhi.n	800efe4 <UART_SetConfig+0x14c>
 800ef88:	a201      	add	r2, pc, #4	@ (adr r2, 800ef90 <UART_SetConfig+0xf8>)
 800ef8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef8e:	bf00      	nop
 800ef90:	0800efc5 	.word	0x0800efc5
 800ef94:	0800efe5 	.word	0x0800efe5
 800ef98:	0800efe5 	.word	0x0800efe5
 800ef9c:	0800efe5 	.word	0x0800efe5
 800efa0:	0800efd5 	.word	0x0800efd5
 800efa4:	0800efe5 	.word	0x0800efe5
 800efa8:	0800efe5 	.word	0x0800efe5
 800efac:	0800efe5 	.word	0x0800efe5
 800efb0:	0800efcd 	.word	0x0800efcd
 800efb4:	0800efe5 	.word	0x0800efe5
 800efb8:	0800efe5 	.word	0x0800efe5
 800efbc:	0800efe5 	.word	0x0800efe5
 800efc0:	0800efdd 	.word	0x0800efdd
 800efc4:	2300      	movs	r3, #0
 800efc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800efca:	e06d      	b.n	800f0a8 <UART_SetConfig+0x210>
 800efcc:	2302      	movs	r3, #2
 800efce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800efd2:	e069      	b.n	800f0a8 <UART_SetConfig+0x210>
 800efd4:	2304      	movs	r3, #4
 800efd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800efda:	e065      	b.n	800f0a8 <UART_SetConfig+0x210>
 800efdc:	2308      	movs	r3, #8
 800efde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800efe2:	e061      	b.n	800f0a8 <UART_SetConfig+0x210>
 800efe4:	2310      	movs	r3, #16
 800efe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800efea:	e05d      	b.n	800f0a8 <UART_SetConfig+0x210>
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	4a58      	ldr	r2, [pc, #352]	@ (800f154 <UART_SetConfig+0x2bc>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d125      	bne.n	800f042 <UART_SetConfig+0x1aa>
 800eff6:	4b55      	ldr	r3, [pc, #340]	@ (800f14c <UART_SetConfig+0x2b4>)
 800eff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800effc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f000:	2b30      	cmp	r3, #48	@ 0x30
 800f002:	d016      	beq.n	800f032 <UART_SetConfig+0x19a>
 800f004:	2b30      	cmp	r3, #48	@ 0x30
 800f006:	d818      	bhi.n	800f03a <UART_SetConfig+0x1a2>
 800f008:	2b20      	cmp	r3, #32
 800f00a:	d00a      	beq.n	800f022 <UART_SetConfig+0x18a>
 800f00c:	2b20      	cmp	r3, #32
 800f00e:	d814      	bhi.n	800f03a <UART_SetConfig+0x1a2>
 800f010:	2b00      	cmp	r3, #0
 800f012:	d002      	beq.n	800f01a <UART_SetConfig+0x182>
 800f014:	2b10      	cmp	r3, #16
 800f016:	d008      	beq.n	800f02a <UART_SetConfig+0x192>
 800f018:	e00f      	b.n	800f03a <UART_SetConfig+0x1a2>
 800f01a:	2300      	movs	r3, #0
 800f01c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f020:	e042      	b.n	800f0a8 <UART_SetConfig+0x210>
 800f022:	2302      	movs	r3, #2
 800f024:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f028:	e03e      	b.n	800f0a8 <UART_SetConfig+0x210>
 800f02a:	2304      	movs	r3, #4
 800f02c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f030:	e03a      	b.n	800f0a8 <UART_SetConfig+0x210>
 800f032:	2308      	movs	r3, #8
 800f034:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f038:	e036      	b.n	800f0a8 <UART_SetConfig+0x210>
 800f03a:	2310      	movs	r3, #16
 800f03c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f040:	e032      	b.n	800f0a8 <UART_SetConfig+0x210>
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	4a3f      	ldr	r2, [pc, #252]	@ (800f144 <UART_SetConfig+0x2ac>)
 800f048:	4293      	cmp	r3, r2
 800f04a:	d12a      	bne.n	800f0a2 <UART_SetConfig+0x20a>
 800f04c:	4b3f      	ldr	r3, [pc, #252]	@ (800f14c <UART_SetConfig+0x2b4>)
 800f04e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f052:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f056:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f05a:	d01a      	beq.n	800f092 <UART_SetConfig+0x1fa>
 800f05c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f060:	d81b      	bhi.n	800f09a <UART_SetConfig+0x202>
 800f062:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f066:	d00c      	beq.n	800f082 <UART_SetConfig+0x1ea>
 800f068:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f06c:	d815      	bhi.n	800f09a <UART_SetConfig+0x202>
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d003      	beq.n	800f07a <UART_SetConfig+0x1e2>
 800f072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f076:	d008      	beq.n	800f08a <UART_SetConfig+0x1f2>
 800f078:	e00f      	b.n	800f09a <UART_SetConfig+0x202>
 800f07a:	2300      	movs	r3, #0
 800f07c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f080:	e012      	b.n	800f0a8 <UART_SetConfig+0x210>
 800f082:	2302      	movs	r3, #2
 800f084:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f088:	e00e      	b.n	800f0a8 <UART_SetConfig+0x210>
 800f08a:	2304      	movs	r3, #4
 800f08c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f090:	e00a      	b.n	800f0a8 <UART_SetConfig+0x210>
 800f092:	2308      	movs	r3, #8
 800f094:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f098:	e006      	b.n	800f0a8 <UART_SetConfig+0x210>
 800f09a:	2310      	movs	r3, #16
 800f09c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f0a0:	e002      	b.n	800f0a8 <UART_SetConfig+0x210>
 800f0a2:	2310      	movs	r3, #16
 800f0a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	4a25      	ldr	r2, [pc, #148]	@ (800f144 <UART_SetConfig+0x2ac>)
 800f0ae:	4293      	cmp	r3, r2
 800f0b0:	f040 808a 	bne.w	800f1c8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f0b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f0b8:	2b08      	cmp	r3, #8
 800f0ba:	d824      	bhi.n	800f106 <UART_SetConfig+0x26e>
 800f0bc:	a201      	add	r2, pc, #4	@ (adr r2, 800f0c4 <UART_SetConfig+0x22c>)
 800f0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0c2:	bf00      	nop
 800f0c4:	0800f0e9 	.word	0x0800f0e9
 800f0c8:	0800f107 	.word	0x0800f107
 800f0cc:	0800f0f1 	.word	0x0800f0f1
 800f0d0:	0800f107 	.word	0x0800f107
 800f0d4:	0800f0f7 	.word	0x0800f0f7
 800f0d8:	0800f107 	.word	0x0800f107
 800f0dc:	0800f107 	.word	0x0800f107
 800f0e0:	0800f107 	.word	0x0800f107
 800f0e4:	0800f0ff 	.word	0x0800f0ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0e8:	f7fe f8f8 	bl	800d2dc <HAL_RCC_GetPCLK1Freq>
 800f0ec:	61f8      	str	r0, [r7, #28]
        break;
 800f0ee:	e010      	b.n	800f112 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f0f0:	4b19      	ldr	r3, [pc, #100]	@ (800f158 <UART_SetConfig+0x2c0>)
 800f0f2:	61fb      	str	r3, [r7, #28]
        break;
 800f0f4:	e00d      	b.n	800f112 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f0f6:	f7fe f859 	bl	800d1ac <HAL_RCC_GetSysClockFreq>
 800f0fa:	61f8      	str	r0, [r7, #28]
        break;
 800f0fc:	e009      	b.n	800f112 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f102:	61fb      	str	r3, [r7, #28]
        break;
 800f104:	e005      	b.n	800f112 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800f106:	2300      	movs	r3, #0
 800f108:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800f10a:	2301      	movs	r3, #1
 800f10c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800f110:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f112:	69fb      	ldr	r3, [r7, #28]
 800f114:	2b00      	cmp	r3, #0
 800f116:	f000 8109 	beq.w	800f32c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	685a      	ldr	r2, [r3, #4]
 800f11e:	4613      	mov	r3, r2
 800f120:	005b      	lsls	r3, r3, #1
 800f122:	4413      	add	r3, r2
 800f124:	69fa      	ldr	r2, [r7, #28]
 800f126:	429a      	cmp	r2, r3
 800f128:	d305      	bcc.n	800f136 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800f130:	69fa      	ldr	r2, [r7, #28]
 800f132:	429a      	cmp	r2, r3
 800f134:	d912      	bls.n	800f15c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800f136:	2301      	movs	r3, #1
 800f138:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800f13c:	e0f6      	b.n	800f32c <UART_SetConfig+0x494>
 800f13e:	bf00      	nop
 800f140:	efff69f3 	.word	0xefff69f3
 800f144:	40008000 	.word	0x40008000
 800f148:	40013800 	.word	0x40013800
 800f14c:	40021000 	.word	0x40021000
 800f150:	40004400 	.word	0x40004400
 800f154:	40004800 	.word	0x40004800
 800f158:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	2200      	movs	r2, #0
 800f160:	461c      	mov	r4, r3
 800f162:	4615      	mov	r5, r2
 800f164:	f04f 0200 	mov.w	r2, #0
 800f168:	f04f 0300 	mov.w	r3, #0
 800f16c:	022b      	lsls	r3, r5, #8
 800f16e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800f172:	0222      	lsls	r2, r4, #8
 800f174:	68f9      	ldr	r1, [r7, #12]
 800f176:	6849      	ldr	r1, [r1, #4]
 800f178:	0849      	lsrs	r1, r1, #1
 800f17a:	2000      	movs	r0, #0
 800f17c:	4688      	mov	r8, r1
 800f17e:	4681      	mov	r9, r0
 800f180:	eb12 0a08 	adds.w	sl, r2, r8
 800f184:	eb43 0b09 	adc.w	fp, r3, r9
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	685b      	ldr	r3, [r3, #4]
 800f18c:	2200      	movs	r2, #0
 800f18e:	603b      	str	r3, [r7, #0]
 800f190:	607a      	str	r2, [r7, #4]
 800f192:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f196:	4650      	mov	r0, sl
 800f198:	4659      	mov	r1, fp
 800f19a:	f7fb f9f3 	bl	800a584 <__aeabi_uldivmod>
 800f19e:	4602      	mov	r2, r0
 800f1a0:	460b      	mov	r3, r1
 800f1a2:	4613      	mov	r3, r2
 800f1a4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f1a6:	69bb      	ldr	r3, [r7, #24]
 800f1a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f1ac:	d308      	bcc.n	800f1c0 <UART_SetConfig+0x328>
 800f1ae:	69bb      	ldr	r3, [r7, #24]
 800f1b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f1b4:	d204      	bcs.n	800f1c0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	69ba      	ldr	r2, [r7, #24]
 800f1bc:	60da      	str	r2, [r3, #12]
 800f1be:	e0b5      	b.n	800f32c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800f1c6:	e0b1      	b.n	800f32c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	69db      	ldr	r3, [r3, #28]
 800f1cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f1d0:	d15d      	bne.n	800f28e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800f1d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f1d6:	2b08      	cmp	r3, #8
 800f1d8:	d827      	bhi.n	800f22a <UART_SetConfig+0x392>
 800f1da:	a201      	add	r2, pc, #4	@ (adr r2, 800f1e0 <UART_SetConfig+0x348>)
 800f1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1e0:	0800f205 	.word	0x0800f205
 800f1e4:	0800f20d 	.word	0x0800f20d
 800f1e8:	0800f215 	.word	0x0800f215
 800f1ec:	0800f22b 	.word	0x0800f22b
 800f1f0:	0800f21b 	.word	0x0800f21b
 800f1f4:	0800f22b 	.word	0x0800f22b
 800f1f8:	0800f22b 	.word	0x0800f22b
 800f1fc:	0800f22b 	.word	0x0800f22b
 800f200:	0800f223 	.word	0x0800f223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f204:	f7fe f86a 	bl	800d2dc <HAL_RCC_GetPCLK1Freq>
 800f208:	61f8      	str	r0, [r7, #28]
        break;
 800f20a:	e014      	b.n	800f236 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f20c:	f7fe f87c 	bl	800d308 <HAL_RCC_GetPCLK2Freq>
 800f210:	61f8      	str	r0, [r7, #28]
        break;
 800f212:	e010      	b.n	800f236 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f214:	4b4c      	ldr	r3, [pc, #304]	@ (800f348 <UART_SetConfig+0x4b0>)
 800f216:	61fb      	str	r3, [r7, #28]
        break;
 800f218:	e00d      	b.n	800f236 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f21a:	f7fd ffc7 	bl	800d1ac <HAL_RCC_GetSysClockFreq>
 800f21e:	61f8      	str	r0, [r7, #28]
        break;
 800f220:	e009      	b.n	800f236 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f226:	61fb      	str	r3, [r7, #28]
        break;
 800f228:	e005      	b.n	800f236 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800f22a:	2300      	movs	r3, #0
 800f22c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800f22e:	2301      	movs	r3, #1
 800f230:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800f234:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f236:	69fb      	ldr	r3, [r7, #28]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d077      	beq.n	800f32c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f23c:	69fb      	ldr	r3, [r7, #28]
 800f23e:	005a      	lsls	r2, r3, #1
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	085b      	lsrs	r3, r3, #1
 800f246:	441a      	add	r2, r3
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f250:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f252:	69bb      	ldr	r3, [r7, #24]
 800f254:	2b0f      	cmp	r3, #15
 800f256:	d916      	bls.n	800f286 <UART_SetConfig+0x3ee>
 800f258:	69bb      	ldr	r3, [r7, #24]
 800f25a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f25e:	d212      	bcs.n	800f286 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f260:	69bb      	ldr	r3, [r7, #24]
 800f262:	b29b      	uxth	r3, r3
 800f264:	f023 030f 	bic.w	r3, r3, #15
 800f268:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f26a:	69bb      	ldr	r3, [r7, #24]
 800f26c:	085b      	lsrs	r3, r3, #1
 800f26e:	b29b      	uxth	r3, r3
 800f270:	f003 0307 	and.w	r3, r3, #7
 800f274:	b29a      	uxth	r2, r3
 800f276:	8afb      	ldrh	r3, [r7, #22]
 800f278:	4313      	orrs	r3, r2
 800f27a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	8afa      	ldrh	r2, [r7, #22]
 800f282:	60da      	str	r2, [r3, #12]
 800f284:	e052      	b.n	800f32c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800f286:	2301      	movs	r3, #1
 800f288:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800f28c:	e04e      	b.n	800f32c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f28e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f292:	2b08      	cmp	r3, #8
 800f294:	d827      	bhi.n	800f2e6 <UART_SetConfig+0x44e>
 800f296:	a201      	add	r2, pc, #4	@ (adr r2, 800f29c <UART_SetConfig+0x404>)
 800f298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f29c:	0800f2c1 	.word	0x0800f2c1
 800f2a0:	0800f2c9 	.word	0x0800f2c9
 800f2a4:	0800f2d1 	.word	0x0800f2d1
 800f2a8:	0800f2e7 	.word	0x0800f2e7
 800f2ac:	0800f2d7 	.word	0x0800f2d7
 800f2b0:	0800f2e7 	.word	0x0800f2e7
 800f2b4:	0800f2e7 	.word	0x0800f2e7
 800f2b8:	0800f2e7 	.word	0x0800f2e7
 800f2bc:	0800f2df 	.word	0x0800f2df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f2c0:	f7fe f80c 	bl	800d2dc <HAL_RCC_GetPCLK1Freq>
 800f2c4:	61f8      	str	r0, [r7, #28]
        break;
 800f2c6:	e014      	b.n	800f2f2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f2c8:	f7fe f81e 	bl	800d308 <HAL_RCC_GetPCLK2Freq>
 800f2cc:	61f8      	str	r0, [r7, #28]
        break;
 800f2ce:	e010      	b.n	800f2f2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f2d0:	4b1d      	ldr	r3, [pc, #116]	@ (800f348 <UART_SetConfig+0x4b0>)
 800f2d2:	61fb      	str	r3, [r7, #28]
        break;
 800f2d4:	e00d      	b.n	800f2f2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f2d6:	f7fd ff69 	bl	800d1ac <HAL_RCC_GetSysClockFreq>
 800f2da:	61f8      	str	r0, [r7, #28]
        break;
 800f2dc:	e009      	b.n	800f2f2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f2e2:	61fb      	str	r3, [r7, #28]
        break;
 800f2e4:	e005      	b.n	800f2f2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800f2f0:	bf00      	nop
    }

    if (pclk != 0U)
 800f2f2:	69fb      	ldr	r3, [r7, #28]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d019      	beq.n	800f32c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	685b      	ldr	r3, [r3, #4]
 800f2fc:	085a      	lsrs	r2, r3, #1
 800f2fe:	69fb      	ldr	r3, [r7, #28]
 800f300:	441a      	add	r2, r3
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	685b      	ldr	r3, [r3, #4]
 800f306:	fbb2 f3f3 	udiv	r3, r2, r3
 800f30a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f30c:	69bb      	ldr	r3, [r7, #24]
 800f30e:	2b0f      	cmp	r3, #15
 800f310:	d909      	bls.n	800f326 <UART_SetConfig+0x48e>
 800f312:	69bb      	ldr	r3, [r7, #24]
 800f314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f318:	d205      	bcs.n	800f326 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	b29a      	uxth	r2, r3
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	60da      	str	r2, [r3, #12]
 800f324:	e002      	b.n	800f32c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800f326:	2301      	movs	r3, #1
 800f328:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	2200      	movs	r2, #0
 800f330:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	2200      	movs	r2, #0
 800f336:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800f338:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3728      	adds	r7, #40	@ 0x28
 800f340:	46bd      	mov	sp, r7
 800f342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f346:	bf00      	nop
 800f348:	00f42400 	.word	0x00f42400

0800f34c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f34c:	b480      	push	{r7}
 800f34e:	b083      	sub	sp, #12
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f358:	f003 0308 	and.w	r3, r3, #8
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d00a      	beq.n	800f376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	685b      	ldr	r3, [r3, #4]
 800f366:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	430a      	orrs	r2, r1
 800f374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f37a:	f003 0301 	and.w	r3, r3, #1
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d00a      	beq.n	800f398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	685b      	ldr	r3, [r3, #4]
 800f388:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	430a      	orrs	r2, r1
 800f396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f39c:	f003 0302 	and.w	r3, r3, #2
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d00a      	beq.n	800f3ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	430a      	orrs	r2, r1
 800f3b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3be:	f003 0304 	and.w	r3, r3, #4
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d00a      	beq.n	800f3dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	685b      	ldr	r3, [r3, #4]
 800f3cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	430a      	orrs	r2, r1
 800f3da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3e0:	f003 0310 	and.w	r3, r3, #16
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d00a      	beq.n	800f3fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	689b      	ldr	r3, [r3, #8]
 800f3ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	430a      	orrs	r2, r1
 800f3fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f402:	f003 0320 	and.w	r3, r3, #32
 800f406:	2b00      	cmp	r3, #0
 800f408:	d00a      	beq.n	800f420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	689b      	ldr	r3, [r3, #8]
 800f410:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	430a      	orrs	r2, r1
 800f41e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d01a      	beq.n	800f462 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	430a      	orrs	r2, r1
 800f440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f446:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f44a:	d10a      	bne.n	800f462 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	685b      	ldr	r3, [r3, #4]
 800f452:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	430a      	orrs	r2, r1
 800f460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d00a      	beq.n	800f484 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	685b      	ldr	r3, [r3, #4]
 800f474:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	430a      	orrs	r2, r1
 800f482:	605a      	str	r2, [r3, #4]
  }
}
 800f484:	bf00      	nop
 800f486:	370c      	adds	r7, #12
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr

0800f490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b098      	sub	sp, #96	@ 0x60
 800f494:	af02      	add	r7, sp, #8
 800f496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2200      	movs	r2, #0
 800f49c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f4a0:	f7fc faec 	bl	800ba7c <HAL_GetTick>
 800f4a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	f003 0308 	and.w	r3, r3, #8
 800f4b0:	2b08      	cmp	r3, #8
 800f4b2:	d12e      	bne.n	800f512 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f4b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f4b8:	9300      	str	r3, [sp, #0]
 800f4ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f4bc:	2200      	movs	r2, #0
 800f4be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f000 f88c 	bl	800f5e0 <UART_WaitOnFlagUntilTimeout>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d021      	beq.n	800f512 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4d6:	e853 3f00 	ldrex	r3, [r3]
 800f4da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f4dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f4e2:	653b      	str	r3, [r7, #80]	@ 0x50
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	461a      	mov	r2, r3
 800f4ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f4ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800f4ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f4f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f4f4:	e841 2300 	strex	r3, r2, [r1]
 800f4f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f4fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d1e6      	bne.n	800f4ce <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2220      	movs	r2, #32
 800f504:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2200      	movs	r2, #0
 800f50a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f50e:	2303      	movs	r3, #3
 800f510:	e062      	b.n	800f5d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	f003 0304 	and.w	r3, r3, #4
 800f51c:	2b04      	cmp	r3, #4
 800f51e:	d149      	bne.n	800f5b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f520:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f524:	9300      	str	r3, [sp, #0]
 800f526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f528:	2200      	movs	r2, #0
 800f52a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f000 f856 	bl	800f5e0 <UART_WaitOnFlagUntilTimeout>
 800f534:	4603      	mov	r3, r0
 800f536:	2b00      	cmp	r3, #0
 800f538:	d03c      	beq.n	800f5b4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f542:	e853 3f00 	ldrex	r3, [r3]
 800f546:	623b      	str	r3, [r7, #32]
   return(result);
 800f548:	6a3b      	ldr	r3, [r7, #32]
 800f54a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f54e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	461a      	mov	r2, r3
 800f556:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f558:	633b      	str	r3, [r7, #48]	@ 0x30
 800f55a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f55c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f55e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f560:	e841 2300 	strex	r3, r2, [r1]
 800f564:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d1e6      	bne.n	800f53a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	3308      	adds	r3, #8
 800f572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	e853 3f00 	ldrex	r3, [r3]
 800f57a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	f023 0301 	bic.w	r3, r3, #1
 800f582:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	3308      	adds	r3, #8
 800f58a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f58c:	61fa      	str	r2, [r7, #28]
 800f58e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f590:	69b9      	ldr	r1, [r7, #24]
 800f592:	69fa      	ldr	r2, [r7, #28]
 800f594:	e841 2300 	strex	r3, r2, [r1]
 800f598:	617b      	str	r3, [r7, #20]
   return(result);
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d1e5      	bne.n	800f56c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2220      	movs	r2, #32
 800f5a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f5b0:	2303      	movs	r3, #3
 800f5b2:	e011      	b.n	800f5d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2220      	movs	r2, #32
 800f5b8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2220      	movs	r2, #32
 800f5be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800f5d6:	2300      	movs	r3, #0
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3758      	adds	r7, #88	@ 0x58
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b084      	sub	sp, #16
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	60f8      	str	r0, [r7, #12]
 800f5e8:	60b9      	str	r1, [r7, #8]
 800f5ea:	603b      	str	r3, [r7, #0]
 800f5ec:	4613      	mov	r3, r2
 800f5ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f5f0:	e04f      	b.n	800f692 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f5f2:	69bb      	ldr	r3, [r7, #24]
 800f5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5f8:	d04b      	beq.n	800f692 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f5fa:	f7fc fa3f 	bl	800ba7c <HAL_GetTick>
 800f5fe:	4602      	mov	r2, r0
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	1ad3      	subs	r3, r2, r3
 800f604:	69ba      	ldr	r2, [r7, #24]
 800f606:	429a      	cmp	r2, r3
 800f608:	d302      	bcc.n	800f610 <UART_WaitOnFlagUntilTimeout+0x30>
 800f60a:	69bb      	ldr	r3, [r7, #24]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d101      	bne.n	800f614 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f610:	2303      	movs	r3, #3
 800f612:	e04e      	b.n	800f6b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	f003 0304 	and.w	r3, r3, #4
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d037      	beq.n	800f692 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	2b80      	cmp	r3, #128	@ 0x80
 800f626:	d034      	beq.n	800f692 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	2b40      	cmp	r3, #64	@ 0x40
 800f62c:	d031      	beq.n	800f692 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	69db      	ldr	r3, [r3, #28]
 800f634:	f003 0308 	and.w	r3, r3, #8
 800f638:	2b08      	cmp	r3, #8
 800f63a:	d110      	bne.n	800f65e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2208      	movs	r2, #8
 800f642:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f644:	68f8      	ldr	r0, [r7, #12]
 800f646:	f000 f8ff 	bl	800f848 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	2208      	movs	r2, #8
 800f64e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2200      	movs	r2, #0
 800f656:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800f65a:	2301      	movs	r3, #1
 800f65c:	e029      	b.n	800f6b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	69db      	ldr	r3, [r3, #28]
 800f664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f66c:	d111      	bne.n	800f692 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f676:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f678:	68f8      	ldr	r0, [r7, #12]
 800f67a:	f000 f8e5 	bl	800f848 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	2220      	movs	r2, #32
 800f682:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2200      	movs	r2, #0
 800f68a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800f68e:	2303      	movs	r3, #3
 800f690:	e00f      	b.n	800f6b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	69da      	ldr	r2, [r3, #28]
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	4013      	ands	r3, r2
 800f69c:	68ba      	ldr	r2, [r7, #8]
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	bf0c      	ite	eq
 800f6a2:	2301      	moveq	r3, #1
 800f6a4:	2300      	movne	r3, #0
 800f6a6:	b2db      	uxtb	r3, r3
 800f6a8:	461a      	mov	r2, r3
 800f6aa:	79fb      	ldrb	r3, [r7, #7]
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	d0a0      	beq.n	800f5f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f6b0:	2300      	movs	r3, #0
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	3710      	adds	r7, #16
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
	...

0800f6bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b097      	sub	sp, #92	@ 0x5c
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	60f8      	str	r0, [r7, #12]
 800f6c4:	60b9      	str	r1, [r7, #8]
 800f6c6:	4613      	mov	r3, r2
 800f6c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	68ba      	ldr	r2, [r7, #8]
 800f6ce:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	88fa      	ldrh	r2, [r7, #6]
 800f6d4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	88fa      	ldrh	r2, [r7, #6]
 800f6dc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	689b      	ldr	r3, [r3, #8]
 800f6ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f6ee:	d10e      	bne.n	800f70e <UART_Start_Receive_IT+0x52>
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	691b      	ldr	r3, [r3, #16]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d105      	bne.n	800f704 <UART_Start_Receive_IT+0x48>
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800f6fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f702:	e02d      	b.n	800f760 <UART_Start_Receive_IT+0xa4>
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	22ff      	movs	r2, #255	@ 0xff
 800f708:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f70c:	e028      	b.n	800f760 <UART_Start_Receive_IT+0xa4>
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	689b      	ldr	r3, [r3, #8]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d10d      	bne.n	800f732 <UART_Start_Receive_IT+0x76>
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	691b      	ldr	r3, [r3, #16]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d104      	bne.n	800f728 <UART_Start_Receive_IT+0x6c>
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	22ff      	movs	r2, #255	@ 0xff
 800f722:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f726:	e01b      	b.n	800f760 <UART_Start_Receive_IT+0xa4>
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	227f      	movs	r2, #127	@ 0x7f
 800f72c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f730:	e016      	b.n	800f760 <UART_Start_Receive_IT+0xa4>
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	689b      	ldr	r3, [r3, #8]
 800f736:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f73a:	d10d      	bne.n	800f758 <UART_Start_Receive_IT+0x9c>
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	691b      	ldr	r3, [r3, #16]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d104      	bne.n	800f74e <UART_Start_Receive_IT+0x92>
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	227f      	movs	r2, #127	@ 0x7f
 800f748:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f74c:	e008      	b.n	800f760 <UART_Start_Receive_IT+0xa4>
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	223f      	movs	r2, #63	@ 0x3f
 800f752:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f756:	e003      	b.n	800f760 <UART_Start_Receive_IT+0xa4>
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	2200      	movs	r2, #0
 800f75c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	2200      	movs	r2, #0
 800f764:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	2222      	movs	r2, #34	@ 0x22
 800f76c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	3308      	adds	r3, #8
 800f776:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f77a:	e853 3f00 	ldrex	r3, [r3]
 800f77e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f782:	f043 0301 	orr.w	r3, r3, #1
 800f786:	657b      	str	r3, [r7, #84]	@ 0x54
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	3308      	adds	r3, #8
 800f78e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f790:	64ba      	str	r2, [r7, #72]	@ 0x48
 800f792:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f794:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f796:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f798:	e841 2300 	strex	r3, r2, [r1]
 800f79c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f79e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d1e5      	bne.n	800f770 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	689b      	ldr	r3, [r3, #8]
 800f7a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f7ac:	d107      	bne.n	800f7be <UART_Start_Receive_IT+0x102>
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	691b      	ldr	r3, [r3, #16]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d103      	bne.n	800f7be <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	4a21      	ldr	r2, [pc, #132]	@ (800f840 <UART_Start_Receive_IT+0x184>)
 800f7ba:	669a      	str	r2, [r3, #104]	@ 0x68
 800f7bc:	e002      	b.n	800f7c4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	4a20      	ldr	r2, [pc, #128]	@ (800f844 <UART_Start_Receive_IT+0x188>)
 800f7c2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	691b      	ldr	r3, [r3, #16]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d019      	beq.n	800f800 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7d4:	e853 3f00 	ldrex	r3, [r3]
 800f7d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7dc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800f7e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	461a      	mov	r2, r3
 800f7e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f7ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800f7ec:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f7f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f7f2:	e841 2300 	strex	r3, r2, [r1]
 800f7f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f7f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d1e6      	bne.n	800f7cc <UART_Start_Receive_IT+0x110>
 800f7fe:	e018      	b.n	800f832 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	e853 3f00 	ldrex	r3, [r3]
 800f80c:	613b      	str	r3, [r7, #16]
   return(result);
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	f043 0320 	orr.w	r3, r3, #32
 800f814:	653b      	str	r3, [r7, #80]	@ 0x50
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	461a      	mov	r2, r3
 800f81c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f81e:	623b      	str	r3, [r7, #32]
 800f820:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f822:	69f9      	ldr	r1, [r7, #28]
 800f824:	6a3a      	ldr	r2, [r7, #32]
 800f826:	e841 2300 	strex	r3, r2, [r1]
 800f82a:	61bb      	str	r3, [r7, #24]
   return(result);
 800f82c:	69bb      	ldr	r3, [r7, #24]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d1e6      	bne.n	800f800 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800f832:	2300      	movs	r3, #0
}
 800f834:	4618      	mov	r0, r3
 800f836:	375c      	adds	r7, #92	@ 0x5c
 800f838:	46bd      	mov	sp, r7
 800f83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83e:	4770      	bx	lr
 800f840:	0800fb4d 	.word	0x0800fb4d
 800f844:	0800f991 	.word	0x0800f991

0800f848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f848:	b480      	push	{r7}
 800f84a:	b095      	sub	sp, #84	@ 0x54
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f858:	e853 3f00 	ldrex	r3, [r3]
 800f85c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f860:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f864:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	461a      	mov	r2, r3
 800f86c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f86e:	643b      	str	r3, [r7, #64]	@ 0x40
 800f870:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f872:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f874:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f876:	e841 2300 	strex	r3, r2, [r1]
 800f87a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d1e6      	bne.n	800f850 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	3308      	adds	r3, #8
 800f888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f88a:	6a3b      	ldr	r3, [r7, #32]
 800f88c:	e853 3f00 	ldrex	r3, [r3]
 800f890:	61fb      	str	r3, [r7, #28]
   return(result);
 800f892:	69fb      	ldr	r3, [r7, #28]
 800f894:	f023 0301 	bic.w	r3, r3, #1
 800f898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	3308      	adds	r3, #8
 800f8a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f8a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f8a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f8a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f8aa:	e841 2300 	strex	r3, r2, [r1]
 800f8ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d1e5      	bne.n	800f882 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f8ba:	2b01      	cmp	r3, #1
 800f8bc:	d118      	bne.n	800f8f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	e853 3f00 	ldrex	r3, [r3]
 800f8ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	f023 0310 	bic.w	r3, r3, #16
 800f8d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	461a      	mov	r2, r3
 800f8da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8dc:	61bb      	str	r3, [r7, #24]
 800f8de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8e0:	6979      	ldr	r1, [r7, #20]
 800f8e2:	69ba      	ldr	r2, [r7, #24]
 800f8e4:	e841 2300 	strex	r3, r2, [r1]
 800f8e8:	613b      	str	r3, [r7, #16]
   return(result);
 800f8ea:	693b      	ldr	r3, [r7, #16]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d1e6      	bne.n	800f8be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2220      	movs	r2, #32
 800f8f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2200      	movs	r2, #0
 800f902:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800f904:	bf00      	nop
 800f906:	3754      	adds	r7, #84	@ 0x54
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr

0800f910 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b084      	sub	sp, #16
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f91c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2200      	movs	r2, #0
 800f922:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	2200      	movs	r2, #0
 800f92a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f92e:	68f8      	ldr	r0, [r7, #12]
 800f930:	f7ff faa8 	bl	800ee84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f934:	bf00      	nop
 800f936:	3710      	adds	r7, #16
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b088      	sub	sp, #32
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	e853 3f00 	ldrex	r3, [r3]
 800f950:	60bb      	str	r3, [r7, #8]
   return(result);
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f958:	61fb      	str	r3, [r7, #28]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	461a      	mov	r2, r3
 800f960:	69fb      	ldr	r3, [r7, #28]
 800f962:	61bb      	str	r3, [r7, #24]
 800f964:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f966:	6979      	ldr	r1, [r7, #20]
 800f968:	69ba      	ldr	r2, [r7, #24]
 800f96a:	e841 2300 	strex	r3, r2, [r1]
 800f96e:	613b      	str	r3, [r7, #16]
   return(result);
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d1e6      	bne.n	800f944 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2220      	movs	r2, #32
 800f97a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2200      	movs	r2, #0
 800f980:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f7ff fa6a 	bl	800ee5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f988:	bf00      	nop
 800f98a:	3720      	adds	r7, #32
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}

0800f990 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b09c      	sub	sp, #112	@ 0x70
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f99e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9a8:	2b22      	cmp	r3, #34	@ 0x22
 800f9aa:	f040 80be 	bne.w	800fb2a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f9b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f9b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800f9bc:	b2d9      	uxtb	r1, r3
 800f9be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800f9c2:	b2da      	uxtb	r2, r3
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9c8:	400a      	ands	r2, r1
 800f9ca:	b2d2      	uxtb	r2, r2
 800f9cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9d2:	1c5a      	adds	r2, r3, #1
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f9de:	b29b      	uxth	r3, r3
 800f9e0:	3b01      	subs	r3, #1
 800f9e2:	b29a      	uxth	r2, r3
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f9f0:	b29b      	uxth	r3, r3
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	f040 80a3 	bne.w	800fb3e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa00:	e853 3f00 	ldrex	r3, [r3]
 800fa04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fa06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fa08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fa0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	461a      	mov	r2, r3
 800fa14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fa16:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fa18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fa1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fa1e:	e841 2300 	strex	r3, r2, [r1]
 800fa22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fa24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d1e6      	bne.n	800f9f8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	3308      	adds	r3, #8
 800fa30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa34:	e853 3f00 	ldrex	r3, [r3]
 800fa38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fa3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa3c:	f023 0301 	bic.w	r3, r3, #1
 800fa40:	667b      	str	r3, [r7, #100]	@ 0x64
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	3308      	adds	r3, #8
 800fa48:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800fa4a:	647a      	str	r2, [r7, #68]	@ 0x44
 800fa4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fa50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fa52:	e841 2300 	strex	r3, r2, [r1]
 800fa56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fa58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d1e5      	bne.n	800fa2a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2220      	movs	r2, #32
 800fa62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2200      	movs	r2, #0
 800fa6a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2200      	movs	r2, #0
 800fa70:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	4a34      	ldr	r2, [pc, #208]	@ (800fb48 <UART_RxISR_8BIT+0x1b8>)
 800fa78:	4293      	cmp	r3, r2
 800fa7a:	d01f      	beq.n	800fabc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d018      	beq.n	800fabc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa92:	e853 3f00 	ldrex	r3, [r3]
 800fa96:	623b      	str	r3, [r7, #32]
   return(result);
 800fa98:	6a3b      	ldr	r3, [r7, #32]
 800fa9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fa9e:	663b      	str	r3, [r7, #96]	@ 0x60
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	461a      	mov	r2, r3
 800faa6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800faa8:	633b      	str	r3, [r7, #48]	@ 0x30
 800faaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800faae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fab0:	e841 2300 	strex	r3, r2, [r1]
 800fab4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d1e6      	bne.n	800fa8a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fac0:	2b01      	cmp	r3, #1
 800fac2:	d12e      	bne.n	800fb22 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2200      	movs	r2, #0
 800fac8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	e853 3f00 	ldrex	r3, [r3]
 800fad6:	60fb      	str	r3, [r7, #12]
   return(result);
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	f023 0310 	bic.w	r3, r3, #16
 800fade:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	461a      	mov	r2, r3
 800fae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fae8:	61fb      	str	r3, [r7, #28]
 800faea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faec:	69b9      	ldr	r1, [r7, #24]
 800faee:	69fa      	ldr	r2, [r7, #28]
 800faf0:	e841 2300 	strex	r3, r2, [r1]
 800faf4:	617b      	str	r3, [r7, #20]
   return(result);
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d1e6      	bne.n	800faca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	69db      	ldr	r3, [r3, #28]
 800fb02:	f003 0310 	and.w	r3, r3, #16
 800fb06:	2b10      	cmp	r3, #16
 800fb08:	d103      	bne.n	800fb12 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	2210      	movs	r2, #16
 800fb10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fb18:	4619      	mov	r1, r3
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f7fb fa20 	bl	800af60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fb20:	e00d      	b.n	800fb3e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f7ff f9a4 	bl	800ee70 <HAL_UART_RxCpltCallback>
}
 800fb28:	e009      	b.n	800fb3e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	8b1b      	ldrh	r3, [r3, #24]
 800fb30:	b29a      	uxth	r2, r3
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	f042 0208 	orr.w	r2, r2, #8
 800fb3a:	b292      	uxth	r2, r2
 800fb3c:	831a      	strh	r2, [r3, #24]
}
 800fb3e:	bf00      	nop
 800fb40:	3770      	adds	r7, #112	@ 0x70
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	40008000 	.word	0x40008000

0800fb4c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b09c      	sub	sp, #112	@ 0x70
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fb5a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb64:	2b22      	cmp	r3, #34	@ 0x22
 800fb66:	f040 80be 	bne.w	800fce6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fb70:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb78:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800fb7a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800fb7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800fb82:	4013      	ands	r3, r2
 800fb84:	b29a      	uxth	r2, r3
 800fb86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fb88:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb8e:	1c9a      	adds	r2, r3, #2
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fb9a:	b29b      	uxth	r3, r3
 800fb9c:	3b01      	subs	r3, #1
 800fb9e:	b29a      	uxth	r2, r3
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fbac:	b29b      	uxth	r3, r3
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	f040 80a3 	bne.w	800fcfa <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fbbc:	e853 3f00 	ldrex	r3, [r3]
 800fbc0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800fbc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fbc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fbc8:	667b      	str	r3, [r7, #100]	@ 0x64
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	461a      	mov	r2, r3
 800fbd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fbd2:	657b      	str	r3, [r7, #84]	@ 0x54
 800fbd4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbd6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fbd8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fbda:	e841 2300 	strex	r3, r2, [r1]
 800fbde:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800fbe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d1e6      	bne.n	800fbb4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	3308      	adds	r3, #8
 800fbec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbf0:	e853 3f00 	ldrex	r3, [r3]
 800fbf4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fbf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbf8:	f023 0301 	bic.w	r3, r3, #1
 800fbfc:	663b      	str	r3, [r7, #96]	@ 0x60
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	3308      	adds	r3, #8
 800fc04:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800fc06:	643a      	str	r2, [r7, #64]	@ 0x40
 800fc08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fc0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fc0e:	e841 2300 	strex	r3, r2, [r1]
 800fc12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fc14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d1e5      	bne.n	800fbe6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2220      	movs	r2, #32
 800fc1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2200      	movs	r2, #0
 800fc26:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	4a34      	ldr	r2, [pc, #208]	@ (800fd04 <UART_RxISR_16BIT+0x1b8>)
 800fc34:	4293      	cmp	r3, r2
 800fc36:	d01f      	beq.n	800fc78 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	685b      	ldr	r3, [r3, #4]
 800fc3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d018      	beq.n	800fc78 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc4c:	6a3b      	ldr	r3, [r7, #32]
 800fc4e:	e853 3f00 	ldrex	r3, [r3]
 800fc52:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc54:	69fb      	ldr	r3, [r7, #28]
 800fc56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fc5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	461a      	mov	r2, r3
 800fc62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fc64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fc66:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fc6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc6c:	e841 2300 	strex	r3, r2, [r1]
 800fc70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d1e6      	bne.n	800fc46 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fc7c:	2b01      	cmp	r3, #1
 800fc7e:	d12e      	bne.n	800fcde <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2200      	movs	r2, #0
 800fc84:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	e853 3f00 	ldrex	r3, [r3]
 800fc92:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	f023 0310 	bic.w	r3, r3, #16
 800fc9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	461a      	mov	r2, r3
 800fca2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fca4:	61bb      	str	r3, [r7, #24]
 800fca6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fca8:	6979      	ldr	r1, [r7, #20]
 800fcaa:	69ba      	ldr	r2, [r7, #24]
 800fcac:	e841 2300 	strex	r3, r2, [r1]
 800fcb0:	613b      	str	r3, [r7, #16]
   return(result);
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d1e6      	bne.n	800fc86 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	69db      	ldr	r3, [r3, #28]
 800fcbe:	f003 0310 	and.w	r3, r3, #16
 800fcc2:	2b10      	cmp	r3, #16
 800fcc4:	d103      	bne.n	800fcce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	2210      	movs	r2, #16
 800fccc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fcd4:	4619      	mov	r1, r3
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f7fb f942 	bl	800af60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fcdc:	e00d      	b.n	800fcfa <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f7ff f8c6 	bl	800ee70 <HAL_UART_RxCpltCallback>
}
 800fce4:	e009      	b.n	800fcfa <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	8b1b      	ldrh	r3, [r3, #24]
 800fcec:	b29a      	uxth	r2, r3
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	f042 0208 	orr.w	r2, r2, #8
 800fcf6:	b292      	uxth	r2, r2
 800fcf8:	831a      	strh	r2, [r3, #24]
}
 800fcfa:	bf00      	nop
 800fcfc:	3770      	adds	r7, #112	@ 0x70
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}
 800fd02:	bf00      	nop
 800fd04:	40008000 	.word	0x40008000

0800fd08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b083      	sub	sp, #12
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fd10:	bf00      	nop
 800fd12:	370c      	adds	r7, #12
 800fd14:	46bd      	mov	sp, r7
 800fd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1a:	4770      	bx	lr

0800fd1c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b08c      	sub	sp, #48	@ 0x30
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	60f8      	str	r0, [r7, #12]
 800fd24:	60b9      	str	r1, [r7, #8]
 800fd26:	4613      	mov	r3, r2
 800fd28:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd36:	2b20      	cmp	r3, #32
 800fd38:	d13b      	bne.n	800fdb2 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d002      	beq.n	800fd46 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800fd40:	88fb      	ldrh	r3, [r7, #6]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d101      	bne.n	800fd4a <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800fd46:	2301      	movs	r3, #1
 800fd48:	e034      	b.n	800fdb4 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	2201      	movs	r2, #1
 800fd4e:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2200      	movs	r2, #0
 800fd54:	665a      	str	r2, [r3, #100]	@ 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800fd56:	88fb      	ldrh	r3, [r7, #6]
 800fd58:	461a      	mov	r2, r3
 800fd5a:	68b9      	ldr	r1, [r7, #8]
 800fd5c:	68f8      	ldr	r0, [r7, #12]
 800fd5e:	f7ff fcad 	bl	800f6bc <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fd66:	2b01      	cmp	r3, #1
 800fd68:	d11d      	bne.n	800fda6 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	2210      	movs	r2, #16
 800fd70:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd78:	69bb      	ldr	r3, [r7, #24]
 800fd7a:	e853 3f00 	ldrex	r3, [r3]
 800fd7e:	617b      	str	r3, [r7, #20]
   return(result);
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	f043 0310 	orr.w	r3, r3, #16
 800fd86:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	461a      	mov	r2, r3
 800fd8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd90:	627b      	str	r3, [r7, #36]	@ 0x24
 800fd92:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd94:	6a39      	ldr	r1, [r7, #32]
 800fd96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd98:	e841 2300 	strex	r3, r2, [r1]
 800fd9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd9e:	69fb      	ldr	r3, [r7, #28]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d1e6      	bne.n	800fd72 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 800fda4:	e002      	b.n	800fdac <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800fda6:	2301      	movs	r3, #1
 800fda8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800fdac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fdb0:	e000      	b.n	800fdb4 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 800fdb2:	2302      	movs	r3, #2
  }
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3730      	adds	r7, #48	@ 0x30
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}

0800fdbc <memset>:
 800fdbc:	4402      	add	r2, r0
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	4293      	cmp	r3, r2
 800fdc2:	d100      	bne.n	800fdc6 <memset+0xa>
 800fdc4:	4770      	bx	lr
 800fdc6:	f803 1b01 	strb.w	r1, [r3], #1
 800fdca:	e7f9      	b.n	800fdc0 <memset+0x4>

0800fdcc <__libc_init_array>:
 800fdcc:	b570      	push	{r4, r5, r6, lr}
 800fdce:	4d0d      	ldr	r5, [pc, #52]	@ (800fe04 <__libc_init_array+0x38>)
 800fdd0:	4c0d      	ldr	r4, [pc, #52]	@ (800fe08 <__libc_init_array+0x3c>)
 800fdd2:	1b64      	subs	r4, r4, r5
 800fdd4:	10a4      	asrs	r4, r4, #2
 800fdd6:	2600      	movs	r6, #0
 800fdd8:	42a6      	cmp	r6, r4
 800fdda:	d109      	bne.n	800fdf0 <__libc_init_array+0x24>
 800fddc:	4d0b      	ldr	r5, [pc, #44]	@ (800fe0c <__libc_init_array+0x40>)
 800fdde:	4c0c      	ldr	r4, [pc, #48]	@ (800fe10 <__libc_init_array+0x44>)
 800fde0:	f000 f86c 	bl	800febc <_init>
 800fde4:	1b64      	subs	r4, r4, r5
 800fde6:	10a4      	asrs	r4, r4, #2
 800fde8:	2600      	movs	r6, #0
 800fdea:	42a6      	cmp	r6, r4
 800fdec:	d105      	bne.n	800fdfa <__libc_init_array+0x2e>
 800fdee:	bd70      	pop	{r4, r5, r6, pc}
 800fdf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdf4:	4798      	blx	r3
 800fdf6:	3601      	adds	r6, #1
 800fdf8:	e7ee      	b.n	800fdd8 <__libc_init_array+0xc>
 800fdfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdfe:	4798      	blx	r3
 800fe00:	3601      	adds	r6, #1
 800fe02:	e7f2      	b.n	800fdea <__libc_init_array+0x1e>
 800fe04:	0800ff2c 	.word	0x0800ff2c
 800fe08:	0800ff2c 	.word	0x0800ff2c
 800fe0c:	0800ff2c 	.word	0x0800ff2c
 800fe10:	0800ff30 	.word	0x0800ff30

0800fe14 <memcpy>:
 800fe14:	440a      	add	r2, r1
 800fe16:	4291      	cmp	r1, r2
 800fe18:	f100 33ff 	add.w	r3, r0, #4294967295
 800fe1c:	d100      	bne.n	800fe20 <memcpy+0xc>
 800fe1e:	4770      	bx	lr
 800fe20:	b510      	push	{r4, lr}
 800fe22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe2a:	4291      	cmp	r1, r2
 800fe2c:	d1f9      	bne.n	800fe22 <memcpy+0xe>
 800fe2e:	bd10      	pop	{r4, pc}

0800fe30 <round>:
 800fe30:	ec51 0b10 	vmov	r0, r1, d0
 800fe34:	b570      	push	{r4, r5, r6, lr}
 800fe36:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800fe3a:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800fe3e:	2a13      	cmp	r2, #19
 800fe40:	460b      	mov	r3, r1
 800fe42:	4605      	mov	r5, r0
 800fe44:	dc1b      	bgt.n	800fe7e <round+0x4e>
 800fe46:	2a00      	cmp	r2, #0
 800fe48:	da0b      	bge.n	800fe62 <round+0x32>
 800fe4a:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800fe4e:	3201      	adds	r2, #1
 800fe50:	bf04      	itt	eq
 800fe52:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800fe56:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	4619      	mov	r1, r3
 800fe5e:	4610      	mov	r0, r2
 800fe60:	e015      	b.n	800fe8e <round+0x5e>
 800fe62:	4c15      	ldr	r4, [pc, #84]	@ (800feb8 <round+0x88>)
 800fe64:	4114      	asrs	r4, r2
 800fe66:	ea04 0601 	and.w	r6, r4, r1
 800fe6a:	4306      	orrs	r6, r0
 800fe6c:	d00f      	beq.n	800fe8e <round+0x5e>
 800fe6e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800fe72:	fa41 f202 	asr.w	r2, r1, r2
 800fe76:	4413      	add	r3, r2
 800fe78:	ea23 0304 	bic.w	r3, r3, r4
 800fe7c:	e7ed      	b.n	800fe5a <round+0x2a>
 800fe7e:	2a33      	cmp	r2, #51	@ 0x33
 800fe80:	dd08      	ble.n	800fe94 <round+0x64>
 800fe82:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800fe86:	d102      	bne.n	800fe8e <round+0x5e>
 800fe88:	4602      	mov	r2, r0
 800fe8a:	f7fa f9a5 	bl	800a1d8 <__adddf3>
 800fe8e:	ec41 0b10 	vmov	d0, r0, r1
 800fe92:	bd70      	pop	{r4, r5, r6, pc}
 800fe94:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800fe98:	f04f 34ff 	mov.w	r4, #4294967295
 800fe9c:	40f4      	lsrs	r4, r6
 800fe9e:	4204      	tst	r4, r0
 800fea0:	d0f5      	beq.n	800fe8e <round+0x5e>
 800fea2:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800fea6:	2201      	movs	r2, #1
 800fea8:	408a      	lsls	r2, r1
 800feaa:	1952      	adds	r2, r2, r5
 800feac:	bf28      	it	cs
 800feae:	3301      	addcs	r3, #1
 800feb0:	ea22 0204 	bic.w	r2, r2, r4
 800feb4:	e7d2      	b.n	800fe5c <round+0x2c>
 800feb6:	bf00      	nop
 800feb8:	000fffff 	.word	0x000fffff

0800febc <_init>:
 800febc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800febe:	bf00      	nop
 800fec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fec2:	bc08      	pop	{r3}
 800fec4:	469e      	mov	lr, r3
 800fec6:	4770      	bx	lr

0800fec8 <_fini>:
 800fec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feca:	bf00      	nop
 800fecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fece:	bc08      	pop	{r3}
 800fed0:	469e      	mov	lr, r3
 800fed2:	4770      	bx	lr
