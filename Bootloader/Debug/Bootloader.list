
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004730  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080048bc  080048bc  000148bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004904  08004904  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08004904  08004904  00014904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800490c  0800490c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800490c  0800490c  0001490c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08004914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d4  2000002c  08004940  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000900  08004940  00020900  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e1b0  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002801  00000000  00000000  0002e24f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  00030a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000892  00000000  00000000  00031590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f23  00000000  00000000  00031e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f0bf  00000000  00000000  00052d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c460b  00000000  00000000  00061e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c74  00000000  00000000  00126410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00129084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000002c 	.word	0x2000002c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080048a4 	.word	0x080048a4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000030 	.word	0x20000030
 80001c8:	080048a4 	.word	0x080048a4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <erase_page>:
#define START_DATA_IDX 12

static inline u32 get_page_base_address(u32 page) {
	return FLASH_BASE + (PAGESIZE * page);
}
static int erase_page(u32 base_page, u32 number) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
	FLASH_EraseInitTypeDef erase;
	u32 page_err;

	erase.Banks = FLASH_BANK_1;
 80004d2:	2301      	movs	r3, #1
 80004d4:	617b      	str	r3, [r7, #20]
	erase.Page = base_page;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	61bb      	str	r3, [r7, #24]
	erase.NbPages = number;
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	61fb      	str	r3, [r7, #28]
	erase.TypeErase = FLASH_TYPEERASE_PAGES;
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Unlock();
 80004e2:	f000 ffff 	bl	80014e4 <HAL_FLASH_Unlock>
	if (HAL_FLASHEx_Erase(&erase, &page_err) != HAL_OK) {
 80004e6:	f107 020c 	add.w	r2, r7, #12
 80004ea:	f107 0310 	add.w	r3, r7, #16
 80004ee:	4611      	mov	r1, r2
 80004f0:	4618      	mov	r0, r3
 80004f2:	f001 f8dd 	bl	80016b0 <HAL_FLASHEx_Erase>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d004      	beq.n	8000506 <erase_page+0x3e>
		HAL_FLASH_Lock();
 80004fc:	f001 f814 	bl	8001528 <HAL_FLASH_Lock>
		return -1;
 8000500:	f04f 33ff 	mov.w	r3, #4294967295
 8000504:	e002      	b.n	800050c <erase_page+0x44>
	}
	HAL_FLASH_Lock();
 8000506:	f001 f80f 	bl	8001528 <HAL_FLASH_Lock>
	return page_err;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3720      	adds	r7, #32
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <get_page_by_address>:
static inline u32 get_page_by_address(u32 address) {
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	return (u32) (address - FLASH_BASE) / PAGESIZE;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000522:	0adb      	lsrs	r3, r3, #11
}
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <flash_write_data>:

static HAL_StatusTypeDef flash_write_data(u32 base_address, u32 offset,
		u8 *data, u8 length) {
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	f6ad 0d24 	subw	sp, sp, #2084	; 0x824
 8000536:	af00      	add	r7, sp, #0
 8000538:	f507 6402 	add.w	r4, r7, #2080	; 0x820
 800053c:	f6a4 0414 	subw	r4, r4, #2068	; 0x814
 8000540:	6020      	str	r0, [r4, #0]
 8000542:	f507 6002 	add.w	r0, r7, #2080	; 0x820
 8000546:	f6a0 0018 	subw	r0, r0, #2072	; 0x818
 800054a:	6001      	str	r1, [r0, #0]
 800054c:	f507 6102 	add.w	r1, r7, #2080	; 0x820
 8000550:	f6a1 011c 	subw	r1, r1, #2076	; 0x81c
 8000554:	600a      	str	r2, [r1, #0]
 8000556:	461a      	mov	r2, r3
 8000558:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800055c:	f6a3 031d 	subw	r3, r3, #2077	; 0x81d
 8000560:	701a      	strb	r2, [r3, #0]
	u32 i, page_idx;
	HAL_StatusTypeDef res;
	u8 page_data[PAGESIZE];
	u64 *ptr = (u64 *)&page_data[0];
 8000562:	f107 0310 	add.w	r3, r7, #16
 8000566:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	memset(page_data, 0, PAGESIZE);
 800056a:	f107 0310 	add.w	r3, r7, #16
 800056e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f004 f95b 	bl	8004830 <memset>
	for (i = 0; i < PAGESIZE / 8; i++)
 800057a:	2300      	movs	r3, #0
 800057c:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 8000580:	e018      	b.n	80005b4 <flash_write_data+0x84>
		ptr[i] = *(volatile u64*) (base_address + (8 * i));
 8000582:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8000586:	00da      	lsls	r2, r3, #3
 8000588:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800058c:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4413      	add	r3, r2
 8000594:	4618      	mov	r0, r3
 8000596:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 800059a:	00db      	lsls	r3, r3, #3
 800059c:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 80005a0:	18d1      	adds	r1, r2, r3
 80005a2:	e9d0 2300 	ldrd	r2, r3, [r0]
 80005a6:	e9c1 2300 	strd	r2, r3, [r1]
	for (i = 0; i < PAGESIZE / 8; i++)
 80005aa:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 80005ae:	3301      	adds	r3, #1
 80005b0:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 80005b4:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 80005b8:	2bff      	cmp	r3, #255	; 0xff
 80005ba:	d9e2      	bls.n	8000582 <flash_write_data+0x52>
	memcpy(&page_data[offset], data, length);
 80005bc:	f107 0210 	add.w	r2, r7, #16
 80005c0:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 80005c4:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	18d0      	adds	r0, r2, r3
 80005cc:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 80005d0:	f6a3 031d 	subw	r3, r3, #2077	; 0x81d
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 80005da:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80005de:	6819      	ldr	r1, [r3, #0]
 80005e0:	f004 f952 	bl	8004888 <memcpy>
	page_idx = get_page_by_address(base_address);
 80005e4:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 80005e8:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 80005ec:	6818      	ldr	r0, [r3, #0]
 80005ee:	f7ff ff91 	bl	8000514 <get_page_by_address>
 80005f2:	f8c7 0810 	str.w	r0, [r7, #2064]	; 0x810
	res = erase_page(page_idx, 1);
 80005f6:	2101      	movs	r1, #1
 80005f8:	f8d7 0810 	ldr.w	r0, [r7, #2064]	; 0x810
 80005fc:	f7ff ff64 	bl	80004c8 <erase_page>
 8000600:	4603      	mov	r3, r0
 8000602:	f887 381b 	strb.w	r3, [r7, #2075]	; 0x81b
	if (res != HAL_OK)
 8000606:	f897 381b 	ldrb.w	r3, [r7, #2075]	; 0x81b
 800060a:	2b00      	cmp	r3, #0
 800060c:	d002      	beq.n	8000614 <flash_write_data+0xe4>
		return res;
 800060e:	f897 381b 	ldrb.w	r3, [r7, #2075]	; 0x81b
 8000612:	e032      	b.n	800067a <flash_write_data+0x14a>
	HAL_FLASH_Unlock();
 8000614:	f000 ff66 	bl	80014e4 <HAL_FLASH_Unlock>
	for (i = 0; i < PAGESIZE / 8; i++) {
 8000618:	2300      	movs	r3, #0
 800061a:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 800061e:	e024      	b.n	800066a <flash_write_data+0x13a>
		res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, base_address + (8*i), ptr[i]);
 8000620:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8000624:	00da      	lsls	r2, r3, #3
 8000626:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800062a:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	18d1      	adds	r1, r2, r3
 8000632:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 800063c:	4413      	add	r3, r2
 800063e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000642:	2000      	movs	r0, #0
 8000644:	f000 fee2 	bl	800140c <HAL_FLASH_Program>
 8000648:	4603      	mov	r3, r0
 800064a:	f887 381b 	strb.w	r3, [r7, #2075]	; 0x81b
		if (res != HAL_OK) {
 800064e:	f897 381b 	ldrb.w	r3, [r7, #2075]	; 0x81b
 8000652:	2b00      	cmp	r3, #0
 8000654:	d004      	beq.n	8000660 <flash_write_data+0x130>
			HAL_FLASH_Lock();
 8000656:	f000 ff67 	bl	8001528 <HAL_FLASH_Lock>
			return res;
 800065a:	f897 381b 	ldrb.w	r3, [r7, #2075]	; 0x81b
 800065e:	e00c      	b.n	800067a <flash_write_data+0x14a>
	for (i = 0; i < PAGESIZE / 8; i++) {
 8000660:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8000664:	3301      	adds	r3, #1
 8000666:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 800066a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 800066e:	2bff      	cmp	r3, #255	; 0xff
 8000670:	d9d6      	bls.n	8000620 <flash_write_data+0xf0>
		}
	}
	HAL_FLASH_Lock();
 8000672:	f000 ff59 	bl	8001528 <HAL_FLASH_Lock>
	return res;
 8000676:	f897 381b 	ldrb.w	r3, [r7, #2075]	; 0x81b
}
 800067a:	4618      	mov	r0, r3
 800067c:	f607 0724 	addw	r7, r7, #2084	; 0x824
 8000680:	46bd      	mov	sp, r7
 8000682:	bd90      	pop	{r4, r7, pc}

08000684 <update_firmware>:

static HAL_StatusTypeDef update_firmware(u32 address, const u8 *data, u32 len) {
 8000684:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000688:	f5ad 6d03 	sub.w	sp, sp, #2096	; 0x830
 800068c:	af00      	add	r7, sp, #0
 800068e:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8000692:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 8000696:	6018      	str	r0, [r3, #0]
 8000698:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800069c:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 80006a0:	6019      	str	r1, [r3, #0]
 80006a2:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80006a6:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 80006aa:	601a      	str	r2, [r3, #0]
	u64 i, to_write;
	u64 *ptr;
	u8 program[2048];
	u32 page_idx;
	HAL_StatusTypeDef res;
	to_write = (u64) (len + 7) / 8;
 80006ac:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80006b0:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3307      	adds	r3, #7
 80006b8:	08db      	lsrs	r3, r3, #3
 80006ba:	2200      	movs	r2, #0
 80006bc:	4698      	mov	r8, r3
 80006be:	4691      	mov	r9, r2
 80006c0:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 80006c4:	e9c3 8900 	strd	r8, r9, [r3]
	page_idx = get_page_by_address(address);
 80006c8:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80006cc:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	f7ff ff1f 	bl	8000514 <get_page_by_address>
 80006d6:	f8c7 081c 	str.w	r0, [r7, #2076]	; 0x81c
	erase_page(page_idx, 1);
 80006da:	2101      	movs	r1, #1
 80006dc:	f8d7 081c 	ldr.w	r0, [r7, #2076]	; 0x81c
 80006e0:	f7ff fef2 	bl	80004c8 <erase_page>
	memset(program, 0, sizeof(program));
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f004 f89e 	bl	8004830 <memset>
	memcpy(program, data, len);
 80006f4:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80006f8:	f6a3 022c 	subw	r2, r3, #2092	; 0x82c
 80006fc:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8000700:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 8000704:	f107 0014 	add.w	r0, r7, #20
 8000708:	6812      	ldr	r2, [r2, #0]
 800070a:	6819      	ldr	r1, [r3, #0]
 800070c:	f004 f8bc 	bl	8004888 <memcpy>
	ptr = (u64*) &program[0];
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	HAL_FLASH_Unlock();
 8000718:	f000 fee4 	bl	80014e4 <HAL_FLASH_Unlock>
	for (i = 0; i < to_write; i++) {
 800071c:	f04f 0200 	mov.w	r2, #0
 8000720:	f04f 0300 	mov.w	r3, #0
 8000724:	f607 0128 	addw	r1, r7, #2088	; 0x828
 8000728:	e9c1 2300 	strd	r2, r3, [r1]
 800072c:	e02a      	b.n	8000784 <update_firmware+0x100>
		res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address + 8 * i,
 800072e:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8000732:	00da      	lsls	r2, r3, #3
 8000734:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8000738:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	18d1      	adds	r1, r2, r3
				ptr[i]);
 8000740:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	f8d7 2818 	ldr.w	r2, [r7, #2072]	; 0x818
 800074a:	4413      	add	r3, r2
		res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address + 8 * i,
 800074c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000750:	2000      	movs	r0, #0
 8000752:	f000 fe5b 	bl	800140c <HAL_FLASH_Program>
 8000756:	4603      	mov	r3, r0
 8000758:	f887 3817 	strb.w	r3, [r7, #2071]	; 0x817
		if (res != HAL_OK) {
 800075c:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8000760:	2b00      	cmp	r3, #0
 8000762:	d004      	beq.n	800076e <update_firmware+0xea>
			HAL_FLASH_Lock();
 8000764:	f000 fee0 	bl	8001528 <HAL_FLASH_Lock>
			return res;
 8000768:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 800076c:	e019      	b.n	80007a2 <update_firmware+0x11e>
	for (i = 0; i < to_write; i++) {
 800076e:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8000772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000776:	1c54      	adds	r4, r2, #1
 8000778:	f143 0500 	adc.w	r5, r3, #0
 800077c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8000780:	e9c3 4500 	strd	r4, r5, [r3]
 8000784:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8000788:	e9d3 0100 	ldrd	r0, r1, [r3]
 800078c:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8000790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000794:	4290      	cmp	r0, r2
 8000796:	eb71 0303 	sbcs.w	r3, r1, r3
 800079a:	d3c8      	bcc.n	800072e <update_firmware+0xaa>
		}
	}
	HAL_FLASH_Lock();
 800079c:	f000 fec4 	bl	8001528 <HAL_FLASH_Lock>
	return HAL_OK;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	f507 6703 	add.w	r7, r7, #2096	; 0x830
 80007a8:	46bd      	mov	sp, r7
 80007aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080007ae <responses>:
static void responses(struct foo_device *dev, u16 *start_frame, u8 *data,
		u32 len, u16 end) {
 80007ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80007b2:	b089      	sub	sp, #36	; 0x24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	466b      	mov	r3, sp
 80007c0:	461e      	mov	r6, r3
	u16 size = 4 * sizeof(u16) + sizeof(u32) + len + sizeof(u16);
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	330e      	adds	r3, #14
 80007c8:	83fb      	strh	r3, [r7, #30]
	u8 buff[size];
 80007ca:	8bf9      	ldrh	r1, [r7, #30]
 80007cc:	460b      	mov	r3, r1
 80007ce:	3b01      	subs	r3, #1
 80007d0:	61bb      	str	r3, [r7, #24]
 80007d2:	b28b      	uxth	r3, r1
 80007d4:	2200      	movs	r2, #0
 80007d6:	4698      	mov	r8, r3
 80007d8:	4691      	mov	r9, r2
 80007da:	f04f 0200 	mov.w	r2, #0
 80007de:	f04f 0300 	mov.w	r3, #0
 80007e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007ee:	b28b      	uxth	r3, r1
 80007f0:	2200      	movs	r2, #0
 80007f2:	461c      	mov	r4, r3
 80007f4:	4615      	mov	r5, r2
 80007f6:	f04f 0200 	mov.w	r2, #0
 80007fa:	f04f 0300 	mov.w	r3, #0
 80007fe:	00eb      	lsls	r3, r5, #3
 8000800:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000804:	00e2      	lsls	r2, r4, #3
 8000806:	460b      	mov	r3, r1
 8000808:	3307      	adds	r3, #7
 800080a:	08db      	lsrs	r3, r3, #3
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	ebad 0d03 	sub.w	sp, sp, r3
 8000812:	466b      	mov	r3, sp
 8000814:	3300      	adds	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
	memset(buff, 0, size);
 8000818:	8bfb      	ldrh	r3, [r7, #30]
 800081a:	461a      	mov	r2, r3
 800081c:	2100      	movs	r1, #0
 800081e:	6978      	ldr	r0, [r7, #20]
 8000820:	f004 f806 	bl	8004830 <memset>
	memcpy(&buff[0], start_frame, 4 * sizeof(u16));
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	2208      	movs	r2, #8
 8000828:	68b9      	ldr	r1, [r7, #8]
 800082a:	4618      	mov	r0, r3
 800082c:	f004 f82c 	bl	8004888 <memcpy>
	memcpy(&buff[8], &len, sizeof(u32));
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	3308      	adds	r3, #8
 8000834:	683a      	ldr	r2, [r7, #0]
 8000836:	601a      	str	r2, [r3, #0]
	memcpy(&buff[12], data, len);
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	330c      	adds	r3, #12
 800083c:	683a      	ldr	r2, [r7, #0]
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	4618      	mov	r0, r3
 8000842:	f004 f821 	bl	8004888 <memcpy>
	memcpy(&buff[size - 2], &end, sizeof(end));
 8000846:	8bfb      	ldrh	r3, [r7, #30]
 8000848:	3b02      	subs	r3, #2
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	4413      	add	r3, r2
 800084e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000852:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(dev->bus, buff, size, 1000);
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	6818      	ldr	r0, [r3, #0]
 8000858:	8bfa      	ldrh	r2, [r7, #30]
 800085a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085e:	6979      	ldr	r1, [r7, #20]
 8000860:	f002 fcc8 	bl	80031f4 <HAL_UART_Transmit>
 8000864:	46b5      	mov	sp, r6
}
 8000866:	bf00      	nop
 8000868:	3724      	adds	r7, #36	; 0x24
 800086a:	46bd      	mov	sp, r7
 800086c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000870 <handle_request>:
//FAFB 1000 0000 2100 08000000 2122232425262728 FCFD
error_t handle_request(struct foo_device *dev, const u8 *frame) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b090      	sub	sp, #64	; 0x40
 8000874:	af02      	add	r7, sp, #8
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	u16 start, pver, err, msgtype;
	u32 length;
	u8 res = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	77fb      	strb	r3, [r7, #31]
	u8 *data_ptr = NULL;
 800087e:	2300      	movs	r3, #0
 8000880:	637b      	str	r3, [r7, #52]	; 0x34
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	b29b      	uxth	r3, r3

	memcpy(&start, &frame[0], sizeof(u16));
 8000888:	85bb      	strh	r3, [r7, #44]	; 0x2c
	memcpy(&pver, &frame[2], sizeof(u16));
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	3302      	adds	r3, #2
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	b29b      	uxth	r3, r3
 8000892:	857b      	strh	r3, [r7, #42]	; 0x2a
	memcpy(&err, &frame[4], sizeof(u16));
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	3304      	adds	r3, #4
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	b29b      	uxth	r3, r3
 800089c:	853b      	strh	r3, [r7, #40]	; 0x28
	memcpy(&msgtype, &frame[6], sizeof(u16));
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	3306      	adds	r3, #6
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	84fb      	strh	r3, [r7, #38]	; 0x26
	memcpy(&length, &frame[8], sizeof(32));
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	3308      	adds	r3, #8
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	623b      	str	r3, [r7, #32]

	u16 start_frame[4];
	u16 end = 0xFDFC;
 80008b0:	f64f 53fc 	movw	r3, #65020	; 0xfdfc
 80008b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	u32 len;

	start_frame[START_IDX] = 0xFBFA;
 80008b6:	f64f 33fa 	movw	r3, #64506	; 0xfbfa
 80008ba:	82bb      	strh	r3, [r7, #20]
	start_frame[PRVER_IDX] = dev->protocol_version;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	889b      	ldrh	r3, [r3, #4]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	82fb      	strh	r3, [r7, #22]

	if (pver != dev->protocol_version)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	889b      	ldrh	r3, [r3, #4]
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d002      	beq.n	80008d6 <handle_request+0x66>
		start_frame[ERRNO_IDX] = INVALID;
 80008d0:	2301      	movs	r3, #1
 80008d2:	833b      	strh	r3, [r7, #24]
 80008d4:	e001      	b.n	80008da <handle_request+0x6a>
	else
		start_frame[ERRNO_IDX] = OKAY;
 80008d6:	2300      	movs	r3, #0
 80008d8:	833b      	strh	r3, [r7, #24]

	switch (msgtype) {
 80008da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008dc:	2b03      	cmp	r3, #3
 80008de:	d13f      	bne.n	8000960 <handle_request+0xf0>
	case WRITE_FW_DATA:
		u64 flag;
		start_frame[MTYPE_IDX] = WRITE_FW_DATA;
 80008e0:	2303      	movs	r3, #3
 80008e2:	837b      	strh	r3, [r7, #26]
		len = 1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	633b      	str	r3, [r7, #48]	; 0x30
		if (!length) {
 80008e8:	6a3b      	ldr	r3, [r7, #32]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d11b      	bne.n	8000926 <handle_request+0xb6>
			flag = ON_BOOTING_APP;
 80008ee:	f04f 0200 	mov.w	r2, #0
 80008f2:	f04f 0300 	mov.w	r3, #0
 80008f6:	e9c7 2302 	strd	r2, r3, [r7, #8]
			flash_write_data(VAR_BASE_ADDRESS, FLAG_OFFSET, (u8 *) &flag, sizeof(u64));
 80008fa:	f107 0208 	add.w	r2, r7, #8
 80008fe:	2308      	movs	r3, #8
 8000900:	2118      	movs	r1, #24
 8000902:	4823      	ldr	r0, [pc, #140]	; (8000990 <handle_request+0x120>)
 8000904:	f7ff fe14 	bl	8000530 <flash_write_data>
			res = 1;
 8000908:	2301      	movs	r3, #1
 800090a:	77fb      	strb	r3, [r7, #31]
			responses(dev, start_frame, &res, len, end);
 800090c:	f107 021f 	add.w	r2, r7, #31
 8000910:	f107 0114 	add.w	r1, r7, #20
 8000914:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff ff47 	bl	80007ae <responses>
			HAL_NVIC_SystemReset();
 8000920:	f000 fce5 	bl	80012ee <HAL_NVIC_SystemReset>
 8000924:	e018      	b.n	8000958 <handle_request+0xe8>
		} else if (update_firmware(dev->firmware_address, &frame[START_DATA_IDX],
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f8d3 0006 	ldr.w	r0, [r3, #6]
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	330c      	adds	r3, #12
 8000930:	6a3a      	ldr	r2, [r7, #32]
 8000932:	4619      	mov	r1, r3
 8000934:	f7ff fea6 	bl	8000684 <update_firmware>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d002      	beq.n	8000944 <handle_request+0xd4>
				length) != HAL_OK) {
			res = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	77fb      	strb	r3, [r7, #31]
 8000942:	e009      	b.n	8000958 <handle_request+0xe8>
		} else {
			dev->firmware_address += length;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f8d3 2006 	ldr.w	r2, [r3, #6]
 800094a:	6a3b      	ldr	r3, [r7, #32]
 800094c:	441a      	add	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f8c3 2006 	str.w	r2, [r3, #6]
			res = 1;
 8000954:	2301      	movs	r3, #1
 8000956:	77fb      	strb	r3, [r7, #31]
		}
		data_ptr = &res;
 8000958:	f107 031f 	add.w	r3, r7, #31
 800095c:	637b      	str	r3, [r7, #52]	; 0x34
		break;
 800095e:	e008      	b.n	8000972 <handle_request+0x102>
	default:
		start_frame[MTYPE_IDX] = msgtype;
 8000960:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000962:	837b      	strh	r3, [r7, #26]
		start_frame[ERRNO_IDX] = MSGTYPE_UKN;
 8000964:	2302      	movs	r3, #2
 8000966:	833b      	strh	r3, [r7, #24]
		len = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
		data_ptr = NULL;
 800096c:	2300      	movs	r3, #0
 800096e:	637b      	str	r3, [r7, #52]	; 0x34
		break;
 8000970:	bf00      	nop
	}
	responses(dev, start_frame, data_ptr, len, end);
 8000972:	f107 0114 	add.w	r1, r7, #20
 8000976:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800097c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ff15 	bl	80007ae <responses>
	return start_frame[ERRNO_IDX];
 8000984:	8b3b      	ldrh	r3, [r7, #24]
 8000986:	b2db      	uxtb	r3, r3
}
 8000988:	4618      	mov	r0, r3
 800098a:	3738      	adds	r7, #56	; 0x38
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	0803f800 	.word	0x0803f800

08000994 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	460b      	mov	r3, r1
 800099e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1) {
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a05      	ldr	r2, [pc, #20]	; (80009bc <HAL_UARTEx_RxEventCallback+0x28>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d102      	bne.n	80009b0 <HAL_UARTEx_RxEventCallback+0x1c>
		flag = PENDING_RQ;
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <HAL_UARTEx_RxEventCallback+0x2c>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	701a      	strb	r2, [r3, #0]
	}
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	40013800 	.word	0x40013800
 80009c0:	200008fa 	.word	0x200008fa

080009c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	dev.bus = &huart1;
 80009c8:	4b2c      	ldr	r3, [pc, #176]	; (8000a7c <main+0xb8>)
 80009ca:	4a2d      	ldr	r2, [pc, #180]	; (8000a80 <main+0xbc>)
 80009cc:	601a      	str	r2, [r3, #0]
	dev.protocol_version = PROT_VER;
 80009ce:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <main+0xb8>)
 80009d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009d4:	809a      	strh	r2, [r3, #4]
	dev.firmware_address = FIRMWARE_ADDRESS;
 80009d6:	4a29      	ldr	r2, [pc, #164]	; (8000a7c <main+0xb8>)
 80009d8:	2300      	movs	r3, #0
 80009da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80009de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80009e2:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80009e6:	80d3      	strh	r3, [r2, #6]
 80009e8:	2300      	movs	r3, #0
 80009ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009ee:	8113      	strh	r3, [r2, #8]
	memset(frame, 0, sizeof(frame));
 80009f0:	f640 020e 	movw	r2, #2062	; 0x80e
 80009f4:	2100      	movs	r1, #0
 80009f6:	4823      	ldr	r0, [pc, #140]	; (8000a84 <main+0xc0>)
 80009f8:	f003 ff1a 	bl	8004830 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fc:	f000 faab 	bl	8000f56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a00:	f000 f848 	bl	8000a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a04:	f000 f8e8 	bl	8000bd8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a08:	f000 f8b6 	bl	8000b78 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 8000a0c:	f000 f896 	bl	8000b3c <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
	watchdog_set_timeout(&hiwdg, TIMEOUT_32_SEC);
 8000a10:	2106      	movs	r1, #6
 8000a12:	481d      	ldr	r0, [pc, #116]	; (8000a88 <main+0xc4>)
 8000a14:	f000 fa22 	bl	8000e5c <watchdog_set_timeout>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a1e:	481b      	ldr	r0, [pc, #108]	; (8000a8c <main+0xc8>)
 8000a20:	f001 f8e6 	bl	8001bf0 <HAL_GPIO_WritePin>

	if (get_flag() == ON_UPDATE_FIRMWARE)
 8000a24:	f000 f918 	bl	8000c58 <get_flag>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	f1a2 0112 	sub.w	r1, r2, #18
 8000a30:	430b      	orrs	r3, r1
 8000a32:	d106      	bne.n	8000a42 <main+0x7e>
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, frame, sizeof(frame));
 8000a34:	f640 020e 	movw	r2, #2062	; 0x80e
 8000a38:	4912      	ldr	r1, [pc, #72]	; (8000a84 <main+0xc0>)
 8000a3a:	4811      	ldr	r0, [pc, #68]	; (8000a80 <main+0xbc>)
 8000a3c:	f003 fea8 	bl	8004790 <HAL_UARTEx_ReceiveToIdle_IT>
 8000a40:	e001      	b.n	8000a46 <main+0x82>
	else
		goto_application();
 8000a42:	f000 f917 	bl	8000c74 <goto_application>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (flag == PENDING_RQ) {
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <main+0xcc>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d112      	bne.n	8000a74 <main+0xb0>
			handle_request(&dev, frame);
 8000a4e:	490d      	ldr	r1, [pc, #52]	; (8000a84 <main+0xc0>)
 8000a50:	480a      	ldr	r0, [pc, #40]	; (8000a7c <main+0xb8>)
 8000a52:	f7ff ff0d 	bl	8000870 <handle_request>
			flag = NO_RQ;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <main+0xcc>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
			memset(frame, 0, sizeof(frame));
 8000a5c:	f640 020e 	movw	r2, #2062	; 0x80e
 8000a60:	2100      	movs	r1, #0
 8000a62:	4808      	ldr	r0, [pc, #32]	; (8000a84 <main+0xc0>)
 8000a64:	f003 fee4 	bl	8004830 <memset>
			HAL_UARTEx_ReceiveToIdle_IT(&huart1, frame, sizeof(frame));
 8000a68:	f640 020e 	movw	r2, #2062	; 0x80e
 8000a6c:	4905      	ldr	r1, [pc, #20]	; (8000a84 <main+0xc0>)
 8000a6e:	4804      	ldr	r0, [pc, #16]	; (8000a80 <main+0xbc>)
 8000a70:	f003 fe8e 	bl	8004790 <HAL_UARTEx_ReceiveToIdle_IT>
		}
		ping_to_watchdog(&hiwdg);
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <main+0xc4>)
 8000a76:	f000 fa39 	bl	8000eec <ping_to_watchdog>
		if (flag == PENDING_RQ) {
 8000a7a:	e7e4      	b.n	8000a46 <main+0x82>
 8000a7c:	200008f0 	.word	0x200008f0
 8000a80:	20000058 	.word	0x20000058
 8000a84:	200000e0 	.word	0x200000e0
 8000a88:	20000048 	.word	0x20000048
 8000a8c:	48000800 	.word	0x48000800
 8000a90:	200008fa 	.word	0x200008fa

08000a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b096      	sub	sp, #88	; 0x58
 8000a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	2244      	movs	r2, #68	; 0x44
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f003 fec4 	bl	8004830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ab6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000aba:	f001 f91f 	bl	8001cfc <HAL_PWREx_ControlVoltageScaling>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ac4:	f000 f8fa 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000ac8:	230a      	movs	r3, #10
 8000aca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000acc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ada:	2302      	movs	r3, #2
 8000adc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ae6:	230a      	movs	r3, #10
 8000ae8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000aea:	2307      	movs	r3, #7
 8000aec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000af2:	2302      	movs	r3, #2
 8000af4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 f9ec 	bl	8001ed8 <HAL_RCC_OscConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000b06:	f000 f8d9 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2104      	movs	r1, #4
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 fdec 	bl	8002700 <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b2e:	f000 f8c5 	bl	8000cbc <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3758      	adds	r7, #88	; 0x58
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_IWDG_Init+0x34>)
 8000b42:	4a0c      	ldr	r2, [pc, #48]	; (8000b74 <MX_IWDG_Init+0x38>)
 8000b44:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <MX_IWDG_Init+0x34>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_IWDG_Init+0x34>)
 8000b4e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b52:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_IWDG_Init+0x34>)
 8000b56:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b5a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000b5c:	4804      	ldr	r0, [pc, #16]	; (8000b70 <MX_IWDG_Init+0x34>)
 8000b5e:	f001 f85f 	bl	8001c20 <HAL_IWDG_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000b68:	f000 f8a8 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000048 	.word	0x20000048
 8000b74:	40003000 	.word	0x40003000

08000b78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000b7e:	4a15      	ldr	r2, [pc, #84]	; (8000bd4 <MX_USART1_UART_Init+0x5c>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b82:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000bbc:	f002 facc 	bl	8003158 <HAL_UART_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bc6:	f000 f879 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000058 	.word	0x20000058
 8000bd4:	40013800 	.word	0x40013800

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <MX_GPIO_Init+0x78>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <MX_GPIO_Init+0x78>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <MX_GPIO_Init+0x78>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <MX_GPIO_Init+0x78>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	4a11      	ldr	r2, [pc, #68]	; (8000c50 <MX_GPIO_Init+0x78>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <MX_GPIO_Init+0x78>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c24:	480b      	ldr	r0, [pc, #44]	; (8000c54 <MX_GPIO_Init+0x7c>)
 8000c26:	f000 ffe3 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	4619      	mov	r1, r3
 8000c42:	4804      	ldr	r0, [pc, #16]	; (8000c54 <MX_GPIO_Init+0x7c>)
 8000c44:	f000 fe5a 	bl	80018fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c48:	bf00      	nop
 8000c4a:	3720      	adds	r7, #32
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40021000 	.word	0x40021000
 8000c54:	48000800 	.word	0x48000800

08000c58 <get_flag>:

/* USER CODE BEGIN 4 */
static inline u64 get_flag(void) {
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
	return *(__IO u64*) (VAR_BASE_ADDRESS + FLAG_OFFSET);
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <get_flag+0x18>)
 8000c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000c62:	4610      	mov	r0, r2
 8000c64:	4619      	mov	r1, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	0803f818 	.word	0x0803f818

08000c74 <goto_application>:

static inline void goto_application(void) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
	HAL_RCC_DeInit(); //turn off peripherals, clear interrupt flags
 8000c7a:	f001 f895 	bl	8001da8 <HAL_RCC_DeInit>
	HAL_DeInit(); //clear pending interrupt request, turn off System Tick
 8000c7e:	f000 f983 	bl	8000f88 <HAL_DeInit>
	SCB->SHCSR &= ~(SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <goto_application+0x40>)
 8000c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c86:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <goto_application+0x40>)
 8000c88:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8000c8c:	6253      	str	r3, [r2, #36]	; 0x24
			| SCB_SHCSR_MEMFAULTENA_Msk);
	__set_MSP(*((volatile uint32_t*) START_ADDRESS));
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <goto_application+0x44>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f383 8808 	msr	MSP, r3
}
 8000c9a:	bf00      	nop
	uint32_t JumpAddress = *((volatile uint32_t*) (START_ADDRESS + 4));
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <goto_application+0x44>)
 8000c9e:	3304      	adds	r3, #4
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	60fb      	str	r3, [r7, #12]
	void (*reset_handler)(void) = (void*)JumpAddress;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	60bb      	str	r3, [r7, #8]
	reset_handler();
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4798      	blx	r3
}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	e000ed00 	.word	0xe000ed00
 8000cb8:	0800a000 	.word	0x0800a000

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <HAL_MspInit+0x44>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <HAL_MspInit+0x44>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_MspInit+0x44>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_MspInit+0x44>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <HAL_MspInit+0x44>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_MspInit+0x44>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000

08000d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0a0      	sub	sp, #128	; 0x80
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	225c      	movs	r2, #92	; 0x5c
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f003 fd7d 	bl	8004830 <memset>
  if(huart->Instance==USART1)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a23      	ldr	r2, [pc, #140]	; (8000dc8 <HAL_UART_MspInit+0xb8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d13f      	bne.n	8000dc0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d44:	2300      	movs	r3, #0
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f001 fef9 	bl	8002b44 <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d58:	f7ff ffb0 	bl	8000cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <HAL_UART_MspInit+0xbc>)
 8000d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d60:	4a1a      	ldr	r2, [pc, #104]	; (8000dcc <HAL_UART_MspInit+0xbc>)
 8000d62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d66:	6613      	str	r3, [r2, #96]	; 0x60
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_UART_MspInit+0xbc>)
 8000d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_UART_MspInit+0xbc>)
 8000d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d78:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <HAL_UART_MspInit+0xbc>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_UART_MspInit+0xbc>)
 8000d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d8c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d90:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d9e:	2307      	movs	r3, #7
 8000da0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000da6:	4619      	mov	r1, r3
 8000da8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dac:	f000 fda6 	bl	80018fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2101      	movs	r1, #1
 8000db4:	2025      	movs	r0, #37	; 0x25
 8000db6:	f000 fa70 	bl	800129a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dba:	2025      	movs	r0, #37	; 0x25
 8000dbc:	f000 fa89 	bl	80012d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3780      	adds	r7, #128	; 0x80
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40013800 	.word	0x40013800
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <MemManage_Handler+0x4>

08000de2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <UsageFault_Handler+0x4>

08000dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1c:	f000 f92c 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <USART1_IRQHandler+0x10>)
 8000e2a:	f002 fa6d 	bl	8003308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000058 	.word	0x20000058

08000e38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <watchdog_set_timeout>:
 *      Author: Admin
 */
#include "wdt.h"

HAL_StatusTypeDef watchdog_set_timeout(IWDG_HandleTypeDef *wdt,
		timeout_t timeout) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	70fb      	strb	r3, [r7, #3]
	switch (timeout) {
 8000e68:	78fb      	ldrb	r3, [r7, #3]
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d82c      	bhi.n	8000ec8 <watchdog_set_timeout+0x6c>
 8000e6e:	a201      	add	r2, pc, #4	; (adr r2, 8000e74 <watchdog_set_timeout+0x18>)
 8000e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e74:	08000e91 	.word	0x08000e91
 8000e78:	08000e99 	.word	0x08000e99
 8000e7c:	08000ea1 	.word	0x08000ea1
 8000e80:	08000ea9 	.word	0x08000ea9
 8000e84:	08000eb1 	.word	0x08000eb1
 8000e88:	08000eb9 	.word	0x08000eb9
 8000e8c:	08000ec1 	.word	0x08000ec1
	case TIMEOUT_HALF_SEC:
		wdt->Init.Prescaler = WDT_PSC_4;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
		break;
 8000e96:	e019      	b.n	8000ecc <watchdog_set_timeout+0x70>
	case TIMEOUT_ONE_SEC:
		wdt->Init.Prescaler = WDT_PSC_8;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	605a      	str	r2, [r3, #4]
		break;
 8000e9e:	e015      	b.n	8000ecc <watchdog_set_timeout+0x70>
	case TIMEOUT_2_SEC:
		wdt->Init.Prescaler = WDT_PSC_16;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	605a      	str	r2, [r3, #4]
		break;
 8000ea6:	e011      	b.n	8000ecc <watchdog_set_timeout+0x70>
	case TIMEOUT_4_SEC:
		wdt->Init.Prescaler = WDT_PSC_32;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2203      	movs	r2, #3
 8000eac:	605a      	str	r2, [r3, #4]
		break;
 8000eae:	e00d      	b.n	8000ecc <watchdog_set_timeout+0x70>
	case TIMEOUT_8_SEC:
		wdt->Init.Prescaler = WDT_PSC_64;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	605a      	str	r2, [r3, #4]
		break;
 8000eb6:	e009      	b.n	8000ecc <watchdog_set_timeout+0x70>
	case TIMEOUT_16_SEC:
		wdt->Init.Prescaler = WDT_PSC_128;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2205      	movs	r2, #5
 8000ebc:	605a      	str	r2, [r3, #4]
		break;
 8000ebe:	e005      	b.n	8000ecc <watchdog_set_timeout+0x70>
	case TIMEOUT_32_SEC:
		wdt->Init.Prescaler = WDT_PSC_256;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2206      	movs	r2, #6
 8000ec4:	605a      	str	r2, [r3, #4]
		break;
 8000ec6:	e001      	b.n	8000ecc <watchdog_set_timeout+0x70>
	default:
		return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e00b      	b.n	8000ee4 <watchdog_set_timeout+0x88>
	}
	wdt->Init.Reload = 4095;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000ed2:	609a      	str	r2, [r3, #8]
	wdt->Init.Window = 4095;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000eda:	60da      	str	r2, [r3, #12]
	return HAL_IWDG_Init(wdt);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f000 fe9f 	bl	8001c20 <HAL_IWDG_Init>
 8000ee2:	4603      	mov	r3, r0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <ping_to_watchdog>:

HAL_StatusTypeDef ping_to_watchdog(IWDG_HandleTypeDef *wdt) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	return HAL_IWDG_Refresh(wdt);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 fee2 	bl	8001cbe <HAL_IWDG_Refresh>
 8000efa:	4603      	mov	r3, r0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f08:	f7ff ff96 	bl	8000e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f0c:	480c      	ldr	r0, [pc, #48]	; (8000f40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f0e:	490d      	ldr	r1, [pc, #52]	; (8000f44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <LoopForever+0xe>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f14:	e002      	b.n	8000f1c <LoopCopyDataInit>

08000f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1a:	3304      	adds	r3, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f20:	d3f9      	bcc.n	8000f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f24:	4c0a      	ldr	r4, [pc, #40]	; (8000f50 <LoopForever+0x16>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f28:	e001      	b.n	8000f2e <LoopFillZerobss>

08000f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2c:	3204      	adds	r2, #4

08000f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f30:	d3fb      	bcc.n	8000f2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f32:	f003 fc85 	bl	8004840 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f36:	f7ff fd45 	bl	80009c4 <main>

08000f3a <LoopForever>:

LoopForever:
    b LoopForever
 8000f3a:	e7fe      	b.n	8000f3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f3c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f44:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000f48:	08004914 	.word	0x08004914
  ldr r2, =_sbss
 8000f4c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000f50:	20000900 	.word	0x20000900

08000f54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f54:	e7fe      	b.n	8000f54 <ADC1_IRQHandler>

08000f56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 f98f 	bl	8001284 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f66:	200f      	movs	r0, #15
 8000f68:	f000 f84a 	bl	8001000 <HAL_InitTick>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d002      	beq.n	8000f78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	71fb      	strb	r3, [r7, #7]
 8000f76:	e001      	b.n	8000f7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f78:	f7ff fea6 	bl	8000cc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <HAL_DeInit>:
  * @brief De-initialize common part of the HAL and stop the source of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_DeInit+0x64>)
 8000f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f92:	639a      	str	r2, [r3, #56]	; 0x38
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_DeInit+0x64>)
 8000f96:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9a:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_RCC_APB1_RELEASE_RESET();
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <HAL_DeInit+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	639a      	str	r2, [r3, #56]	; 0x38
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_DeInit+0x64>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	63da      	str	r2, [r3, #60]	; 0x3c

  __HAL_RCC_APB2_FORCE_RESET();
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_DeInit+0x64>)
 8000faa:	f04f 32ff 	mov.w	r2, #4294967295
 8000fae:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_DeInit+0x64>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	641a      	str	r2, [r3, #64]	; 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_DeInit+0x64>)
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbc:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_DeInit+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_DeInit+0x64>)
 8000fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <HAL_DeInit+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_DeInit+0x64>)
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd8:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <HAL_DeInit+0x64>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	631a      	str	r2, [r3, #48]	; 0x30

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000fe0:	f000 f806 	bl	8000ff0 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000

08000ff0 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <HAL_InitTick+0x6c>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d023      	beq.n	800105c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <HAL_InitTick+0x70>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <HAL_InitTick+0x6c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001022:	fbb3 f3f1 	udiv	r3, r3, r1
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f963 	bl	80012f6 <HAL_SYSTICK_Config>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10f      	bne.n	8001056 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d809      	bhi.n	8001050 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f000 f929 	bl	800129a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001048:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <HAL_InitTick+0x74>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	e007      	b.n	8001060 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	e004      	b.n	8001060 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	73fb      	strb	r3, [r7, #15]
 800105a:	e001      	b.n	8001060 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000008 	.word	0x20000008
 8001070:	20000000 	.word	0x20000000
 8001074:	20000004 	.word	0x20000004

08001078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x20>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x24>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <HAL_IncTick+0x24>)
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000008 	.word	0x20000008
 800109c:	200008fc 	.word	0x200008fc

080010a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <HAL_GetTick+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	200008fc 	.word	0x200008fc

080010b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ea:	4a04      	ldr	r2, [pc, #16]	; (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4907      	ldr	r1, [pc, #28]	; (8001154 <__NVIC_EnableIRQ+0x38>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db0a      	blt.n	8001182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	490c      	ldr	r1, [pc, #48]	; (80011a4 <__NVIC_SetPriority+0x4c>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001180:	e00a      	b.n	8001198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4908      	ldr	r1, [pc, #32]	; (80011a8 <__NVIC_SetPriority+0x50>)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3b04      	subs	r3, #4
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	440b      	add	r3, r1
 8001196:	761a      	strb	r2, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf28      	it	cs
 80011ca:	2304      	movcs	r3, #4
 80011cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d902      	bls.n	80011dc <NVIC_EncodePriority+0x30>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b03      	subs	r3, #3
 80011da:	e000      	b.n	80011de <NVIC_EncodePriority+0x32>
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43d9      	mvns	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	4313      	orrs	r3, r2
         );
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	; 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001218:	f3bf 8f4f 	dsb	sy
}
 800121c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <__NVIC_SystemReset+0x24>)
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001226:	4904      	ldr	r1, [pc, #16]	; (8001238 <__NVIC_SystemReset+0x24>)
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <__NVIC_SystemReset+0x28>)
 800122a:	4313      	orrs	r3, r2
 800122c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800122e:	f3bf 8f4f 	dsb	sy
}
 8001232:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <__NVIC_SystemReset+0x20>
 8001238:	e000ed00 	.word	0xe000ed00
 800123c:	05fa0004 	.word	0x05fa0004

08001240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001250:	d301      	bcc.n	8001256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001252:	2301      	movs	r3, #1
 8001254:	e00f      	b.n	8001276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001256:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <SysTick_Config+0x40>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125e:	210f      	movs	r1, #15
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f7ff ff78 	bl	8001158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <SysTick_Config+0x40>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <SysTick_Config+0x40>)
 8001270:	2207      	movs	r2, #7
 8001272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	e000e010 	.word	0xe000e010

08001284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff13 	bl	80010b8 <__NVIC_SetPriorityGrouping>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ac:	f7ff ff28 	bl	8001100 <__NVIC_GetPriorityGrouping>
 80012b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7ff ff78 	bl	80011ac <NVIC_EncodePriority>
 80012bc:	4602      	mov	r2, r0
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff47 	bl	8001158 <__NVIC_SetPriority>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff1b 	bl	800111c <__NVIC_EnableIRQ>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80012f2:	f7ff ff8f 	bl	8001214 <__NVIC_SystemReset>

080012f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ff9e 	bl	8001240 <SysTick_Config>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800130e:	b480      	push	{r7}
 8001310:	b085      	sub	sp, #20
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d008      	beq.n	8001338 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2204      	movs	r2, #4
 800132a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e022      	b.n	800137e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 020e 	bic.w	r2, r2, #14
 8001346:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135c:	f003 021c 	and.w	r2, r3, #28
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	2101      	movs	r1, #1
 8001366:	fa01 f202 	lsl.w	r2, r1, r2
 800136a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b084      	sub	sp, #16
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d005      	beq.n	80013ae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2204      	movs	r2, #4
 80013a6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e029      	b.n	8001402 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 020e 	bic.w	r2, r2, #14
 80013bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0201 	bic.w	r2, r2, #1
 80013cc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f003 021c 	and.w	r2, r3, #28
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	2101      	movs	r1, #1
 80013dc:	fa01 f202 	lsl.w	r2, r1, r2
 80013e0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	4798      	blx	r3
    }
  }
  return status;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800141e:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <HAL_FLASH_Program+0xd0>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d101      	bne.n	800142a <HAL_FLASH_Program+0x1e>
 8001426:	2302      	movs	r3, #2
 8001428:	e053      	b.n	80014d2 <HAL_FLASH_Program+0xc6>
 800142a:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <HAL_FLASH_Program+0xd0>)
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001430:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001434:	f000 f888 	bl	8001548 <FLASH_WaitForLastOperation>
 8001438:	4603      	mov	r3, r0
 800143a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800143c:	7dfb      	ldrb	r3, [r7, #23]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d143      	bne.n	80014ca <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <HAL_FLASH_Program+0xd0>)
 8001444:	2200      	movs	r2, #0
 8001446:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001448:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <HAL_FLASH_Program+0xd4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001450:	2b00      	cmp	r3, #0
 8001452:	d009      	beq.n	8001468 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001454:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <HAL_FLASH_Program+0xd4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a21      	ldr	r2, [pc, #132]	; (80014e0 <HAL_FLASH_Program+0xd4>)
 800145a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800145e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <HAL_FLASH_Program+0xd0>)
 8001462:	2202      	movs	r2, #2
 8001464:	771a      	strb	r2, [r3, #28]
 8001466:	e002      	b.n	800146e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001468:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <HAL_FLASH_Program+0xd0>)
 800146a:	2200      	movs	r2, #0
 800146c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d107      	bne.n	8001484 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001478:	68b8      	ldr	r0, [r7, #8]
 800147a:	f000 f8bd 	bl	80015f8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800147e:	2301      	movs	r3, #1
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	e010      	b.n	80014a6 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d002      	beq.n	8001490 <HAL_FLASH_Program+0x84>
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d10a      	bne.n	80014a6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	4619      	mov	r1, r3
 8001494:	68b8      	ldr	r0, [r7, #8]
 8001496:	f000 f8d5 	bl	8001644 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d102      	bne.n	80014a6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80014a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014a4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014a6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014aa:	f000 f84d 	bl	8001548 <FLASH_WaitForLastOperation>
 80014ae:	4603      	mov	r3, r0
 80014b0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_FLASH_Program+0xd4>)
 80014ba:	695a      	ldr	r2, [r3, #20]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	43db      	mvns	r3, r3
 80014c0:	4907      	ldr	r1, [pc, #28]	; (80014e0 <HAL_FLASH_Program+0xd4>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80014c6:	f000 f9cf 	bl	8001868 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014ca:	4b04      	ldr	r3, [pc, #16]	; (80014dc <HAL_FLASH_Program+0xd0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]

  return status;
 80014d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000000c 	.word	0x2000000c
 80014e0:	40022000 	.word	0x40022000

080014e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <HAL_FLASH_Unlock+0x38>)
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	da0b      	bge.n	800150e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_FLASH_Unlock+0x38>)
 80014f8:	4a09      	ldr	r2, [pc, #36]	; (8001520 <HAL_FLASH_Unlock+0x3c>)
 80014fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <HAL_FLASH_Unlock+0x38>)
 80014fe:	4a09      	ldr	r2, [pc, #36]	; (8001524 <HAL_FLASH_Unlock+0x40>)
 8001500:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_FLASH_Unlock+0x38>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	2b00      	cmp	r3, #0
 8001508:	da01      	bge.n	800150e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800150e:	79fb      	ldrb	r3, [r7, #7]
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	40022000 	.word	0x40022000
 8001520:	45670123 	.word	0x45670123
 8001524:	cdef89ab 	.word	0xcdef89ab

08001528 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_FLASH_Lock+0x1c>)
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_FLASH_Lock+0x1c>)
 8001532:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001536:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	40022000 	.word	0x40022000

08001548 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff fda6 	bl	80010a0 <HAL_GetTick>
 8001554:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001556:	e00d      	b.n	8001574 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155e:	d009      	beq.n	8001574 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001560:	f7ff fd9e 	bl	80010a0 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	429a      	cmp	r2, r3
 800156e:	d801      	bhi.n	8001574 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e036      	b.n	80015e2 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <FLASH_WaitForLastOperation+0xa4>)
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1eb      	bne.n	8001558 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <FLASH_WaitForLastOperation+0xa4>)
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <FLASH_WaitForLastOperation+0xa8>)
 8001586:	4013      	ands	r3, r2
 8001588:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d01e      	beq.n	80015ce <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001590:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <FLASH_WaitForLastOperation+0xac>)
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4313      	orrs	r3, r2
 8001598:	4a16      	ldr	r2, [pc, #88]	; (80015f4 <FLASH_WaitForLastOperation+0xac>)
 800159a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d007      	beq.n	80015b6 <FLASH_WaitForLastOperation+0x6e>
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <FLASH_WaitForLastOperation+0xa4>)
 80015a8:	699a      	ldr	r2, [r3, #24]
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80015b0:	490e      	ldr	r1, [pc, #56]	; (80015ec <FLASH_WaitForLastOperation+0xa4>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	618b      	str	r3, [r1, #24]
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d004      	beq.n	80015ca <FLASH_WaitForLastOperation+0x82>
 80015c0:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <FLASH_WaitForLastOperation+0xa4>)
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80015c8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e009      	b.n	80015e2 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <FLASH_WaitForLastOperation+0xa4>)
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <FLASH_WaitForLastOperation+0xa4>)
 80015dc:	2201      	movs	r2, #1
 80015de:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40022000 	.word	0x40022000
 80015f0:	0002c3fa 	.word	0x0002c3fa
 80015f4:	2000000c 	.word	0x2000000c

080015f8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001604:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <FLASH_Program_DoubleWord+0x48>)
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <FLASH_Program_DoubleWord+0x48>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001616:	f3bf 8f6f 	isb	sy
}
 800161a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800161c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	000a      	movs	r2, r1
 800162a:	2300      	movs	r3, #0
 800162c:	68f9      	ldr	r1, [r7, #12]
 800162e:	3104      	adds	r1, #4
 8001630:	4613      	mov	r3, r2
 8001632:	600b      	str	r3, [r1, #0]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40022000 	.word	0x40022000

08001644 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8001644:	b480      	push	{r7}
 8001646:	b089      	sub	sp, #36	; 0x24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800164e:	2340      	movs	r3, #64	; 0x40
 8001650:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <FLASH_Program_Fast+0x68>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	4a13      	ldr	r2, [pc, #76]	; (80016ac <FLASH_Program_Fast+0x68>)
 8001660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001664:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001666:	f3ef 8310 	mrs	r3, PRIMASK
 800166a:	60fb      	str	r3, [r7, #12]
  return(result);
 800166c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800166e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	3304      	adds	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3304      	adds	r3, #4
 8001686:	617b      	str	r3, [r7, #20]
    row_index--;
 8001688:	7ffb      	ldrb	r3, [r7, #31]
 800168a:	3b01      	subs	r3, #1
 800168c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800168e:	7ffb      	ldrb	r3, [r7, #31]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1ef      	bne.n	8001674 <FLASH_Program_Fast+0x30>
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	f383 8810 	msr	PRIMASK, r3
}
 800169e:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80016a0:	bf00      	nop
 80016a2:	3724      	adds	r7, #36	; 0x24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	40022000 	.word	0x40022000

080016b0 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80016ba:	4b48      	ldr	r3, [pc, #288]	; (80017dc <HAL_FLASHEx_Erase+0x12c>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_FLASHEx_Erase+0x16>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e085      	b.n	80017d2 <HAL_FLASHEx_Erase+0x122>
 80016c6:	4b45      	ldr	r3, [pc, #276]	; (80017dc <HAL_FLASHEx_Erase+0x12c>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016d0:	f7ff ff3a 	bl	8001548 <FLASH_WaitForLastOperation>
 80016d4:	4603      	mov	r3, r0
 80016d6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d175      	bne.n	80017ca <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016de:	4b3f      	ldr	r3, [pc, #252]	; (80017dc <HAL_FLASHEx_Erase+0x12c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80016e4:	4b3e      	ldr	r3, [pc, #248]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d013      	beq.n	8001718 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80016f0:	4b3b      	ldr	r3, [pc, #236]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d009      	beq.n	8001710 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80016fc:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a37      	ldr	r2, [pc, #220]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 8001702:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001706:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001708:	4b34      	ldr	r3, [pc, #208]	; (80017dc <HAL_FLASHEx_Erase+0x12c>)
 800170a:	2203      	movs	r2, #3
 800170c:	771a      	strb	r2, [r3, #28]
 800170e:	e016      	b.n	800173e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001710:	4b32      	ldr	r3, [pc, #200]	; (80017dc <HAL_FLASHEx_Erase+0x12c>)
 8001712:	2201      	movs	r2, #1
 8001714:	771a      	strb	r2, [r3, #28]
 8001716:	e012      	b.n	800173e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001718:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001720:	2b00      	cmp	r3, #0
 8001722:	d009      	beq.n	8001738 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001724:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a2d      	ldr	r2, [pc, #180]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 800172a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800172e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001730:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <HAL_FLASHEx_Erase+0x12c>)
 8001732:	2202      	movs	r2, #2
 8001734:	771a      	strb	r2, [r3, #28]
 8001736:	e002      	b.n	800173e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001738:	4b28      	ldr	r3, [pc, #160]	; (80017dc <HAL_FLASHEx_Erase+0x12c>)
 800173a:	2200      	movs	r2, #0
 800173c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d111      	bne.n	800176a <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f84a 	bl	80017e4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001750:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001754:	f7ff fef8 	bl	8001548 <FLASH_WaitForLastOperation>
 8001758:	4603      	mov	r3, r0
 800175a:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800175c:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	4a1f      	ldr	r2, [pc, #124]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 8001762:	f023 0304 	bic.w	r3, r3, #4
 8001766:	6153      	str	r3, [r2, #20]
 8001768:	e02d      	b.n	80017c6 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	f04f 32ff 	mov.w	r2, #4294967295
 8001770:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	e01d      	b.n	80017b6 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	4619      	mov	r1, r3
 8001780:	68b8      	ldr	r0, [r7, #8]
 8001782:	f000 f84d 	bl	8001820 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001786:	f24c 3050 	movw	r0, #50000	; 0xc350
 800178a:	f7ff fedd 	bl	8001548 <FLASH_WaitForLastOperation>
 800178e:	4603      	mov	r3, r0
 8001790:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 8001798:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800179c:	f023 0302 	bic.w	r3, r3, #2
 80017a0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	601a      	str	r2, [r3, #0]
          break;
 80017ae:	e00a      	b.n	80017c6 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	3301      	adds	r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d3d9      	bcc.n	800177a <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80017c6:	f000 f84f 	bl	8001868 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017ca:	4b04      	ldr	r3, [pc, #16]	; (80017dc <HAL_FLASHEx_Erase+0x12c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]

  return status;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	2000000c 	.word	0x2000000c
 80017e0:	40022000 	.word	0x40022000

080017e4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d005      	beq.n	8001802 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <FLASH_MassErase+0x38>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <FLASH_MassErase+0x38>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <FLASH_MassErase+0x38>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <FLASH_MassErase+0x38>)
 8001808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180c:	6153      	str	r3, [r2, #20]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40022000 	.word	0x40022000

08001820 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <FLASH_PageErase+0x44>)
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800183a:	490a      	ldr	r1, [pc, #40]	; (8001864 <FLASH_PageErase+0x44>)
 800183c:	4313      	orrs	r3, r2
 800183e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <FLASH_PageErase+0x44>)
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <FLASH_PageErase+0x44>)
 8001846:	f043 0302 	orr.w	r3, r3, #2
 800184a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <FLASH_PageErase+0x44>)
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <FLASH_PageErase+0x44>)
 8001852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001856:	6153      	str	r3, [r2, #20]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	40022000 	.word	0x40022000

08001868 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800186e:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <FLASH_FlushCaches+0x8c>)
 8001870:	7f1b      	ldrb	r3, [r3, #28]
 8001872:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d002      	beq.n	8001880 <FLASH_FlushCaches+0x18>
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	2b03      	cmp	r3, #3
 800187e:	d117      	bne.n	80018b0 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001880:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <FLASH_FlushCaches+0x90>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a1c      	ldr	r2, [pc, #112]	; (80018f8 <FLASH_FlushCaches+0x90>)
 8001886:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800188a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <FLASH_FlushCaches+0x90>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a19      	ldr	r2, [pc, #100]	; (80018f8 <FLASH_FlushCaches+0x90>)
 8001892:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <FLASH_FlushCaches+0x90>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a16      	ldr	r2, [pc, #88]	; (80018f8 <FLASH_FlushCaches+0x90>)
 800189e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018a2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a4:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <FLASH_FlushCaches+0x90>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a13      	ldr	r2, [pc, #76]	; (80018f8 <FLASH_FlushCaches+0x90>)
 80018aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ae:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d002      	beq.n	80018bc <FLASH_FlushCaches+0x54>
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d111      	bne.n	80018e0 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <FLASH_FlushCaches+0x90>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <FLASH_FlushCaches+0x90>)
 80018c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <FLASH_FlushCaches+0x90>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <FLASH_FlushCaches+0x90>)
 80018ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018d2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <FLASH_FlushCaches+0x90>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <FLASH_FlushCaches+0x90>)
 80018da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018de:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <FLASH_FlushCaches+0x8c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	771a      	strb	r2, [r3, #28]
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	2000000c 	.word	0x2000000c
 80018f8:	40022000 	.word	0x40022000

080018fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190a:	e154      	b.n	8001bb6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2101      	movs	r1, #1
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	4013      	ands	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8146 	beq.w	8001bb0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b01      	cmp	r3, #1
 800192e:	d005      	beq.n	800193c <HAL_GPIO_Init+0x40>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d130      	bne.n	800199e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2203      	movs	r2, #3
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001972:	2201      	movs	r2, #1
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	f003 0201 	and.w	r2, r3, #1
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d017      	beq.n	80019da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	2203      	movs	r2, #3
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d123      	bne.n	8001a2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	08da      	lsrs	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3208      	adds	r2, #8
 80019ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	220f      	movs	r2, #15
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	691a      	ldr	r2, [r3, #16]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	08da      	lsrs	r2, r3, #3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3208      	adds	r2, #8
 8001a28:	6939      	ldr	r1, [r7, #16]
 8001a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	2203      	movs	r2, #3
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0203 	and.w	r2, r3, #3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 80a0 	beq.w	8001bb0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a70:	4b58      	ldr	r3, [pc, #352]	; (8001bd4 <HAL_GPIO_Init+0x2d8>)
 8001a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a74:	4a57      	ldr	r2, [pc, #348]	; (8001bd4 <HAL_GPIO_Init+0x2d8>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6613      	str	r3, [r2, #96]	; 0x60
 8001a7c:	4b55      	ldr	r3, [pc, #340]	; (8001bd4 <HAL_GPIO_Init+0x2d8>)
 8001a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a88:	4a53      	ldr	r2, [pc, #332]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	3302      	adds	r3, #2
 8001a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ab2:	d019      	beq.n	8001ae8 <HAL_GPIO_Init+0x1ec>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a49      	ldr	r2, [pc, #292]	; (8001bdc <HAL_GPIO_Init+0x2e0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d013      	beq.n	8001ae4 <HAL_GPIO_Init+0x1e8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a48      	ldr	r2, [pc, #288]	; (8001be0 <HAL_GPIO_Init+0x2e4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d00d      	beq.n	8001ae0 <HAL_GPIO_Init+0x1e4>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a47      	ldr	r2, [pc, #284]	; (8001be4 <HAL_GPIO_Init+0x2e8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d007      	beq.n	8001adc <HAL_GPIO_Init+0x1e0>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a46      	ldr	r2, [pc, #280]	; (8001be8 <HAL_GPIO_Init+0x2ec>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d101      	bne.n	8001ad8 <HAL_GPIO_Init+0x1dc>
 8001ad4:	2304      	movs	r3, #4
 8001ad6:	e008      	b.n	8001aea <HAL_GPIO_Init+0x1ee>
 8001ad8:	2307      	movs	r3, #7
 8001ada:	e006      	b.n	8001aea <HAL_GPIO_Init+0x1ee>
 8001adc:	2303      	movs	r3, #3
 8001ade:	e004      	b.n	8001aea <HAL_GPIO_Init+0x1ee>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e002      	b.n	8001aea <HAL_GPIO_Init+0x1ee>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <HAL_GPIO_Init+0x1ee>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	f002 0203 	and.w	r2, r2, #3
 8001af0:	0092      	lsls	r2, r2, #2
 8001af2:	4093      	lsls	r3, r2
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001afa:	4937      	ldr	r1, [pc, #220]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3302      	adds	r3, #2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b08:	4b38      	ldr	r3, [pc, #224]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b2c:	4a2f      	ldr	r2, [pc, #188]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b32:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b56:	4a25      	ldr	r2, [pc, #148]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b5c:	4b23      	ldr	r3, [pc, #140]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b80:	4a1a      	ldr	r2, [pc, #104]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b86:	4b19      	ldr	r3, [pc, #100]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001baa:	4a10      	ldr	r2, [pc, #64]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f47f aea3 	bne.w	800190c <HAL_GPIO_Init+0x10>
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	bf00      	nop
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40010000 	.word	0x40010000
 8001bdc:	48000400 	.word	0x48000400
 8001be0:	48000800 	.word	0x48000800
 8001be4:	48000c00 	.word	0x48000c00
 8001be8:	48001000 	.word	0x48001000
 8001bec:	40010400 	.word	0x40010400

08001bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c00:	787b      	ldrb	r3, [r7, #1]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c0c:	e002      	b.n	8001c14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e041      	b.n	8001cb6 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001c3a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f245 5255 	movw	r2, #21845	; 0x5555
 8001c44:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6852      	ldr	r2, [r2, #4]
 8001c4e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6892      	ldr	r2, [r2, #8]
 8001c58:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001c5a:	f7ff fa21 	bl	80010a0 <HAL_GetTick>
 8001c5e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001c60:	e00f      	b.n	8001c82 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001c62:	f7ff fa1d 	bl	80010a0 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b31      	cmp	r3, #49	; 0x31
 8001c6e:	d908      	bls.n	8001c82 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e019      	b.n	8001cb6 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1e8      	bne.n	8001c62 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691a      	ldr	r2, [r3, #16]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d005      	beq.n	8001caa <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68d2      	ldr	r2, [r2, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
 8001ca8:	e004      	b.n	8001cb4 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001cb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001cce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40007000 	.word	0x40007000

08001cfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d0a:	d130      	bne.n	8001d6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d0c:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d18:	d038      	beq.n	8001d8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d1a:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d22:	4a1e      	ldr	r2, [pc, #120]	; (8001d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d2a:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2232      	movs	r2, #50	; 0x32
 8001d30:	fb02 f303 	mul.w	r3, r2, r3
 8001d34:	4a1b      	ldr	r2, [pc, #108]	; (8001da4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d36:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3a:	0c9b      	lsrs	r3, r3, #18
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d40:	e002      	b.n	8001d48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d54:	d102      	bne.n	8001d5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f2      	bne.n	8001d42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d68:	d110      	bne.n	8001d8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e00f      	b.n	8001d8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d7a:	d007      	beq.n	8001d8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d84:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40007000 	.word	0x40007000
 8001da0:	20000000 	.word	0x20000000
 8001da4:	431bde83 	.word	0x431bde83

08001da8 <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001dae:	4b45      	ldr	r3, [pc, #276]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a44      	ldr	r2, [pc, #272]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8001dba:	f7ff f971 	bl	80010a0 <HAL_GetTick>
 8001dbe:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc2:	f7ff f96d 	bl	80010a0 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e073      	b.n	8001ebc <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dd4:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8001de0:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001de8:	4a36      	ldr	r2, [pc, #216]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001dea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001dee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 8001df0:	4b34      	ldr	r3, [pc, #208]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 8001df6:	4b34      	ldr	r3, [pc, #208]	; (8001ec8 <HAL_RCC_DeInit+0x120>)
 8001df8:	4a34      	ldr	r2, [pc, #208]	; (8001ecc <HAL_RCC_DeInit+0x124>)
 8001dfa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8001dfc:	4b34      	ldr	r3, [pc, #208]	; (8001ed0 <HAL_RCC_DeInit+0x128>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff f8fd 	bl	8001000 <HAL_InitTick>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e055      	b.n	8001ebc <HAL_RCC_DeInit+0x114>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8001e10:	f7ff f946 	bl	80010a0 <HAL_GetTick>
 8001e14:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8001e16:	e00a      	b.n	8001e2e <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e18:	f7ff f942 	bl	80010a0 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e046      	b.n	8001ebc <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8001e2e:	4b25      	ldr	r3, [pc, #148]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1ee      	bne.n	8001e18 <HAL_RCC_DeInit+0x70>

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);

#elif defined(RCC_PLLSAI1_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON);
 8001e3a:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4921      	ldr	r1, [pc, #132]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001e40:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <HAL_RCC_DeInit+0x12c>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8001e46:	f7ff f92b 	bl	80010a0 <HAL_GetTick>
 8001e4a:	6078      	str	r0, [r7, #4]

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)

#elif defined(RCC_PLLSAI1_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4e:	f7ff f927 	bl	80010a0 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e02d      	b.n	8001ebc <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 6320 	and.w	r3, r3, #167772160	; 0xa000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f0      	bne.n	8001e4e <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 8001e6c:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 8001e72:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	4a13      	ldr	r2, [pc, #76]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e7c:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	4a0e      	ldr	r2, [pc, #56]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001e8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e8e:	6113      	str	r3, [r2, #16]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea8:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_DeInit+0x11c>)
 8001eb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001eb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	003d0900 	.word	0x003d0900
 8001ed0:	20000004 	.word	0x20000004
 8001ed4:	fafef4ff 	.word	0xfafef4ff

08001ed8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d102      	bne.n	8001eec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f000 bc02 	b.w	80026f0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eec:	4b96      	ldr	r3, [pc, #600]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ef6:	4b94      	ldr	r3, [pc, #592]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80e4 	beq.w	80020d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d007      	beq.n	8001f24 <HAL_RCC_OscConfig+0x4c>
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2b0c      	cmp	r3, #12
 8001f18:	f040 808b 	bne.w	8002032 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	f040 8087 	bne.w	8002032 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f24:	4b88      	ldr	r3, [pc, #544]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_OscConfig+0x64>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e3d9      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1a      	ldr	r2, [r3, #32]
 8001f40:	4b81      	ldr	r3, [pc, #516]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d004      	beq.n	8001f56 <HAL_RCC_OscConfig+0x7e>
 8001f4c:	4b7e      	ldr	r3, [pc, #504]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f54:	e005      	b.n	8001f62 <HAL_RCC_OscConfig+0x8a>
 8001f56:	4b7c      	ldr	r3, [pc, #496]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d223      	bcs.n	8001fae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fd8a 	bl	8002a84 <RCC_SetFlashLatencyFromMSIRange>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e3ba      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f7a:	4b73      	ldr	r3, [pc, #460]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a72      	ldr	r2, [pc, #456]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001f80:	f043 0308 	orr.w	r3, r3, #8
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4b70      	ldr	r3, [pc, #448]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	496d      	ldr	r1, [pc, #436]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f98:	4b6b      	ldr	r3, [pc, #428]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	4968      	ldr	r1, [pc, #416]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
 8001fac:	e025      	b.n	8001ffa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fae:	4b66      	ldr	r3, [pc, #408]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a65      	ldr	r2, [pc, #404]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001fb4:	f043 0308 	orr.w	r3, r3, #8
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	4b63      	ldr	r3, [pc, #396]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4960      	ldr	r1, [pc, #384]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fcc:	4b5e      	ldr	r3, [pc, #376]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	495b      	ldr	r1, [pc, #364]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d109      	bne.n	8001ffa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 fd4a 	bl	8002a84 <RCC_SetFlashLatencyFromMSIRange>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e37a      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ffa:	f000 fc81 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 8001ffe:	4602      	mov	r2, r0
 8002000:	4b51      	ldr	r3, [pc, #324]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	4950      	ldr	r1, [pc, #320]	; (800214c <HAL_RCC_OscConfig+0x274>)
 800200c:	5ccb      	ldrb	r3, [r1, r3]
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	fa22 f303 	lsr.w	r3, r2, r3
 8002016:	4a4e      	ldr	r2, [pc, #312]	; (8002150 <HAL_RCC_OscConfig+0x278>)
 8002018:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800201a:	4b4e      	ldr	r3, [pc, #312]	; (8002154 <HAL_RCC_OscConfig+0x27c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe ffee 	bl	8001000 <HAL_InitTick>
 8002024:	4603      	mov	r3, r0
 8002026:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d052      	beq.n	80020d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	e35e      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d032      	beq.n	80020a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800203a:	4b43      	ldr	r3, [pc, #268]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a42      	ldr	r2, [pc, #264]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002046:	f7ff f82b 	bl	80010a0 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800204e:	f7ff f827 	bl	80010a0 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e347      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002060:	4b39      	ldr	r3, [pc, #228]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800206c:	4b36      	ldr	r3, [pc, #216]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a35      	ldr	r2, [pc, #212]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8002072:	f043 0308 	orr.w	r3, r3, #8
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b33      	ldr	r3, [pc, #204]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4930      	ldr	r1, [pc, #192]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800208a:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	492b      	ldr	r1, [pc, #172]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 800209a:	4313      	orrs	r3, r2
 800209c:	604b      	str	r3, [r1, #4]
 800209e:	e01a      	b.n	80020d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020a0:	4b29      	ldr	r3, [pc, #164]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a28      	ldr	r2, [pc, #160]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 80020a6:	f023 0301 	bic.w	r3, r3, #1
 80020aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020ac:	f7fe fff8 	bl	80010a0 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020b4:	f7fe fff4 	bl	80010a0 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e314      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020c6:	4b20      	ldr	r3, [pc, #128]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x1dc>
 80020d2:	e000      	b.n	80020d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d073      	beq.n	80021ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_OscConfig+0x21c>
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2b0c      	cmp	r3, #12
 80020ec:	d10e      	bne.n	800210c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d10b      	bne.n	800210c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d063      	beq.n	80021c8 <HAL_RCC_OscConfig+0x2f0>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d15f      	bne.n	80021c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e2f1      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002114:	d106      	bne.n	8002124 <HAL_RCC_OscConfig+0x24c>
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e025      	b.n	8002170 <HAL_RCC_OscConfig+0x298>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800212c:	d114      	bne.n	8002158 <HAL_RCC_OscConfig+0x280>
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a05      	ldr	r2, [pc, #20]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8002134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	4b03      	ldr	r3, [pc, #12]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a02      	ldr	r2, [pc, #8]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8002140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e013      	b.n	8002170 <HAL_RCC_OscConfig+0x298>
 8002148:	40021000 	.word	0x40021000
 800214c:	080048bc 	.word	0x080048bc
 8002150:	20000000 	.word	0x20000000
 8002154:	20000004 	.word	0x20000004
 8002158:	4ba0      	ldr	r3, [pc, #640]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a9f      	ldr	r2, [pc, #636]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 800215e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	4b9d      	ldr	r3, [pc, #628]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a9c      	ldr	r2, [pc, #624]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 800216a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800216e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d013      	beq.n	80021a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002178:	f7fe ff92 	bl	80010a0 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002180:	f7fe ff8e 	bl	80010a0 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b64      	cmp	r3, #100	; 0x64
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e2ae      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002192:	4b92      	ldr	r3, [pc, #584]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0x2a8>
 800219e:	e014      	b.n	80021ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a0:	f7fe ff7e 	bl	80010a0 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a8:	f7fe ff7a 	bl	80010a0 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b64      	cmp	r3, #100	; 0x64
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e29a      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ba:	4b88      	ldr	r3, [pc, #544]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x2d0>
 80021c6:	e000      	b.n	80021ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d060      	beq.n	8002298 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_OscConfig+0x310>
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2b0c      	cmp	r3, #12
 80021e0:	d119      	bne.n	8002216 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d116      	bne.n	8002216 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021e8:	4b7c      	ldr	r3, [pc, #496]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_RCC_OscConfig+0x328>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e277      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002200:	4b76      	ldr	r3, [pc, #472]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	061b      	lsls	r3, r3, #24
 800220e:	4973      	ldr	r1, [pc, #460]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002214:	e040      	b.n	8002298 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d023      	beq.n	8002266 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800221e:	4b6f      	ldr	r3, [pc, #444]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a6e      	ldr	r2, [pc, #440]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222a:	f7fe ff39 	bl	80010a0 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002232:	f7fe ff35 	bl	80010a0 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e255      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002244:	4b65      	ldr	r3, [pc, #404]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002250:	4b62      	ldr	r3, [pc, #392]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	061b      	lsls	r3, r3, #24
 800225e:	495f      	ldr	r1, [pc, #380]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
 8002264:	e018      	b.n	8002298 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002266:	4b5d      	ldr	r3, [pc, #372]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a5c      	ldr	r2, [pc, #368]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 800226c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002272:	f7fe ff15 	bl	80010a0 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800227a:	f7fe ff11 	bl	80010a0 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e231      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800228c:	4b53      	ldr	r3, [pc, #332]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1f0      	bne.n	800227a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d03c      	beq.n	800231e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01c      	beq.n	80022e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ac:	4b4b      	ldr	r3, [pc, #300]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80022ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b2:	4a4a      	ldr	r2, [pc, #296]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7fe fef0 	bl	80010a0 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c4:	f7fe feec 	bl	80010a0 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e20c      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022d6:	4b41      	ldr	r3, [pc, #260]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80022d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0ef      	beq.n	80022c4 <HAL_RCC_OscConfig+0x3ec>
 80022e4:	e01b      	b.n	800231e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e6:	4b3d      	ldr	r3, [pc, #244]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80022e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ec:	4a3b      	ldr	r2, [pc, #236]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f6:	f7fe fed3 	bl	80010a0 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022fe:	f7fe fecf 	bl	80010a0 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e1ef      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002310:	4b32      	ldr	r3, [pc, #200]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1ef      	bne.n	80022fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 80a6 	beq.w	8002478 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800232c:	2300      	movs	r3, #0
 800232e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002330:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10d      	bne.n	8002358 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233c:	4b27      	ldr	r3, [pc, #156]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 800233e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002340:	4a26      	ldr	r2, [pc, #152]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002346:	6593      	str	r3, [r2, #88]	; 0x58
 8002348:	4b24      	ldr	r3, [pc, #144]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 800234a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002354:	2301      	movs	r3, #1
 8002356:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002358:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <HAL_RCC_OscConfig+0x508>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d118      	bne.n	8002396 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002364:	4b1e      	ldr	r3, [pc, #120]	; (80023e0 <HAL_RCC_OscConfig+0x508>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a1d      	ldr	r2, [pc, #116]	; (80023e0 <HAL_RCC_OscConfig+0x508>)
 800236a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002370:	f7fe fe96 	bl	80010a0 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002378:	f7fe fe92 	bl	80010a0 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e1b2      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <HAL_RCC_OscConfig+0x508>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d108      	bne.n	80023b0 <HAL_RCC_OscConfig+0x4d8>
 800239e:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80023a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a4:	4a0d      	ldr	r2, [pc, #52]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023ae:	e029      	b.n	8002404 <HAL_RCC_OscConfig+0x52c>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d115      	bne.n	80023e4 <HAL_RCC_OscConfig+0x50c>
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80023ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023be:	4a07      	ldr	r2, [pc, #28]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80023c0:	f043 0304 	orr.w	r3, r3, #4
 80023c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80023ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ce:	4a03      	ldr	r2, [pc, #12]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023d8:	e014      	b.n	8002404 <HAL_RCC_OscConfig+0x52c>
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40007000 	.word	0x40007000
 80023e4:	4b9a      	ldr	r3, [pc, #616]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 80023e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ea:	4a99      	ldr	r2, [pc, #612]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023f4:	4b96      	ldr	r3, [pc, #600]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 80023f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fa:	4a95      	ldr	r2, [pc, #596]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d016      	beq.n	800243a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240c:	f7fe fe48 	bl	80010a0 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002412:	e00a      	b.n	800242a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f7fe fe44 	bl	80010a0 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e162      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800242a:	4b89      	ldr	r3, [pc, #548]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 800242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0ed      	beq.n	8002414 <HAL_RCC_OscConfig+0x53c>
 8002438:	e015      	b.n	8002466 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243a:	f7fe fe31 	bl	80010a0 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002440:	e00a      	b.n	8002458 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002442:	f7fe fe2d 	bl	80010a0 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002450:	4293      	cmp	r3, r2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e14b      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002458:	4b7d      	ldr	r3, [pc, #500]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1ed      	bne.n	8002442 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002466:	7ffb      	ldrb	r3, [r7, #31]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d105      	bne.n	8002478 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800246c:	4b78      	ldr	r3, [pc, #480]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 800246e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002470:	4a77      	ldr	r2, [pc, #476]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 8002472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002476:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b00      	cmp	r3, #0
 8002482:	d03c      	beq.n	80024fe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01c      	beq.n	80024c6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800248c:	4b70      	ldr	r3, [pc, #448]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 800248e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002492:	4a6f      	ldr	r2, [pc, #444]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249c:	f7fe fe00 	bl	80010a0 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024a4:	f7fe fdfc 	bl	80010a0 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e11c      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024b6:	4b66      	ldr	r3, [pc, #408]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 80024b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0ef      	beq.n	80024a4 <HAL_RCC_OscConfig+0x5cc>
 80024c4:	e01b      	b.n	80024fe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024c6:	4b62      	ldr	r3, [pc, #392]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 80024c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024cc:	4a60      	ldr	r2, [pc, #384]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 80024ce:	f023 0301 	bic.w	r3, r3, #1
 80024d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d6:	f7fe fde3 	bl	80010a0 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024de:	f7fe fddf 	bl	80010a0 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e0ff      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024f0:	4b57      	ldr	r3, [pc, #348]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 80024f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1ef      	bne.n	80024de <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80f3 	beq.w	80026ee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	2b02      	cmp	r3, #2
 800250e:	f040 80c9 	bne.w	80026a4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002512:	4b4f      	ldr	r3, [pc, #316]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f003 0203 	and.w	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	429a      	cmp	r2, r3
 8002524:	d12c      	bne.n	8002580 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	3b01      	subs	r3, #1
 8002532:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002534:	429a      	cmp	r2, r3
 8002536:	d123      	bne.n	8002580 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002542:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d11b      	bne.n	8002580 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002552:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002554:	429a      	cmp	r2, r3
 8002556:	d113      	bne.n	8002580 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002562:	085b      	lsrs	r3, r3, #1
 8002564:	3b01      	subs	r3, #1
 8002566:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d109      	bne.n	8002580 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	3b01      	subs	r3, #1
 800257a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d06b      	beq.n	8002658 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	2b0c      	cmp	r3, #12
 8002584:	d062      	beq.n	800264c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002586:	4b32      	ldr	r3, [pc, #200]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e0ac      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002596:	4b2e      	ldr	r3, [pc, #184]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a2d      	ldr	r2, [pc, #180]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 800259c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025a2:	f7fe fd7d 	bl	80010a0 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025aa:	f7fe fd79 	bl	80010a0 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e099      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025bc:	4b24      	ldr	r3, [pc, #144]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f0      	bne.n	80025aa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c8:	4b21      	ldr	r3, [pc, #132]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	4b21      	ldr	r3, [pc, #132]	; (8002654 <HAL_RCC_OscConfig+0x77c>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025d8:	3a01      	subs	r2, #1
 80025da:	0112      	lsls	r2, r2, #4
 80025dc:	4311      	orrs	r1, r2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025e2:	0212      	lsls	r2, r2, #8
 80025e4:	4311      	orrs	r1, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025ea:	0852      	lsrs	r2, r2, #1
 80025ec:	3a01      	subs	r2, #1
 80025ee:	0552      	lsls	r2, r2, #21
 80025f0:	4311      	orrs	r1, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025f6:	0852      	lsrs	r2, r2, #1
 80025f8:	3a01      	subs	r2, #1
 80025fa:	0652      	lsls	r2, r2, #25
 80025fc:	4311      	orrs	r1, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002602:	06d2      	lsls	r2, r2, #27
 8002604:	430a      	orrs	r2, r1
 8002606:	4912      	ldr	r1, [pc, #72]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 8002608:	4313      	orrs	r3, r2
 800260a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800260c:	4b10      	ldr	r3, [pc, #64]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0f      	ldr	r2, [pc, #60]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 8002612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002616:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002618:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a0c      	ldr	r2, [pc, #48]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 800261e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002622:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002624:	f7fe fd3c 	bl	80010a0 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262c:	f7fe fd38 	bl	80010a0 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e058      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263e:	4b04      	ldr	r3, [pc, #16]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800264a:	e050      	b.n	80026ee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e04f      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
 8002650:	40021000 	.word	0x40021000
 8002654:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002658:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d144      	bne.n	80026ee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002664:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a23      	ldr	r2, [pc, #140]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 800266a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002670:	4b21      	ldr	r3, [pc, #132]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4a20      	ldr	r2, [pc, #128]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 8002676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800267a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800267c:	f7fe fd10 	bl	80010a0 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002684:	f7fe fd0c 	bl	80010a0 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e02c      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002696:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x7ac>
 80026a2:	e024      	b.n	80026ee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d01f      	beq.n	80026ea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026aa:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a12      	ldr	r2, [pc, #72]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 80026b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b6:	f7fe fcf3 	bl	80010a0 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026be:	f7fe fcef 	bl	80010a0 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e00f      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f0      	bne.n	80026be <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	4905      	ldr	r1, [pc, #20]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_RCC_OscConfig+0x824>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	60cb      	str	r3, [r1, #12]
 80026e8:	e001      	b.n	80026ee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3720      	adds	r7, #32
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000
 80026fc:	feeefffc 	.word	0xfeeefffc

08002700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0e7      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002714:	4b75      	ldr	r3, [pc, #468]	; (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d910      	bls.n	8002744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b72      	ldr	r3, [pc, #456]	; (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 0207 	bic.w	r2, r3, #7
 800272a:	4970      	ldr	r1, [pc, #448]	; (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b6e      	ldr	r3, [pc, #440]	; (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0cf      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d010      	beq.n	8002772 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	4b66      	ldr	r3, [pc, #408]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800275c:	429a      	cmp	r2, r3
 800275e:	d908      	bls.n	8002772 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002760:	4b63      	ldr	r3, [pc, #396]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	4960      	ldr	r1, [pc, #384]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d04c      	beq.n	8002818 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b03      	cmp	r3, #3
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002786:	4b5a      	ldr	r3, [pc, #360]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d121      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e0a6      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800279e:	4b54      	ldr	r3, [pc, #336]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d115      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e09a      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027b6:	4b4e      	ldr	r3, [pc, #312]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d109      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e08e      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027c6:	4b4a      	ldr	r3, [pc, #296]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e086      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027d6:	4b46      	ldr	r3, [pc, #280]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f023 0203 	bic.w	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4943      	ldr	r1, [pc, #268]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e8:	f7fe fc5a 	bl	80010a0 <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f0:	f7fe fc56 	bl	80010a0 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e06e      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	4b3a      	ldr	r3, [pc, #232]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 020c 	and.w	r2, r3, #12
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	429a      	cmp	r2, r3
 8002816:	d1eb      	bne.n	80027f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d010      	beq.n	8002846 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	4b31      	ldr	r3, [pc, #196]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002830:	429a      	cmp	r2, r3
 8002832:	d208      	bcs.n	8002846 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b2e      	ldr	r3, [pc, #184]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	492b      	ldr	r1, [pc, #172]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002846:	4b29      	ldr	r3, [pc, #164]	; (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d210      	bcs.n	8002876 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002854:	4b25      	ldr	r3, [pc, #148]	; (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f023 0207 	bic.w	r2, r3, #7
 800285c:	4923      	ldr	r1, [pc, #140]	; (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	4313      	orrs	r3, r2
 8002862:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002864:	4b21      	ldr	r3, [pc, #132]	; (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d001      	beq.n	8002876 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e036      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	d008      	beq.n	8002894 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002882:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	4918      	ldr	r1, [pc, #96]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002890:	4313      	orrs	r3, r2
 8002892:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d009      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028a0:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4910      	ldr	r1, [pc, #64]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028b4:	f000 f824 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	490b      	ldr	r1, [pc, #44]	; (80028f4 <HAL_RCC_ClockConfig+0x1f4>)
 80028c6:	5ccb      	ldrb	r3, [r1, r3]
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
 80028d0:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <HAL_RCC_ClockConfig+0x1f8>)
 80028d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_RCC_ClockConfig+0x1fc>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fe fb91 	bl	8001000 <HAL_InitTick>
 80028de:	4603      	mov	r3, r0
 80028e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80028e2:	7afb      	ldrb	r3, [r7, #11]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40022000 	.word	0x40022000
 80028f0:	40021000 	.word	0x40021000
 80028f4:	080048bc 	.word	0x080048bc
 80028f8:	20000000 	.word	0x20000000
 80028fc:	20000004 	.word	0x20000004

08002900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	2300      	movs	r3, #0
 800290c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800290e:	4b3e      	ldr	r3, [pc, #248]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002918:	4b3b      	ldr	r3, [pc, #236]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x34>
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b0c      	cmp	r3, #12
 800292c:	d121      	bne.n	8002972 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d11e      	bne.n	8002972 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002934:	4b34      	ldr	r3, [pc, #208]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d107      	bne.n	8002950 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002940:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	e005      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002950:	4b2d      	ldr	r3, [pc, #180]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800295c:	4a2b      	ldr	r2, [pc, #172]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x10c>)
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002964:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10d      	bne.n	8002988 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002970:	e00a      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	2b04      	cmp	r3, #4
 8002976:	d102      	bne.n	800297e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002978:	4b25      	ldr	r3, [pc, #148]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x110>)
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	e004      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2b08      	cmp	r3, #8
 8002982:	d101      	bne.n	8002988 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002984:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x110>)
 8002986:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	2b0c      	cmp	r3, #12
 800298c:	d134      	bne.n	80029f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800298e:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d003      	beq.n	80029a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d003      	beq.n	80029ac <HAL_RCC_GetSysClockFreq+0xac>
 80029a4:	e005      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029a6:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x110>)
 80029a8:	617b      	str	r3, [r7, #20]
      break;
 80029aa:	e005      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029ac:	4b18      	ldr	r3, [pc, #96]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x110>)
 80029ae:	617b      	str	r3, [r7, #20]
      break;
 80029b0:	e002      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	617b      	str	r3, [r7, #20]
      break;
 80029b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029b8:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	3301      	adds	r3, #1
 80029c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	0a1b      	lsrs	r3, r3, #8
 80029cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	fb03 f202 	mul.w	r2, r3, r2
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	0e5b      	lsrs	r3, r3, #25
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	3301      	adds	r3, #1
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029f8:	69bb      	ldr	r3, [r7, #24]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3724      	adds	r7, #36	; 0x24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	080048d4 	.word	0x080048d4
 8002a10:	00f42400 	.word	0x00f42400

08002a14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20000000 	.word	0x20000000

08002a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a30:	f7ff fff0 	bl	8002a14 <HAL_RCC_GetHCLKFreq>
 8002a34:	4602      	mov	r2, r0
 8002a36:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	4904      	ldr	r1, [pc, #16]	; (8002a54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a42:	5ccb      	ldrb	r3, [r1, r3]
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000
 8002a54:	080048cc 	.word	0x080048cc

08002a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a5c:	f7ff ffda 	bl	8002a14 <HAL_RCC_GetHCLKFreq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	0adb      	lsrs	r3, r3, #11
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	4904      	ldr	r1, [pc, #16]	; (8002a80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a6e:	5ccb      	ldrb	r3, [r1, r3]
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	080048cc 	.word	0x080048cc

08002a84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a90:	4b2a      	ldr	r3, [pc, #168]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a9c:	f7ff f920 	bl	8001ce0 <HAL_PWREx_GetVoltageRange>
 8002aa0:	6178      	str	r0, [r7, #20]
 8002aa2:	e014      	b.n	8002ace <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002aa4:	4b25      	ldr	r3, [pc, #148]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa8:	4a24      	ldr	r2, [pc, #144]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aae:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab0:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002abc:	f7ff f910 	bl	8001ce0 <HAL_PWREx_GetVoltageRange>
 8002ac0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ac2:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac6:	4a1d      	ldr	r2, [pc, #116]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002acc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad4:	d10b      	bne.n	8002aee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b80      	cmp	r3, #128	; 0x80
 8002ada:	d919      	bls.n	8002b10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2ba0      	cmp	r3, #160	; 0xa0
 8002ae0:	d902      	bls.n	8002ae8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	e013      	b.n	8002b10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ae8:	2301      	movs	r3, #1
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	e010      	b.n	8002b10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b80      	cmp	r3, #128	; 0x80
 8002af2:	d902      	bls.n	8002afa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002af4:	2303      	movs	r3, #3
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	e00a      	b.n	8002b10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b80      	cmp	r3, #128	; 0x80
 8002afe:	d102      	bne.n	8002b06 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b00:	2302      	movs	r3, #2
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	e004      	b.n	8002b10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b70      	cmp	r3, #112	; 0x70
 8002b0a:	d101      	bne.n	8002b10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 0207 	bic.w	r2, r3, #7
 8002b18:	4909      	ldr	r1, [pc, #36]	; (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b20:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d001      	beq.n	8002b32 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40022000 	.word	0x40022000

08002b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b50:	2300      	movs	r3, #0
 8002b52:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d031      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b64:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b68:	d01a      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002b6a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b6e:	d814      	bhi.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d009      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b78:	d10f      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002b7a:	4b5d      	ldr	r3, [pc, #372]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	4a5c      	ldr	r2, [pc, #368]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b84:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b86:	e00c      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 f9f0 	bl	8002f74 <RCCEx_PLLSAI1_Config>
 8002b94:	4603      	mov	r3, r0
 8002b96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b98:	e003      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	74fb      	strb	r3, [r7, #19]
      break;
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002ba0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ba2:	7cfb      	ldrb	r3, [r7, #19]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10b      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ba8:	4b51      	ldr	r3, [pc, #324]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	494e      	ldr	r1, [pc, #312]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bbe:	e001      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc0:	7cfb      	ldrb	r3, [r7, #19]
 8002bc2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 809e 	beq.w	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bd6:	4b46      	ldr	r3, [pc, #280]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002be6:	2300      	movs	r3, #0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00d      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bec:	4b40      	ldr	r3, [pc, #256]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	4a3f      	ldr	r2, [pc, #252]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	6593      	str	r3, [r2, #88]	; 0x58
 8002bf8:	4b3d      	ldr	r3, [pc, #244]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c04:	2301      	movs	r3, #1
 8002c06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c08:	4b3a      	ldr	r3, [pc, #232]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a39      	ldr	r2, [pc, #228]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c14:	f7fe fa44 	bl	80010a0 <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c1a:	e009      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1c:	f7fe fa40 	bl	80010a0 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d902      	bls.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	74fb      	strb	r3, [r7, #19]
        break;
 8002c2e:	e005      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c30:	4b30      	ldr	r3, [pc, #192]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0ef      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002c3c:	7cfb      	ldrb	r3, [r7, #19]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d15a      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c42:	4b2b      	ldr	r3, [pc, #172]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d01e      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d019      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c5e:	4b24      	ldr	r3, [pc, #144]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c68:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c6a:	4b21      	ldr	r3, [pc, #132]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	4a1f      	ldr	r2, [pc, #124]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c80:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c8a:	4a19      	ldr	r2, [pc, #100]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d016      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fa00 	bl	80010a0 <HAL_GetTick>
 8002ca0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ca2:	e00b      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca4:	f7fe f9fc 	bl	80010a0 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d902      	bls.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	74fb      	strb	r3, [r7, #19]
            break;
 8002cba:	e006      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0ec      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002cca:	7cfb      	ldrb	r3, [r7, #19]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10b      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cd0:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cde:	4904      	ldr	r1, [pc, #16]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ce6:	e009      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ce8:	7cfb      	ldrb	r3, [r7, #19]
 8002cea:	74bb      	strb	r3, [r7, #18]
 8002cec:	e006      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf8:	7cfb      	ldrb	r3, [r7, #19]
 8002cfa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cfc:	7c7b      	ldrb	r3, [r7, #17]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d105      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d02:	4b9b      	ldr	r3, [pc, #620]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d06:	4a9a      	ldr	r2, [pc, #616]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d1a:	4b95      	ldr	r3, [pc, #596]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d20:	f023 0203 	bic.w	r2, r3, #3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	4991      	ldr	r1, [pc, #580]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00a      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d3c:	4b8c      	ldr	r3, [pc, #560]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d42:	f023 020c 	bic.w	r2, r3, #12
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	4989      	ldr	r1, [pc, #548]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d5e:	4b84      	ldr	r3, [pc, #528]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	4980      	ldr	r1, [pc, #512]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d80:	4b7b      	ldr	r3, [pc, #492]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	4978      	ldr	r1, [pc, #480]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002da2:	4b73      	ldr	r3, [pc, #460]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db0:	496f      	ldr	r1, [pc, #444]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00a      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dc4:	4b6a      	ldr	r3, [pc, #424]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	4967      	ldr	r1, [pc, #412]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00a      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002de6:	4b62      	ldr	r3, [pc, #392]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	495e      	ldr	r1, [pc, #376]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00a      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e08:	4b59      	ldr	r3, [pc, #356]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e16:	4956      	ldr	r1, [pc, #344]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e2a:	4b51      	ldr	r3, [pc, #324]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e38:	494d      	ldr	r1, [pc, #308]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d028      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e4c:	4b48      	ldr	r3, [pc, #288]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5a:	4945      	ldr	r1, [pc, #276]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e6a:	d106      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e6c:	4b40      	ldr	r3, [pc, #256]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	4a3f      	ldr	r2, [pc, #252]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e76:	60d3      	str	r3, [r2, #12]
 8002e78:	e011      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e82:	d10c      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3304      	adds	r3, #4
 8002e88:	2101      	movs	r1, #1
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 f872 	bl	8002f74 <RCCEx_PLLSAI1_Config>
 8002e90:	4603      	mov	r3, r0
 8002e92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e94:	7cfb      	ldrb	r3, [r7, #19]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8002e9a:	7cfb      	ldrb	r3, [r7, #19]
 8002e9c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d028      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002eaa:	4b31      	ldr	r3, [pc, #196]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb8:	492d      	ldr	r1, [pc, #180]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ec8:	d106      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eca:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	4a28      	ldr	r2, [pc, #160]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ed4:	60d3      	str	r3, [r2, #12]
 8002ed6:	e011      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002edc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ee0:	d10c      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 f843 	bl	8002f74 <RCCEx_PLLSAI1_Config>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ef2:	7cfb      	ldrb	r3, [r7, #19]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002ef8:	7cfb      	ldrb	r3, [r7, #19]
 8002efa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01c      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f08:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f16:	4916      	ldr	r1, [pc, #88]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f26:	d10c      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	2102      	movs	r1, #2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 f820 	bl	8002f74 <RCCEx_PLLSAI1_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8002f3e:	7cfb      	ldrb	r3, [r7, #19]
 8002f40:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f4e:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f54:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5c:	4904      	ldr	r1, [pc, #16]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f64:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000

08002f74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f82:	4b74      	ldr	r3, [pc, #464]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d018      	beq.n	8002fc0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f8e:	4b71      	ldr	r3, [pc, #452]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f003 0203 	and.w	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d10d      	bne.n	8002fba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
       ||
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d009      	beq.n	8002fba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fa6:	4b6b      	ldr	r3, [pc, #428]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	091b      	lsrs	r3, r3, #4
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
       ||
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d047      	beq.n	800304a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	73fb      	strb	r3, [r7, #15]
 8002fbe:	e044      	b.n	800304a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d018      	beq.n	8002ffa <RCCEx_PLLSAI1_Config+0x86>
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d825      	bhi.n	8003018 <RCCEx_PLLSAI1_Config+0xa4>
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d002      	beq.n	8002fd6 <RCCEx_PLLSAI1_Config+0x62>
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d009      	beq.n	8002fe8 <RCCEx_PLLSAI1_Config+0x74>
 8002fd4:	e020      	b.n	8003018 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fd6:	4b5f      	ldr	r3, [pc, #380]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d11d      	bne.n	800301e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fe6:	e01a      	b.n	800301e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fe8:	4b5a      	ldr	r3, [pc, #360]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d116      	bne.n	8003022 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff8:	e013      	b.n	8003022 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ffa:	4b56      	ldr	r3, [pc, #344]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10f      	bne.n	8003026 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003006:	4b53      	ldr	r3, [pc, #332]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003016:	e006      	b.n	8003026 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
      break;
 800301c:	e004      	b.n	8003028 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800301e:	bf00      	nop
 8003020:	e002      	b.n	8003028 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003022:	bf00      	nop
 8003024:	e000      	b.n	8003028 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003026:	bf00      	nop
    }

    if(status == HAL_OK)
 8003028:	7bfb      	ldrb	r3, [r7, #15]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10d      	bne.n	800304a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800302e:	4b49      	ldr	r3, [pc, #292]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6819      	ldr	r1, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	3b01      	subs	r3, #1
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	430b      	orrs	r3, r1
 8003044:	4943      	ldr	r1, [pc, #268]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003046:	4313      	orrs	r3, r2
 8003048:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d17c      	bne.n	800314a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003050:	4b40      	ldr	r3, [pc, #256]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a3f      	ldr	r2, [pc, #252]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003056:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800305a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800305c:	f7fe f820 	bl	80010a0 <HAL_GetTick>
 8003060:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003062:	e009      	b.n	8003078 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003064:	f7fe f81c 	bl	80010a0 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d902      	bls.n	8003078 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	73fb      	strb	r3, [r7, #15]
        break;
 8003076:	e005      	b.n	8003084 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003078:	4b36      	ldr	r3, [pc, #216]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1ef      	bne.n	8003064 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d15f      	bne.n	800314a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d110      	bne.n	80030b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003090:	4b30      	ldr	r3, [pc, #192]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003098:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6892      	ldr	r2, [r2, #8]
 80030a0:	0211      	lsls	r1, r2, #8
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68d2      	ldr	r2, [r2, #12]
 80030a6:	06d2      	lsls	r2, r2, #27
 80030a8:	430a      	orrs	r2, r1
 80030aa:	492a      	ldr	r1, [pc, #168]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	610b      	str	r3, [r1, #16]
 80030b0:	e027      	b.n	8003102 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d112      	bne.n	80030de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030b8:	4b26      	ldr	r3, [pc, #152]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6892      	ldr	r2, [r2, #8]
 80030c8:	0211      	lsls	r1, r2, #8
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6912      	ldr	r2, [r2, #16]
 80030ce:	0852      	lsrs	r2, r2, #1
 80030d0:	3a01      	subs	r2, #1
 80030d2:	0552      	lsls	r2, r2, #21
 80030d4:	430a      	orrs	r2, r1
 80030d6:	491f      	ldr	r1, [pc, #124]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	610b      	str	r3, [r1, #16]
 80030dc:	e011      	b.n	8003102 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030de:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6892      	ldr	r2, [r2, #8]
 80030ee:	0211      	lsls	r1, r2, #8
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6952      	ldr	r2, [r2, #20]
 80030f4:	0852      	lsrs	r2, r2, #1
 80030f6:	3a01      	subs	r2, #1
 80030f8:	0652      	lsls	r2, r2, #25
 80030fa:	430a      	orrs	r2, r1
 80030fc:	4915      	ldr	r1, [pc, #84]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003102:	4b14      	ldr	r3, [pc, #80]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a13      	ldr	r2, [pc, #76]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003108:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800310c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310e:	f7fd ffc7 	bl	80010a0 <HAL_GetTick>
 8003112:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003114:	e009      	b.n	800312a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003116:	f7fd ffc3 	bl	80010a0 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d902      	bls.n	800312a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	73fb      	strb	r3, [r7, #15]
          break;
 8003128:	e005      	b.n	8003136 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800312a:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0ef      	beq.n	8003116 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d106      	bne.n	800314a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	4903      	ldr	r1, [pc, #12]	; (8003154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003146:	4313      	orrs	r3, r2
 8003148:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800314a:	7bfb      	ldrb	r3, [r7, #15]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40021000 	.word	0x40021000

08003158 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e040      	b.n	80031ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fd fdc8 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2224      	movs	r2, #36	; 0x24
 8003184:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0201 	bic.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fe14 	bl	8003dcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 fbb7 	bl	8003918 <UART_SetConfig>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e01b      	b.n	80031ec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fe93 	bl	8003f10 <UART_CheckIdleState>
 80031ea:	4603      	mov	r3, r0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08a      	sub	sp, #40	; 0x28
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	4613      	mov	r3, r2
 8003202:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003208:	2b20      	cmp	r3, #32
 800320a:	d178      	bne.n	80032fe <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <HAL_UART_Transmit+0x24>
 8003212:	88fb      	ldrh	r3, [r7, #6]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e071      	b.n	8003300 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2221      	movs	r2, #33	; 0x21
 8003228:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800322a:	f7fd ff39 	bl	80010a0 <HAL_GetTick>
 800322e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	88fa      	ldrh	r2, [r7, #6]
 8003234:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	88fa      	ldrh	r2, [r7, #6]
 800323c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003248:	d108      	bne.n	800325c <HAL_UART_Transmit+0x68>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d104      	bne.n	800325c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	61bb      	str	r3, [r7, #24]
 800325a:	e003      	b.n	8003264 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003260:	2300      	movs	r3, #0
 8003262:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003264:	e030      	b.n	80032c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2200      	movs	r2, #0
 800326e:	2180      	movs	r1, #128	; 0x80
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fef5 	bl	8004060 <UART_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d004      	beq.n	8003286 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e03c      	b.n	8003300 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10b      	bne.n	80032a4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	881a      	ldrh	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003298:	b292      	uxth	r2, r2
 800329a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	3302      	adds	r3, #2
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	e008      	b.n	80032b6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	781a      	ldrb	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	b292      	uxth	r2, r2
 80032ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	3301      	adds	r3, #1
 80032b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1c8      	bne.n	8003266 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2200      	movs	r2, #0
 80032dc:	2140      	movs	r1, #64	; 0x40
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 febe 	bl	8004060 <UART_WaitOnFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d004      	beq.n	80032f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2220      	movs	r2, #32
 80032ee:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e005      	b.n	8003300 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e000      	b.n	8003300 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80032fe:	2302      	movs	r3, #2
  }
}
 8003300:	4618      	mov	r0, r3
 8003302:	3720      	adds	r7, #32
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b0ba      	sub	sp, #232	; 0xe8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800332e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003332:	f640 030f 	movw	r3, #2063	; 0x80f
 8003336:	4013      	ands	r3, r2
 8003338:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800333c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d115      	bne.n	8003370 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00f      	beq.n	8003370 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003354:	f003 0320 	and.w	r3, r3, #32
 8003358:	2b00      	cmp	r3, #0
 800335a:	d009      	beq.n	8003370 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 82ae 	beq.w	80038c2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	4798      	blx	r3
      }
      return;
 800336e:	e2a8      	b.n	80038c2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003370:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8117 	beq.w	80035a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800337a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003386:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800338a:	4b85      	ldr	r3, [pc, #532]	; (80035a0 <HAL_UART_IRQHandler+0x298>)
 800338c:	4013      	ands	r3, r2
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 810a 	beq.w	80035a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d011      	beq.n	80033c4 <HAL_UART_IRQHandler+0xbc>
 80033a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00b      	beq.n	80033c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2201      	movs	r2, #1
 80033b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ba:	f043 0201 	orr.w	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d011      	beq.n	80033f4 <HAL_UART_IRQHandler+0xec>
 80033d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00b      	beq.n	80033f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2202      	movs	r2, #2
 80033e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ea:	f043 0204 	orr.w	r2, r3, #4
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d011      	beq.n	8003424 <HAL_UART_IRQHandler+0x11c>
 8003400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00b      	beq.n	8003424 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2204      	movs	r2, #4
 8003412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800341a:	f043 0202 	orr.w	r2, r3, #2
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d017      	beq.n	8003460 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	d105      	bne.n	8003448 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800343c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003440:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00b      	beq.n	8003460 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2208      	movs	r2, #8
 800344e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003456:	f043 0208 	orr.w	r2, r3, #8
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003468:	2b00      	cmp	r3, #0
 800346a:	d012      	beq.n	8003492 <HAL_UART_IRQHandler+0x18a>
 800346c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003470:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00c      	beq.n	8003492 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003480:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003488:	f043 0220 	orr.w	r2, r3, #32
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8214 	beq.w	80038c6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800349e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00d      	beq.n	80034c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d007      	beq.n	80034c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034da:	2b40      	cmp	r3, #64	; 0x40
 80034dc:	d005      	beq.n	80034ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80034de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d04f      	beq.n	800358a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fee6 	bl	80042bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fa:	2b40      	cmp	r3, #64	; 0x40
 80034fc:	d141      	bne.n	8003582 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3308      	adds	r3, #8
 8003504:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003508:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800350c:	e853 3f00 	ldrex	r3, [r3]
 8003510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003514:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800351c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3308      	adds	r3, #8
 8003526:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800352a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800352e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003532:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003536:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800353a:	e841 2300 	strex	r3, r2, [r1]
 800353e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1d9      	bne.n	80034fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354e:	2b00      	cmp	r3, #0
 8003550:	d013      	beq.n	800357a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003556:	4a13      	ldr	r2, [pc, #76]	; (80035a4 <HAL_UART_IRQHandler+0x29c>)
 8003558:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355e:	4618      	mov	r0, r3
 8003560:	f7fd ff13 	bl	800138a <HAL_DMA_Abort_IT>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d017      	beq.n	800359a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003574:	4610      	mov	r0, r2
 8003576:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003578:	e00f      	b.n	800359a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f9c2 	bl	8003904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003580:	e00b      	b.n	800359a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f9be 	bl	8003904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003588:	e007      	b.n	800359a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f9ba 	bl	8003904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003598:	e195      	b.n	80038c6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800359a:	bf00      	nop
    return;
 800359c:	e193      	b.n	80038c6 <HAL_UART_IRQHandler+0x5be>
 800359e:	bf00      	nop
 80035a0:	04000120 	.word	0x04000120
 80035a4:	08004385 	.word	0x08004385

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	f040 814e 	bne.w	800384e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80035b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b6:	f003 0310 	and.w	r3, r3, #16
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 8147 	beq.w	800384e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80035c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 8140 	beq.w	800384e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2210      	movs	r2, #16
 80035d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e0:	2b40      	cmp	r3, #64	; 0x40
 80035e2:	f040 80b8 	bne.w	8003756 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 8167 	beq.w	80038ca <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003602:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003606:	429a      	cmp	r2, r3
 8003608:	f080 815f 	bcs.w	80038ca <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003612:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	f040 8086 	bne.w	8003734 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800363c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003644:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003652:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003656:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800365e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003662:	e841 2300 	strex	r3, r2, [r1]
 8003666:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800366a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1da      	bne.n	8003628 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3308      	adds	r3, #8
 8003678:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800367c:	e853 3f00 	ldrex	r3, [r3]
 8003680:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003684:	f023 0301 	bic.w	r3, r3, #1
 8003688:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3308      	adds	r3, #8
 8003692:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003696:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800369a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800369e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036a2:	e841 2300 	strex	r3, r2, [r1]
 80036a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1e1      	bne.n	8003672 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3308      	adds	r3, #8
 80036b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3308      	adds	r3, #8
 80036ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80036e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1e3      	bne.n	80036ae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003704:	f023 0310 	bic.w	r3, r3, #16
 8003708:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	461a      	mov	r2, r3
 8003712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003716:	65bb      	str	r3, [r7, #88]	; 0x58
 8003718:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800371c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e4      	bne.n	80036f4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372e:	4618      	mov	r0, r3
 8003730:	f7fd fded 	bl	800130e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003746:	b29b      	uxth	r3, r3
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	b29b      	uxth	r3, r3
 800374c:	4619      	mov	r1, r3
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fd f920 	bl	8000994 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003754:	e0b9      	b.n	80038ca <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003762:	b29b      	uxth	r3, r3
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 80ab 	beq.w	80038ce <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003778:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80a6 	beq.w	80038ce <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378a:	e853 3f00 	ldrex	r3, [r3]
 800378e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003792:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003796:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80037a4:	647b      	str	r3, [r7, #68]	; 0x44
 80037a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e4      	bne.n	8003782 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3308      	adds	r3, #8
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	e853 3f00 	ldrex	r3, [r3]
 80037c6:	623b      	str	r3, [r7, #32]
   return(result);
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	f023 0301 	bic.w	r3, r3, #1
 80037ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3308      	adds	r3, #8
 80037d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037dc:	633a      	str	r2, [r7, #48]	; 0x30
 80037de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037e4:	e841 2300 	strex	r3, r2, [r1]
 80037e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1e3      	bne.n	80037b8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	60fb      	str	r3, [r7, #12]
   return(result);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f023 0310 	bic.w	r3, r3, #16
 8003818:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003826:	61fb      	str	r3, [r7, #28]
 8003828:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382a:	69b9      	ldr	r1, [r7, #24]
 800382c:	69fa      	ldr	r2, [r7, #28]
 800382e:	e841 2300 	strex	r3, r2, [r1]
 8003832:	617b      	str	r3, [r7, #20]
   return(result);
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1e4      	bne.n	8003804 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2202      	movs	r2, #2
 800383e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003840:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fd f8a4 	bl	8000994 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800384c:	e03f      	b.n	80038ce <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800384e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00e      	beq.n	8003878 <HAL_UART_IRQHandler+0x570>
 800385a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800385e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800386e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 ff83 	bl	800477c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003876:	e02d      	b.n	80038d4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800387c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00e      	beq.n	80038a2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003894:	2b00      	cmp	r3, #0
 8003896:	d01c      	beq.n	80038d2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	4798      	blx	r3
    }
    return;
 80038a0:	e017      	b.n	80038d2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d012      	beq.n	80038d4 <HAL_UART_IRQHandler+0x5cc>
 80038ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00c      	beq.n	80038d4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fd78 	bl	80043b0 <UART_EndTransmit_IT>
    return;
 80038c0:	e008      	b.n	80038d4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80038c2:	bf00      	nop
 80038c4:	e006      	b.n	80038d4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80038c6:	bf00      	nop
 80038c8:	e004      	b.n	80038d4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80038ca:	bf00      	nop
 80038cc:	e002      	b.n	80038d4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80038ce:	bf00      	nop
 80038d0:	e000      	b.n	80038d4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80038d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80038d4:	37e8      	adds	r7, #232	; 0xe8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop

080038dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800391c:	b08a      	sub	sp, #40	; 0x28
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	431a      	orrs	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	431a      	orrs	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	4313      	orrs	r3, r2
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	4b9e      	ldr	r3, [pc, #632]	; (8003bc0 <UART_SetConfig+0x2a8>)
 8003948:	4013      	ands	r3, r2
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	6812      	ldr	r2, [r2, #0]
 800394e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003950:	430b      	orrs	r3, r1
 8003952:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a93      	ldr	r2, [pc, #588]	; (8003bc4 <UART_SetConfig+0x2ac>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d004      	beq.n	8003984 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003980:	4313      	orrs	r3, r2
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003994:	430a      	orrs	r2, r1
 8003996:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a8a      	ldr	r2, [pc, #552]	; (8003bc8 <UART_SetConfig+0x2b0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d126      	bne.n	80039f0 <UART_SetConfig+0xd8>
 80039a2:	4b8a      	ldr	r3, [pc, #552]	; (8003bcc <UART_SetConfig+0x2b4>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	d81b      	bhi.n	80039e8 <UART_SetConfig+0xd0>
 80039b0:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <UART_SetConfig+0xa0>)
 80039b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b6:	bf00      	nop
 80039b8:	080039c9 	.word	0x080039c9
 80039bc:	080039d9 	.word	0x080039d9
 80039c0:	080039d1 	.word	0x080039d1
 80039c4:	080039e1 	.word	0x080039e1
 80039c8:	2301      	movs	r3, #1
 80039ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ce:	e0ab      	b.n	8003b28 <UART_SetConfig+0x210>
 80039d0:	2302      	movs	r3, #2
 80039d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d6:	e0a7      	b.n	8003b28 <UART_SetConfig+0x210>
 80039d8:	2304      	movs	r3, #4
 80039da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039de:	e0a3      	b.n	8003b28 <UART_SetConfig+0x210>
 80039e0:	2308      	movs	r3, #8
 80039e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e6:	e09f      	b.n	8003b28 <UART_SetConfig+0x210>
 80039e8:	2310      	movs	r3, #16
 80039ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ee:	e09b      	b.n	8003b28 <UART_SetConfig+0x210>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a76      	ldr	r2, [pc, #472]	; (8003bd0 <UART_SetConfig+0x2b8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d138      	bne.n	8003a6c <UART_SetConfig+0x154>
 80039fa:	4b74      	ldr	r3, [pc, #464]	; (8003bcc <UART_SetConfig+0x2b4>)
 80039fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a00:	f003 030c 	and.w	r3, r3, #12
 8003a04:	2b0c      	cmp	r3, #12
 8003a06:	d82d      	bhi.n	8003a64 <UART_SetConfig+0x14c>
 8003a08:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <UART_SetConfig+0xf8>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003a45 	.word	0x08003a45
 8003a14:	08003a65 	.word	0x08003a65
 8003a18:	08003a65 	.word	0x08003a65
 8003a1c:	08003a65 	.word	0x08003a65
 8003a20:	08003a55 	.word	0x08003a55
 8003a24:	08003a65 	.word	0x08003a65
 8003a28:	08003a65 	.word	0x08003a65
 8003a2c:	08003a65 	.word	0x08003a65
 8003a30:	08003a4d 	.word	0x08003a4d
 8003a34:	08003a65 	.word	0x08003a65
 8003a38:	08003a65 	.word	0x08003a65
 8003a3c:	08003a65 	.word	0x08003a65
 8003a40:	08003a5d 	.word	0x08003a5d
 8003a44:	2300      	movs	r3, #0
 8003a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a4a:	e06d      	b.n	8003b28 <UART_SetConfig+0x210>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a52:	e069      	b.n	8003b28 <UART_SetConfig+0x210>
 8003a54:	2304      	movs	r3, #4
 8003a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a5a:	e065      	b.n	8003b28 <UART_SetConfig+0x210>
 8003a5c:	2308      	movs	r3, #8
 8003a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a62:	e061      	b.n	8003b28 <UART_SetConfig+0x210>
 8003a64:	2310      	movs	r3, #16
 8003a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a6a:	e05d      	b.n	8003b28 <UART_SetConfig+0x210>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a58      	ldr	r2, [pc, #352]	; (8003bd4 <UART_SetConfig+0x2bc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d125      	bne.n	8003ac2 <UART_SetConfig+0x1aa>
 8003a76:	4b55      	ldr	r3, [pc, #340]	; (8003bcc <UART_SetConfig+0x2b4>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a80:	2b30      	cmp	r3, #48	; 0x30
 8003a82:	d016      	beq.n	8003ab2 <UART_SetConfig+0x19a>
 8003a84:	2b30      	cmp	r3, #48	; 0x30
 8003a86:	d818      	bhi.n	8003aba <UART_SetConfig+0x1a2>
 8003a88:	2b20      	cmp	r3, #32
 8003a8a:	d00a      	beq.n	8003aa2 <UART_SetConfig+0x18a>
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	d814      	bhi.n	8003aba <UART_SetConfig+0x1a2>
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <UART_SetConfig+0x182>
 8003a94:	2b10      	cmp	r3, #16
 8003a96:	d008      	beq.n	8003aaa <UART_SetConfig+0x192>
 8003a98:	e00f      	b.n	8003aba <UART_SetConfig+0x1a2>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa0:	e042      	b.n	8003b28 <UART_SetConfig+0x210>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa8:	e03e      	b.n	8003b28 <UART_SetConfig+0x210>
 8003aaa:	2304      	movs	r3, #4
 8003aac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab0:	e03a      	b.n	8003b28 <UART_SetConfig+0x210>
 8003ab2:	2308      	movs	r3, #8
 8003ab4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab8:	e036      	b.n	8003b28 <UART_SetConfig+0x210>
 8003aba:	2310      	movs	r3, #16
 8003abc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ac0:	e032      	b.n	8003b28 <UART_SetConfig+0x210>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a3f      	ldr	r2, [pc, #252]	; (8003bc4 <UART_SetConfig+0x2ac>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d12a      	bne.n	8003b22 <UART_SetConfig+0x20a>
 8003acc:	4b3f      	ldr	r3, [pc, #252]	; (8003bcc <UART_SetConfig+0x2b4>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ad6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ada:	d01a      	beq.n	8003b12 <UART_SetConfig+0x1fa>
 8003adc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ae0:	d81b      	bhi.n	8003b1a <UART_SetConfig+0x202>
 8003ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae6:	d00c      	beq.n	8003b02 <UART_SetConfig+0x1ea>
 8003ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aec:	d815      	bhi.n	8003b1a <UART_SetConfig+0x202>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <UART_SetConfig+0x1e2>
 8003af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af6:	d008      	beq.n	8003b0a <UART_SetConfig+0x1f2>
 8003af8:	e00f      	b.n	8003b1a <UART_SetConfig+0x202>
 8003afa:	2300      	movs	r3, #0
 8003afc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b00:	e012      	b.n	8003b28 <UART_SetConfig+0x210>
 8003b02:	2302      	movs	r3, #2
 8003b04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b08:	e00e      	b.n	8003b28 <UART_SetConfig+0x210>
 8003b0a:	2304      	movs	r3, #4
 8003b0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b10:	e00a      	b.n	8003b28 <UART_SetConfig+0x210>
 8003b12:	2308      	movs	r3, #8
 8003b14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b18:	e006      	b.n	8003b28 <UART_SetConfig+0x210>
 8003b1a:	2310      	movs	r3, #16
 8003b1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b20:	e002      	b.n	8003b28 <UART_SetConfig+0x210>
 8003b22:	2310      	movs	r3, #16
 8003b24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a25      	ldr	r2, [pc, #148]	; (8003bc4 <UART_SetConfig+0x2ac>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	f040 808a 	bne.w	8003c48 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d824      	bhi.n	8003b86 <UART_SetConfig+0x26e>
 8003b3c:	a201      	add	r2, pc, #4	; (adr r2, 8003b44 <UART_SetConfig+0x22c>)
 8003b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b42:	bf00      	nop
 8003b44:	08003b69 	.word	0x08003b69
 8003b48:	08003b87 	.word	0x08003b87
 8003b4c:	08003b71 	.word	0x08003b71
 8003b50:	08003b87 	.word	0x08003b87
 8003b54:	08003b77 	.word	0x08003b77
 8003b58:	08003b87 	.word	0x08003b87
 8003b5c:	08003b87 	.word	0x08003b87
 8003b60:	08003b87 	.word	0x08003b87
 8003b64:	08003b7f 	.word	0x08003b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b68:	f7fe ff60 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 8003b6c:	61f8      	str	r0, [r7, #28]
        break;
 8003b6e:	e010      	b.n	8003b92 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b70:	4b19      	ldr	r3, [pc, #100]	; (8003bd8 <UART_SetConfig+0x2c0>)
 8003b72:	61fb      	str	r3, [r7, #28]
        break;
 8003b74:	e00d      	b.n	8003b92 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b76:	f7fe fec3 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 8003b7a:	61f8      	str	r0, [r7, #28]
        break;
 8003b7c:	e009      	b.n	8003b92 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b82:	61fb      	str	r3, [r7, #28]
        break;
 8003b84:	e005      	b.n	8003b92 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 8109 	beq.w	8003dac <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	4413      	add	r3, r2
 8003ba4:	69fa      	ldr	r2, [r7, #28]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d305      	bcc.n	8003bb6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bb0:	69fa      	ldr	r2, [r7, #28]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d912      	bls.n	8003bdc <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bbc:	e0f6      	b.n	8003dac <UART_SetConfig+0x494>
 8003bbe:	bf00      	nop
 8003bc0:	efff69f3 	.word	0xefff69f3
 8003bc4:	40008000 	.word	0x40008000
 8003bc8:	40013800 	.word	0x40013800
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40004400 	.word	0x40004400
 8003bd4:	40004800 	.word	0x40004800
 8003bd8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	2200      	movs	r2, #0
 8003be0:	461c      	mov	r4, r3
 8003be2:	4615      	mov	r5, r2
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	022b      	lsls	r3, r5, #8
 8003bee:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003bf2:	0222      	lsls	r2, r4, #8
 8003bf4:	68f9      	ldr	r1, [r7, #12]
 8003bf6:	6849      	ldr	r1, [r1, #4]
 8003bf8:	0849      	lsrs	r1, r1, #1
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	4688      	mov	r8, r1
 8003bfe:	4681      	mov	r9, r0
 8003c00:	eb12 0a08 	adds.w	sl, r2, r8
 8003c04:	eb43 0b09 	adc.w	fp, r3, r9
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c16:	4650      	mov	r0, sl
 8003c18:	4659      	mov	r1, fp
 8003c1a:	f7fc fad7 	bl	80001cc <__aeabi_uldivmod>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	4613      	mov	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c2c:	d308      	bcc.n	8003c40 <UART_SetConfig+0x328>
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c34:	d204      	bcs.n	8003c40 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	60da      	str	r2, [r3, #12]
 8003c3e:	e0b5      	b.n	8003dac <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c46:	e0b1      	b.n	8003dac <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c50:	d15d      	bne.n	8003d0e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003c52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d827      	bhi.n	8003caa <UART_SetConfig+0x392>
 8003c5a:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <UART_SetConfig+0x348>)
 8003c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c60:	08003c85 	.word	0x08003c85
 8003c64:	08003c8d 	.word	0x08003c8d
 8003c68:	08003c95 	.word	0x08003c95
 8003c6c:	08003cab 	.word	0x08003cab
 8003c70:	08003c9b 	.word	0x08003c9b
 8003c74:	08003cab 	.word	0x08003cab
 8003c78:	08003cab 	.word	0x08003cab
 8003c7c:	08003cab 	.word	0x08003cab
 8003c80:	08003ca3 	.word	0x08003ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c84:	f7fe fed2 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 8003c88:	61f8      	str	r0, [r7, #28]
        break;
 8003c8a:	e014      	b.n	8003cb6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c8c:	f7fe fee4 	bl	8002a58 <HAL_RCC_GetPCLK2Freq>
 8003c90:	61f8      	str	r0, [r7, #28]
        break;
 8003c92:	e010      	b.n	8003cb6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c94:	4b4c      	ldr	r3, [pc, #304]	; (8003dc8 <UART_SetConfig+0x4b0>)
 8003c96:	61fb      	str	r3, [r7, #28]
        break;
 8003c98:	e00d      	b.n	8003cb6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c9a:	f7fe fe31 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 8003c9e:	61f8      	str	r0, [r7, #28]
        break;
 8003ca0:	e009      	b.n	8003cb6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca6:	61fb      	str	r3, [r7, #28]
        break;
 8003ca8:	e005      	b.n	8003cb6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d077      	beq.n	8003dac <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	005a      	lsls	r2, r3, #1
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	085b      	lsrs	r3, r3, #1
 8003cc6:	441a      	add	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	2b0f      	cmp	r3, #15
 8003cd6:	d916      	bls.n	8003d06 <UART_SetConfig+0x3ee>
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cde:	d212      	bcs.n	8003d06 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	f023 030f 	bic.w	r3, r3, #15
 8003ce8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	085b      	lsrs	r3, r3, #1
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	8afb      	ldrh	r3, [r7, #22]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	8afa      	ldrh	r2, [r7, #22]
 8003d02:	60da      	str	r2, [r3, #12]
 8003d04:	e052      	b.n	8003dac <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d0c:	e04e      	b.n	8003dac <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d827      	bhi.n	8003d66 <UART_SetConfig+0x44e>
 8003d16:	a201      	add	r2, pc, #4	; (adr r2, 8003d1c <UART_SetConfig+0x404>)
 8003d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1c:	08003d41 	.word	0x08003d41
 8003d20:	08003d49 	.word	0x08003d49
 8003d24:	08003d51 	.word	0x08003d51
 8003d28:	08003d67 	.word	0x08003d67
 8003d2c:	08003d57 	.word	0x08003d57
 8003d30:	08003d67 	.word	0x08003d67
 8003d34:	08003d67 	.word	0x08003d67
 8003d38:	08003d67 	.word	0x08003d67
 8003d3c:	08003d5f 	.word	0x08003d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d40:	f7fe fe74 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 8003d44:	61f8      	str	r0, [r7, #28]
        break;
 8003d46:	e014      	b.n	8003d72 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d48:	f7fe fe86 	bl	8002a58 <HAL_RCC_GetPCLK2Freq>
 8003d4c:	61f8      	str	r0, [r7, #28]
        break;
 8003d4e:	e010      	b.n	8003d72 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d50:	4b1d      	ldr	r3, [pc, #116]	; (8003dc8 <UART_SetConfig+0x4b0>)
 8003d52:	61fb      	str	r3, [r7, #28]
        break;
 8003d54:	e00d      	b.n	8003d72 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d56:	f7fe fdd3 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 8003d5a:	61f8      	str	r0, [r7, #28]
        break;
 8003d5c:	e009      	b.n	8003d72 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d62:	61fb      	str	r3, [r7, #28]
        break;
 8003d64:	e005      	b.n	8003d72 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d70:	bf00      	nop
    }

    if (pclk != 0U)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d019      	beq.n	8003dac <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	085a      	lsrs	r2, r3, #1
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	441a      	add	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	2b0f      	cmp	r3, #15
 8003d90:	d909      	bls.n	8003da6 <UART_SetConfig+0x48e>
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d98:	d205      	bcs.n	8003da6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	60da      	str	r2, [r3, #12]
 8003da4:	e002      	b.n	8003dac <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003db8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3728      	adds	r7, #40	; 0x28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dc6:	bf00      	nop
 8003dc8:	00f42400 	.word	0x00f42400

08003dcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01a      	beq.n	8003ee2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eca:	d10a      	bne.n	8003ee2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	605a      	str	r2, [r3, #4]
  }
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b098      	sub	sp, #96	; 0x60
 8003f14:	af02      	add	r7, sp, #8
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f20:	f7fd f8be 	bl	80010a0 <HAL_GetTick>
 8003f24:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d12e      	bne.n	8003f92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f88c 	bl	8004060 <UART_WaitOnFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d021      	beq.n	8003f92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f56:	e853 3f00 	ldrex	r3, [r3]
 8003f5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f62:	653b      	str	r3, [r7, #80]	; 0x50
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f6e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f74:	e841 2300 	strex	r3, r2, [r1]
 8003f78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e6      	bne.n	8003f4e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e062      	b.n	8004058 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d149      	bne.n	8004034 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f856 	bl	8004060 <UART_WaitOnFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d03c      	beq.n	8004034 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	e853 3f00 	ldrex	r3, [r3]
 8003fc6:	623b      	str	r3, [r7, #32]
   return(result);
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd8:	633b      	str	r3, [r7, #48]	; 0x30
 8003fda:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fe0:	e841 2300 	strex	r3, r2, [r1]
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e6      	bne.n	8003fba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3308      	adds	r3, #8
 8003ff2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	e853 3f00 	ldrex	r3, [r3]
 8003ffa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0301 	bic.w	r3, r3, #1
 8004002:	64bb      	str	r3, [r7, #72]	; 0x48
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3308      	adds	r3, #8
 800400a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800400c:	61fa      	str	r2, [r7, #28]
 800400e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	69b9      	ldr	r1, [r7, #24]
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	617b      	str	r3, [r7, #20]
   return(result);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e5      	bne.n	8003fec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e011      	b.n	8004058 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3758      	adds	r7, #88	; 0x58
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	4613      	mov	r3, r2
 800406e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004070:	e049      	b.n	8004106 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d045      	beq.n	8004106 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800407a:	f7fd f811 	bl	80010a0 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	429a      	cmp	r2, r3
 8004088:	d302      	bcc.n	8004090 <UART_WaitOnFlagUntilTimeout+0x30>
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e048      	b.n	8004126 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d031      	beq.n	8004106 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d110      	bne.n	80040d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2208      	movs	r2, #8
 80040b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f8ff 	bl	80042bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2208      	movs	r2, #8
 80040c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e029      	b.n	8004126 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e0:	d111      	bne.n	8004106 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f8e5 	bl	80042bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e00f      	b.n	8004126 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	69da      	ldr	r2, [r3, #28]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4013      	ands	r3, r2
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	429a      	cmp	r2, r3
 8004114:	bf0c      	ite	eq
 8004116:	2301      	moveq	r3, #1
 8004118:	2300      	movne	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	429a      	cmp	r2, r3
 8004122:	d0a6      	beq.n	8004072 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004130:	b480      	push	{r7}
 8004132:	b097      	sub	sp, #92	; 0x5c
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	4613      	mov	r3, r2
 800413c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	88fa      	ldrh	r2, [r7, #6]
 8004148:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	88fa      	ldrh	r2, [r7, #6]
 8004150:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004162:	d10e      	bne.n	8004182 <UART_Start_Receive_IT+0x52>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d105      	bne.n	8004178 <UART_Start_Receive_IT+0x48>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004172:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004176:	e02d      	b.n	80041d4 <UART_Start_Receive_IT+0xa4>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	22ff      	movs	r2, #255	; 0xff
 800417c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004180:	e028      	b.n	80041d4 <UART_Start_Receive_IT+0xa4>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10d      	bne.n	80041a6 <UART_Start_Receive_IT+0x76>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d104      	bne.n	800419c <UART_Start_Receive_IT+0x6c>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	22ff      	movs	r2, #255	; 0xff
 8004196:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800419a:	e01b      	b.n	80041d4 <UART_Start_Receive_IT+0xa4>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	227f      	movs	r2, #127	; 0x7f
 80041a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041a4:	e016      	b.n	80041d4 <UART_Start_Receive_IT+0xa4>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041ae:	d10d      	bne.n	80041cc <UART_Start_Receive_IT+0x9c>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d104      	bne.n	80041c2 <UART_Start_Receive_IT+0x92>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	227f      	movs	r2, #127	; 0x7f
 80041bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041c0:	e008      	b.n	80041d4 <UART_Start_Receive_IT+0xa4>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	223f      	movs	r2, #63	; 0x3f
 80041c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041ca:	e003      	b.n	80041d4 <UART_Start_Receive_IT+0xa4>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2222      	movs	r2, #34	; 0x22
 80041e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3308      	adds	r3, #8
 80041ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ee:	e853 3f00 	ldrex	r3, [r3]
 80041f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	657b      	str	r3, [r7, #84]	; 0x54
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3308      	adds	r3, #8
 8004202:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004204:	64ba      	str	r2, [r7, #72]	; 0x48
 8004206:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800420a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800420c:	e841 2300 	strex	r3, r2, [r1]
 8004210:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e5      	bne.n	80041e4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004220:	d107      	bne.n	8004232 <UART_Start_Receive_IT+0x102>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d103      	bne.n	8004232 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4a21      	ldr	r2, [pc, #132]	; (80042b4 <UART_Start_Receive_IT+0x184>)
 800422e:	669a      	str	r2, [r3, #104]	; 0x68
 8004230:	e002      	b.n	8004238 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4a20      	ldr	r2, [pc, #128]	; (80042b8 <UART_Start_Receive_IT+0x188>)
 8004236:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d019      	beq.n	8004274 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004254:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800425e:	637b      	str	r3, [r7, #52]	; 0x34
 8004260:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004264:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800426c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e6      	bne.n	8004240 <UART_Start_Receive_IT+0x110>
 8004272:	e018      	b.n	80042a6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	613b      	str	r3, [r7, #16]
   return(result);
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f043 0320 	orr.w	r3, r3, #32
 8004288:	653b      	str	r3, [r7, #80]	; 0x50
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004292:	623b      	str	r3, [r7, #32]
 8004294:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	69f9      	ldr	r1, [r7, #28]
 8004298:	6a3a      	ldr	r2, [r7, #32]
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	61bb      	str	r3, [r7, #24]
   return(result);
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e6      	bne.n	8004274 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	375c      	adds	r7, #92	; 0x5c
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	080045c1 	.word	0x080045c1
 80042b8:	08004405 	.word	0x08004405

080042bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042bc:	b480      	push	{r7}
 80042be:	b095      	sub	sp, #84	; 0x54
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e2:	643b      	str	r3, [r7, #64]	; 0x40
 80042e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042ea:	e841 2300 	strex	r3, r2, [r1]
 80042ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1e6      	bne.n	80042c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3308      	adds	r3, #8
 80042fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	e853 3f00 	ldrex	r3, [r3]
 8004304:	61fb      	str	r3, [r7, #28]
   return(result);
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	f023 0301 	bic.w	r3, r3, #1
 800430c:	64bb      	str	r3, [r7, #72]	; 0x48
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3308      	adds	r3, #8
 8004314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004316:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004318:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800431c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800431e:	e841 2300 	strex	r3, r2, [r1]
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1e5      	bne.n	80042f6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800432e:	2b01      	cmp	r3, #1
 8004330:	d118      	bne.n	8004364 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f023 0310 	bic.w	r3, r3, #16
 8004346:	647b      	str	r3, [r7, #68]	; 0x44
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004350:	61bb      	str	r3, [r7, #24]
 8004352:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004354:	6979      	ldr	r1, [r7, #20]
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	e841 2300 	strex	r3, r2, [r1]
 800435c:	613b      	str	r3, [r7, #16]
   return(result);
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e6      	bne.n	8004332 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004378:	bf00      	nop
 800437a:	3754      	adds	r7, #84	; 0x54
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f7ff faae 	bl	8003904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043a8:	bf00      	nop
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	e853 3f00 	ldrex	r3, [r3]
 80043c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043cc:	61fb      	str	r3, [r7, #28]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	461a      	mov	r2, r3
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	61bb      	str	r3, [r7, #24]
 80043d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043da:	6979      	ldr	r1, [r7, #20]
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	e841 2300 	strex	r3, r2, [r1]
 80043e2:	613b      	str	r3, [r7, #16]
   return(result);
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1e6      	bne.n	80043b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7ff fa70 	bl	80038dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043fc:	bf00      	nop
 80043fe:	3720      	adds	r7, #32
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b09c      	sub	sp, #112	; 0x70
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004412:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800441c:	2b22      	cmp	r3, #34	; 0x22
 800441e:	f040 80be 	bne.w	800459e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004428:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800442c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004430:	b2d9      	uxtb	r1, r3
 8004432:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004436:	b2da      	uxtb	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443c:	400a      	ands	r2, r1
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	f040 80a3 	bne.w	80045b2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004474:	e853 3f00 	ldrex	r3, [r3]
 8004478:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800447a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800447c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004480:	66bb      	str	r3, [r7, #104]	; 0x68
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	461a      	mov	r2, r3
 8004488:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800448a:	65bb      	str	r3, [r7, #88]	; 0x58
 800448c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004490:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004492:	e841 2300 	strex	r3, r2, [r1]
 8004496:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1e6      	bne.n	800446c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3308      	adds	r3, #8
 80044a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a8:	e853 3f00 	ldrex	r3, [r3]
 80044ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b0:	f023 0301 	bic.w	r3, r3, #1
 80044b4:	667b      	str	r3, [r7, #100]	; 0x64
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3308      	adds	r3, #8
 80044bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80044be:	647a      	str	r2, [r7, #68]	; 0x44
 80044c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044c6:	e841 2300 	strex	r3, r2, [r1]
 80044ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1e5      	bne.n	800449e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a34      	ldr	r2, [pc, #208]	; (80045bc <UART_RxISR_8BIT+0x1b8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d01f      	beq.n	8004530 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d018      	beq.n	8004530 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	623b      	str	r3, [r7, #32]
   return(result);
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004512:	663b      	str	r3, [r7, #96]	; 0x60
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800451c:	633b      	str	r3, [r7, #48]	; 0x30
 800451e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e6      	bne.n	80044fe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004534:	2b01      	cmp	r3, #1
 8004536:	d12e      	bne.n	8004596 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	e853 3f00 	ldrex	r3, [r3]
 800454a:	60fb      	str	r3, [r7, #12]
   return(result);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0310 	bic.w	r3, r3, #16
 8004552:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	69b9      	ldr	r1, [r7, #24]
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	e841 2300 	strex	r3, r2, [r1]
 8004568:	617b      	str	r3, [r7, #20]
   return(result);
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e6      	bne.n	800453e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f003 0310 	and.w	r3, r3, #16
 800457a:	2b10      	cmp	r3, #16
 800457c:	d103      	bne.n	8004586 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2210      	movs	r2, #16
 8004584:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800458c:	4619      	mov	r1, r3
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fc fa00 	bl	8000994 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004594:	e00d      	b.n	80045b2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff f9aa 	bl	80038f0 <HAL_UART_RxCpltCallback>
}
 800459c:	e009      	b.n	80045b2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	8b1b      	ldrh	r3, [r3, #24]
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0208 	orr.w	r2, r2, #8
 80045ae:	b292      	uxth	r2, r2
 80045b0:	831a      	strh	r2, [r3, #24]
}
 80045b2:	bf00      	nop
 80045b4:	3770      	adds	r7, #112	; 0x70
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40008000 	.word	0x40008000

080045c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b09c      	sub	sp, #112	; 0x70
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80045ce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045d8:	2b22      	cmp	r3, #34	; 0x22
 80045da:	f040 80be 	bne.w	800475a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80045e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ec:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80045ee:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80045f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80045f6:	4013      	ands	r3, r2
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004602:	1c9a      	adds	r2, r3, #2
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	f040 80a3 	bne.w	800476e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004638:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800463c:	667b      	str	r3, [r7, #100]	; 0x64
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004646:	657b      	str	r3, [r7, #84]	; 0x54
 8004648:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800464c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800464e:	e841 2300 	strex	r3, r2, [r1]
 8004652:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e6      	bne.n	8004628 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	3308      	adds	r3, #8
 8004660:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	f023 0301 	bic.w	r3, r3, #1
 8004670:	663b      	str	r3, [r7, #96]	; 0x60
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3308      	adds	r3, #8
 8004678:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800467a:	643a      	str	r2, [r7, #64]	; 0x40
 800467c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004680:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e5      	bne.n	800465a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a34      	ldr	r2, [pc, #208]	; (8004778 <UART_RxISR_16BIT+0x1b8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d01f      	beq.n	80046ec <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d018      	beq.n	80046ec <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	e853 3f00 	ldrex	r3, [r3]
 80046c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	461a      	mov	r2, r3
 80046d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046da:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046e0:	e841 2300 	strex	r3, r2, [r1]
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e6      	bne.n	80046ba <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d12e      	bne.n	8004752 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	60bb      	str	r3, [r7, #8]
   return(result);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f023 0310 	bic.w	r3, r3, #16
 800470e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004718:	61bb      	str	r3, [r7, #24]
 800471a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	6979      	ldr	r1, [r7, #20]
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	613b      	str	r3, [r7, #16]
   return(result);
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e6      	bne.n	80046fa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f003 0310 	and.w	r3, r3, #16
 8004736:	2b10      	cmp	r3, #16
 8004738:	d103      	bne.n	8004742 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2210      	movs	r2, #16
 8004740:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004748:	4619      	mov	r1, r3
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fc f922 	bl	8000994 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004750:	e00d      	b.n	800476e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff f8cc 	bl	80038f0 <HAL_UART_RxCpltCallback>
}
 8004758:	e009      	b.n	800476e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	8b1b      	ldrh	r3, [r3, #24]
 8004760:	b29a      	uxth	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0208 	orr.w	r2, r2, #8
 800476a:	b292      	uxth	r2, r2
 800476c:	831a      	strh	r2, [r3, #24]
}
 800476e:	bf00      	nop
 8004770:	3770      	adds	r7, #112	; 0x70
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40008000 	.word	0x40008000

0800477c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08c      	sub	sp, #48	; 0x30
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	4613      	mov	r3, r2
 800479c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	d13b      	bne.n	8004826 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d002      	beq.n	80047ba <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 80047b4:	88fb      	ldrh	r3, [r7, #6]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e034      	b.n	8004828 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	665a      	str	r2, [r3, #100]	; 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 80047ca:	88fb      	ldrh	r3, [r7, #6]
 80047cc:	461a      	mov	r2, r3
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f7ff fcad 	bl	8004130 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d11d      	bne.n	800481a <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2210      	movs	r2, #16
 80047e4:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	e853 3f00 	ldrex	r3, [r3]
 80047f2:	617b      	str	r3, [r7, #20]
   return(result);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f043 0310 	orr.w	r3, r3, #16
 80047fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	461a      	mov	r2, r3
 8004802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
 8004806:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004808:	6a39      	ldr	r1, [r7, #32]
 800480a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480c:	e841 2300 	strex	r3, r2, [r1]
 8004810:	61fb      	str	r3, [r7, #28]
   return(result);
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e6      	bne.n	80047e6 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8004818:	e002      	b.n	8004820 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 8004820:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004824:	e000      	b.n	8004828 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8004826:	2302      	movs	r3, #2
  }
}
 8004828:	4618      	mov	r0, r3
 800482a:	3730      	adds	r7, #48	; 0x30
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <memset>:
 8004830:	4402      	add	r2, r0
 8004832:	4603      	mov	r3, r0
 8004834:	4293      	cmp	r3, r2
 8004836:	d100      	bne.n	800483a <memset+0xa>
 8004838:	4770      	bx	lr
 800483a:	f803 1b01 	strb.w	r1, [r3], #1
 800483e:	e7f9      	b.n	8004834 <memset+0x4>

08004840 <__libc_init_array>:
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	4d0d      	ldr	r5, [pc, #52]	; (8004878 <__libc_init_array+0x38>)
 8004844:	4c0d      	ldr	r4, [pc, #52]	; (800487c <__libc_init_array+0x3c>)
 8004846:	1b64      	subs	r4, r4, r5
 8004848:	10a4      	asrs	r4, r4, #2
 800484a:	2600      	movs	r6, #0
 800484c:	42a6      	cmp	r6, r4
 800484e:	d109      	bne.n	8004864 <__libc_init_array+0x24>
 8004850:	4d0b      	ldr	r5, [pc, #44]	; (8004880 <__libc_init_array+0x40>)
 8004852:	4c0c      	ldr	r4, [pc, #48]	; (8004884 <__libc_init_array+0x44>)
 8004854:	f000 f826 	bl	80048a4 <_init>
 8004858:	1b64      	subs	r4, r4, r5
 800485a:	10a4      	asrs	r4, r4, #2
 800485c:	2600      	movs	r6, #0
 800485e:	42a6      	cmp	r6, r4
 8004860:	d105      	bne.n	800486e <__libc_init_array+0x2e>
 8004862:	bd70      	pop	{r4, r5, r6, pc}
 8004864:	f855 3b04 	ldr.w	r3, [r5], #4
 8004868:	4798      	blx	r3
 800486a:	3601      	adds	r6, #1
 800486c:	e7ee      	b.n	800484c <__libc_init_array+0xc>
 800486e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004872:	4798      	blx	r3
 8004874:	3601      	adds	r6, #1
 8004876:	e7f2      	b.n	800485e <__libc_init_array+0x1e>
 8004878:	0800490c 	.word	0x0800490c
 800487c:	0800490c 	.word	0x0800490c
 8004880:	0800490c 	.word	0x0800490c
 8004884:	08004910 	.word	0x08004910

08004888 <memcpy>:
 8004888:	440a      	add	r2, r1
 800488a:	4291      	cmp	r1, r2
 800488c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004890:	d100      	bne.n	8004894 <memcpy+0xc>
 8004892:	4770      	bx	lr
 8004894:	b510      	push	{r4, lr}
 8004896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800489a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800489e:	4291      	cmp	r1, r2
 80048a0:	d1f9      	bne.n	8004896 <memcpy+0xe>
 80048a2:	bd10      	pop	{r4, pc}

080048a4 <_init>:
 80048a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a6:	bf00      	nop
 80048a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048aa:	bc08      	pop	{r3}
 80048ac:	469e      	mov	lr, r3
 80048ae:	4770      	bx	lr

080048b0 <_fini>:
 80048b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b2:	bf00      	nop
 80048b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b6:	bc08      	pop	{r3}
 80048b8:	469e      	mov	lr, r3
 80048ba:	4770      	bx	lr
